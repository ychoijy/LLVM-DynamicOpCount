/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Machine Code Emitter                                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

uint64_t AMDGPUMCCodeEmitter::getBinaryCodeForInstr(const MCInst &MI,
    SmallVectorImpl<MCFixup> &Fixups,
    const MCSubtargetInfo &STI) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),	// ADD
    UINT64_C(45079976738816),	// ADDC_UINT
    UINT64_C(28587302322176),	// ADD_INT
    UINT64_C(0),	// ALU_CLAUSE
    UINT64_C(26388279066624),	// AND_INT
    UINT64_C(11544872091648),	// ASHR_eg
    UINT64_C(61572651155456),	// ASHR_r600
    UINT64_C(93458488360960),	// BCNT_INT
    UINT64_C(175921860444160),	// BFE_INT_eg
    UINT64_C(140737488355328),	// BFE_UINT_eg
    UINT64_C(211106232532992),	// BFI_INT_eg
    UINT64_C(87960930222080),	// BFM_INT_eg
    UINT64_C(422212465065984),	// BIT_ALIGN_INT_eg
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3771236352),	// BUFFER_ATOMIC_ADD_ADDR64_si
    UINT64_C(0),
    UINT64_C(3771203584),	// BUFFER_ATOMIC_ADD_OFFSET_si
    UINT64_C(3775397888),	// BUFFER_ATOMIC_ADD_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3771252736),	// BUFFER_ATOMIC_ADD_RTN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3771219968),	// BUFFER_ATOMIC_ADD_RTN_OFFSET_si
    UINT64_C(3775414272),	// BUFFER_ATOMIC_ADD_RTN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3773071360),	// BUFFER_ATOMIC_AND_ADDR64_si
    UINT64_C(0),
    UINT64_C(3773038592),	// BUFFER_ATOMIC_AND_OFFSET_si
    UINT64_C(3776970752),	// BUFFER_ATOMIC_AND_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3773087744),	// BUFFER_ATOMIC_AND_RTN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3773054976),	// BUFFER_ATOMIC_AND_RTN_OFFSET_si
    UINT64_C(3776987136),	// BUFFER_ATOMIC_AND_RTN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3773333504),	// BUFFER_ATOMIC_OR_ADDR64_si
    UINT64_C(0),
    UINT64_C(3773300736),	// BUFFER_ATOMIC_OR_OFFSET_si
    UINT64_C(3777232896),	// BUFFER_ATOMIC_OR_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3773349888),	// BUFFER_ATOMIC_OR_RTN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3773317120),	// BUFFER_ATOMIC_OR_RTN_OFFSET_si
    UINT64_C(3777249280),	// BUFFER_ATOMIC_OR_RTN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3772547072),	// BUFFER_ATOMIC_SMAX_ADDR64_si
    UINT64_C(0),
    UINT64_C(3772514304),	// BUFFER_ATOMIC_SMAX_OFFSET_si
    UINT64_C(3776446464),	// BUFFER_ATOMIC_SMAX_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3772563456),	// BUFFER_ATOMIC_SMAX_RTN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3772530688),	// BUFFER_ATOMIC_SMAX_RTN_OFFSET_si
    UINT64_C(3776462848),	// BUFFER_ATOMIC_SMAX_RTN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3772022784),	// BUFFER_ATOMIC_SMIN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3771990016),	// BUFFER_ATOMIC_SMIN_OFFSET_si
    UINT64_C(3775922176),	// BUFFER_ATOMIC_SMIN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3772039168),	// BUFFER_ATOMIC_SMIN_RTN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3772006400),	// BUFFER_ATOMIC_SMIN_RTN_OFFSET_si
    UINT64_C(3775938560),	// BUFFER_ATOMIC_SMIN_RTN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3771498496),	// BUFFER_ATOMIC_SUB_ADDR64_si
    UINT64_C(0),
    UINT64_C(3771465728),	// BUFFER_ATOMIC_SUB_OFFSET_si
    UINT64_C(3775660032),	// BUFFER_ATOMIC_SUB_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3771514880),	// BUFFER_ATOMIC_SUB_RTN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3771482112),	// BUFFER_ATOMIC_SUB_RTN_OFFSET_si
    UINT64_C(3775676416),	// BUFFER_ATOMIC_SUB_RTN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3770712064),	// BUFFER_ATOMIC_SWAP_ADDR64_si
    UINT64_C(0),
    UINT64_C(3770679296),	// BUFFER_ATOMIC_SWAP_OFFSET_si
    UINT64_C(3774873600),	// BUFFER_ATOMIC_SWAP_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3770728448),	// BUFFER_ATOMIC_SWAP_RTN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3770695680),	// BUFFER_ATOMIC_SWAP_RTN_OFFSET_si
    UINT64_C(3774889984),	// BUFFER_ATOMIC_SWAP_RTN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3772809216),	// BUFFER_ATOMIC_UMAX_ADDR64_si
    UINT64_C(0),
    UINT64_C(3772776448),	// BUFFER_ATOMIC_UMAX_OFFSET_si
    UINT64_C(3776708608),	// BUFFER_ATOMIC_UMAX_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3772825600),	// BUFFER_ATOMIC_UMAX_RTN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3772792832),	// BUFFER_ATOMIC_UMAX_RTN_OFFSET_si
    UINT64_C(3776724992),	// BUFFER_ATOMIC_UMAX_RTN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3772284928),	// BUFFER_ATOMIC_UMIN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3772252160),	// BUFFER_ATOMIC_UMIN_OFFSET_si
    UINT64_C(3776184320),	// BUFFER_ATOMIC_UMIN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3772301312),	// BUFFER_ATOMIC_UMIN_RTN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3772268544),	// BUFFER_ATOMIC_UMIN_RTN_OFFSET_si
    UINT64_C(3776200704),	// BUFFER_ATOMIC_UMIN_RTN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3773595648),	// BUFFER_ATOMIC_XOR_ADDR64_si
    UINT64_C(0),
    UINT64_C(3773562880),	// BUFFER_ATOMIC_XOR_OFFSET_si
    UINT64_C(3777495040),	// BUFFER_ATOMIC_XOR_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3773612032),	// BUFFER_ATOMIC_XOR_RTN_ADDR64_si
    UINT64_C(0),
    UINT64_C(3773579264),	// BUFFER_ATOMIC_XOR_RTN_OFFSET_si
    UINT64_C(3777511424),	// BUFFER_ATOMIC_XOR_RTN_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3761537024),	// BUFFER_LOAD_DWORDX2_ADDR64_si
    UINT64_C(0),
    UINT64_C(3761516544),	// BUFFER_LOAD_DWORDX2_BOTHEN_si
    UINT64_C(3763613696),	// BUFFER_LOAD_DWORDX2_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3761512448),	// BUFFER_LOAD_DWORDX2_IDXEN_si
    UINT64_C(3763609600),	// BUFFER_LOAD_DWORDX2_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3761508352),	// BUFFER_LOAD_DWORDX2_OFFEN_si
    UINT64_C(3763605504),	// BUFFER_LOAD_DWORDX2_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3761504256),	// BUFFER_LOAD_DWORDX2_OFFSET_si
    UINT64_C(3763601408),	// BUFFER_LOAD_DWORDX2_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3761799168),	// BUFFER_LOAD_DWORDX4_ADDR64_si
    UINT64_C(0),
    UINT64_C(3761778688),	// BUFFER_LOAD_DWORDX4_BOTHEN_si
    UINT64_C(3764137984),	// BUFFER_LOAD_DWORDX4_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3761774592),	// BUFFER_LOAD_DWORDX4_IDXEN_si
    UINT64_C(3764133888),	// BUFFER_LOAD_DWORDX4_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3761770496),	// BUFFER_LOAD_DWORDX4_OFFEN_si
    UINT64_C(3764129792),	// BUFFER_LOAD_DWORDX4_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3761766400),	// BUFFER_LOAD_DWORDX4_OFFSET_si
    UINT64_C(3764125696),	// BUFFER_LOAD_DWORDX4_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3761274880),	// BUFFER_LOAD_DWORD_ADDR64_si
    UINT64_C(0),
    UINT64_C(3761254400),	// BUFFER_LOAD_DWORD_BOTHEN_si
    UINT64_C(3763351552),	// BUFFER_LOAD_DWORD_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3761250304),	// BUFFER_LOAD_DWORD_IDXEN_si
    UINT64_C(3763347456),	// BUFFER_LOAD_DWORD_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3761246208),	// BUFFER_LOAD_DWORD_OFFEN_si
    UINT64_C(3763343360),	// BUFFER_LOAD_DWORD_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3761242112),	// BUFFER_LOAD_DWORD_OFFSET_si
    UINT64_C(3763339264),	// BUFFER_LOAD_DWORD_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3758915584),	// BUFFER_LOAD_FORMAT_XYZW_ADDR64_si
    UINT64_C(0),
    UINT64_C(3758895104),	// BUFFER_LOAD_FORMAT_XYZW_BOTHEN_si
    UINT64_C(3758895104),	// BUFFER_LOAD_FORMAT_XYZW_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3758891008),	// BUFFER_LOAD_FORMAT_XYZW_IDXEN_si
    UINT64_C(3758891008),	// BUFFER_LOAD_FORMAT_XYZW_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3758886912),	// BUFFER_LOAD_FORMAT_XYZW_OFFEN_si
    UINT64_C(3758886912),	// BUFFER_LOAD_FORMAT_XYZW_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3758882816),	// BUFFER_LOAD_FORMAT_XYZW_OFFSET_si
    UINT64_C(3758882816),	// BUFFER_LOAD_FORMAT_XYZW_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3758653440),	// BUFFER_LOAD_FORMAT_XYZ_ADDR64_si
    UINT64_C(0),
    UINT64_C(3758632960),	// BUFFER_LOAD_FORMAT_XYZ_BOTHEN_si
    UINT64_C(3758632960),	// BUFFER_LOAD_FORMAT_XYZ_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3758628864),	// BUFFER_LOAD_FORMAT_XYZ_IDXEN_si
    UINT64_C(3758628864),	// BUFFER_LOAD_FORMAT_XYZ_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3758624768),	// BUFFER_LOAD_FORMAT_XYZ_OFFEN_si
    UINT64_C(3758624768),	// BUFFER_LOAD_FORMAT_XYZ_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3758620672),	// BUFFER_LOAD_FORMAT_XYZ_OFFSET_si
    UINT64_C(3758620672),	// BUFFER_LOAD_FORMAT_XYZ_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3758391296),	// BUFFER_LOAD_FORMAT_XY_ADDR64_si
    UINT64_C(0),
    UINT64_C(3758370816),	// BUFFER_LOAD_FORMAT_XY_BOTHEN_si
    UINT64_C(3758370816),	// BUFFER_LOAD_FORMAT_XY_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3758366720),	// BUFFER_LOAD_FORMAT_XY_IDXEN_si
    UINT64_C(3758366720),	// BUFFER_LOAD_FORMAT_XY_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3758362624),	// BUFFER_LOAD_FORMAT_XY_OFFEN_si
    UINT64_C(3758362624),	// BUFFER_LOAD_FORMAT_XY_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3758358528),	// BUFFER_LOAD_FORMAT_XY_OFFSET_si
    UINT64_C(3758358528),	// BUFFER_LOAD_FORMAT_XY_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3758129152),	// BUFFER_LOAD_FORMAT_X_ADDR64_si
    UINT64_C(0),
    UINT64_C(3758108672),	// BUFFER_LOAD_FORMAT_X_BOTHEN_si
    UINT64_C(3758108672),	// BUFFER_LOAD_FORMAT_X_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3758104576),	// BUFFER_LOAD_FORMAT_X_IDXEN_si
    UINT64_C(3758104576),	// BUFFER_LOAD_FORMAT_X_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3758100480),	// BUFFER_LOAD_FORMAT_X_OFFEN_si
    UINT64_C(3758100480),	// BUFFER_LOAD_FORMAT_X_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3758096384),	// BUFFER_LOAD_FORMAT_X_OFFSET_si
    UINT64_C(3758096384),	// BUFFER_LOAD_FORMAT_X_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3760488448),	// BUFFER_LOAD_SBYTE_ADDR64_si
    UINT64_C(0),
    UINT64_C(3760467968),	// BUFFER_LOAD_SBYTE_BOTHEN_si
    UINT64_C(3762565120),	// BUFFER_LOAD_SBYTE_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3760463872),	// BUFFER_LOAD_SBYTE_IDXEN_si
    UINT64_C(3762561024),	// BUFFER_LOAD_SBYTE_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3760459776),	// BUFFER_LOAD_SBYTE_OFFEN_si
    UINT64_C(3762556928),	// BUFFER_LOAD_SBYTE_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3760455680),	// BUFFER_LOAD_SBYTE_OFFSET_si
    UINT64_C(3762552832),	// BUFFER_LOAD_SBYTE_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3761012736),	// BUFFER_LOAD_SSHORT_ADDR64_si
    UINT64_C(0),
    UINT64_C(3760992256),	// BUFFER_LOAD_SSHORT_BOTHEN_si
    UINT64_C(3763089408),	// BUFFER_LOAD_SSHORT_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3760988160),	// BUFFER_LOAD_SSHORT_IDXEN_si
    UINT64_C(3763085312),	// BUFFER_LOAD_SSHORT_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3760984064),	// BUFFER_LOAD_SSHORT_OFFEN_si
    UINT64_C(3763081216),	// BUFFER_LOAD_SSHORT_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3760979968),	// BUFFER_LOAD_SSHORT_OFFSET_si
    UINT64_C(3763077120),	// BUFFER_LOAD_SSHORT_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3760226304),	// BUFFER_LOAD_UBYTE_ADDR64_si
    UINT64_C(0),
    UINT64_C(3760205824),	// BUFFER_LOAD_UBYTE_BOTHEN_si
    UINT64_C(3762302976),	// BUFFER_LOAD_UBYTE_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3760201728),	// BUFFER_LOAD_UBYTE_IDXEN_si
    UINT64_C(3762298880),	// BUFFER_LOAD_UBYTE_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3760197632),	// BUFFER_LOAD_UBYTE_OFFEN_si
    UINT64_C(3762294784),	// BUFFER_LOAD_UBYTE_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3760193536),	// BUFFER_LOAD_UBYTE_OFFSET_si
    UINT64_C(3762290688),	// BUFFER_LOAD_UBYTE_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3760750592),	// BUFFER_LOAD_USHORT_ADDR64_si
    UINT64_C(0),
    UINT64_C(3760730112),	// BUFFER_LOAD_USHORT_BOTHEN_si
    UINT64_C(3762827264),	// BUFFER_LOAD_USHORT_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3760726016),	// BUFFER_LOAD_USHORT_IDXEN_si
    UINT64_C(3762823168),	// BUFFER_LOAD_USHORT_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3760721920),	// BUFFER_LOAD_USHORT_OFFEN_si
    UINT64_C(3762819072),	// BUFFER_LOAD_USHORT_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3760717824),	// BUFFER_LOAD_USHORT_OFFSET_si
    UINT64_C(3762814976),	// BUFFER_LOAD_USHORT_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3764420608),	// BUFFER_STORE_BYTE_ADDR64_si
    UINT64_C(0),
    UINT64_C(3764400128),	// BUFFER_STORE_BYTE_BOTHEN_si
    UINT64_C(3764400128),	// BUFFER_STORE_BYTE_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3764396032),	// BUFFER_STORE_BYTE_IDXEN_si
    UINT64_C(3764396032),	// BUFFER_STORE_BYTE_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3764391936),	// BUFFER_STORE_BYTE_OFFEN_si
    UINT64_C(3764391936),	// BUFFER_STORE_BYTE_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3764387840),	// BUFFER_STORE_BYTE_OFFSET_si
    UINT64_C(3764387840),	// BUFFER_STORE_BYTE_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3764387840),	// BUFFER_STORE_BYTEanonymous_774_si
    UINT64_C(3764387840),	// BUFFER_STORE_BYTEanonymous_774_vi
    UINT64_C(0),
    UINT64_C(3765731328),	// BUFFER_STORE_DWORDX2_ADDR64_si
    UINT64_C(0),
    UINT64_C(3765710848),	// BUFFER_STORE_DWORDX2_BOTHEN_si
    UINT64_C(3765710848),	// BUFFER_STORE_DWORDX2_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3765706752),	// BUFFER_STORE_DWORDX2_IDXEN_si
    UINT64_C(3765706752),	// BUFFER_STORE_DWORDX2_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3765702656),	// BUFFER_STORE_DWORDX2_OFFEN_si
    UINT64_C(3765702656),	// BUFFER_STORE_DWORDX2_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3765698560),	// BUFFER_STORE_DWORDX2_OFFSET_si
    UINT64_C(3765698560),	// BUFFER_STORE_DWORDX2_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3765698560),	// BUFFER_STORE_DWORDX2anonymous_774_si
    UINT64_C(3765698560),	// BUFFER_STORE_DWORDX2anonymous_774_vi
    UINT64_C(0),
    UINT64_C(3765993472),	// BUFFER_STORE_DWORDX4_ADDR64_si
    UINT64_C(0),
    UINT64_C(3765972992),	// BUFFER_STORE_DWORDX4_BOTHEN_si
    UINT64_C(3766235136),	// BUFFER_STORE_DWORDX4_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3765968896),	// BUFFER_STORE_DWORDX4_IDXEN_si
    UINT64_C(3766231040),	// BUFFER_STORE_DWORDX4_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3765964800),	// BUFFER_STORE_DWORDX4_OFFEN_si
    UINT64_C(3766226944),	// BUFFER_STORE_DWORDX4_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3765960704),	// BUFFER_STORE_DWORDX4_OFFSET_si
    UINT64_C(3766222848),	// BUFFER_STORE_DWORDX4_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3765960704),	// BUFFER_STORE_DWORDX4anonymous_774_si
    UINT64_C(3766222848),	// BUFFER_STORE_DWORDX4anonymous_774_vi
    UINT64_C(0),
    UINT64_C(3765469184),	// BUFFER_STORE_DWORD_ADDR64_si
    UINT64_C(0),
    UINT64_C(3765448704),	// BUFFER_STORE_DWORD_BOTHEN_si
    UINT64_C(3765448704),	// BUFFER_STORE_DWORD_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3765444608),	// BUFFER_STORE_DWORD_IDXEN_si
    UINT64_C(3765444608),	// BUFFER_STORE_DWORD_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3765440512),	// BUFFER_STORE_DWORD_OFFEN_si
    UINT64_C(3765440512),	// BUFFER_STORE_DWORD_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3765436416),	// BUFFER_STORE_DWORD_OFFSET_si
    UINT64_C(3765436416),	// BUFFER_STORE_DWORD_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3765436416),	// BUFFER_STORE_DWORDanonymous_774_si
    UINT64_C(3765436416),	// BUFFER_STORE_DWORDanonymous_774_vi
    UINT64_C(0),
    UINT64_C(3759964160),	// BUFFER_STORE_FORMAT_XYZW_ADDR64_si
    UINT64_C(0),
    UINT64_C(3759943680),	// BUFFER_STORE_FORMAT_XYZW_BOTHEN_si
    UINT64_C(3759943680),	// BUFFER_STORE_FORMAT_XYZW_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3759939584),	// BUFFER_STORE_FORMAT_XYZW_IDXEN_si
    UINT64_C(3759939584),	// BUFFER_STORE_FORMAT_XYZW_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3759935488),	// BUFFER_STORE_FORMAT_XYZW_OFFEN_si
    UINT64_C(3759935488),	// BUFFER_STORE_FORMAT_XYZW_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3759931392),	// BUFFER_STORE_FORMAT_XYZW_OFFSET_si
    UINT64_C(3759931392),	// BUFFER_STORE_FORMAT_XYZW_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3759931392),	// BUFFER_STORE_FORMAT_XYZWanonymous_774_si
    UINT64_C(3759931392),	// BUFFER_STORE_FORMAT_XYZWanonymous_774_vi
    UINT64_C(0),
    UINT64_C(3759702016),	// BUFFER_STORE_FORMAT_XYZ_ADDR64_si
    UINT64_C(0),
    UINT64_C(3759681536),	// BUFFER_STORE_FORMAT_XYZ_BOTHEN_si
    UINT64_C(3759681536),	// BUFFER_STORE_FORMAT_XYZ_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3759677440),	// BUFFER_STORE_FORMAT_XYZ_IDXEN_si
    UINT64_C(3759677440),	// BUFFER_STORE_FORMAT_XYZ_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3759673344),	// BUFFER_STORE_FORMAT_XYZ_OFFEN_si
    UINT64_C(3759673344),	// BUFFER_STORE_FORMAT_XYZ_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3759669248),	// BUFFER_STORE_FORMAT_XYZ_OFFSET_si
    UINT64_C(3759669248),	// BUFFER_STORE_FORMAT_XYZ_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3759669248),	// BUFFER_STORE_FORMAT_XYZanonymous_774_si
    UINT64_C(3759669248),	// BUFFER_STORE_FORMAT_XYZanonymous_774_vi
    UINT64_C(0),
    UINT64_C(3759439872),	// BUFFER_STORE_FORMAT_XY_ADDR64_si
    UINT64_C(0),
    UINT64_C(3759419392),	// BUFFER_STORE_FORMAT_XY_BOTHEN_si
    UINT64_C(3759419392),	// BUFFER_STORE_FORMAT_XY_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3759415296),	// BUFFER_STORE_FORMAT_XY_IDXEN_si
    UINT64_C(3759415296),	// BUFFER_STORE_FORMAT_XY_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3759411200),	// BUFFER_STORE_FORMAT_XY_OFFEN_si
    UINT64_C(3759411200),	// BUFFER_STORE_FORMAT_XY_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3759407104),	// BUFFER_STORE_FORMAT_XY_OFFSET_si
    UINT64_C(3759407104),	// BUFFER_STORE_FORMAT_XY_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3759407104),	// BUFFER_STORE_FORMAT_XYanonymous_774_si
    UINT64_C(3759407104),	// BUFFER_STORE_FORMAT_XYanonymous_774_vi
    UINT64_C(0),
    UINT64_C(3759177728),	// BUFFER_STORE_FORMAT_X_ADDR64_si
    UINT64_C(0),
    UINT64_C(3759157248),	// BUFFER_STORE_FORMAT_X_BOTHEN_si
    UINT64_C(3759157248),	// BUFFER_STORE_FORMAT_X_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3759153152),	// BUFFER_STORE_FORMAT_X_IDXEN_si
    UINT64_C(3759153152),	// BUFFER_STORE_FORMAT_X_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3759149056),	// BUFFER_STORE_FORMAT_X_OFFEN_si
    UINT64_C(3759149056),	// BUFFER_STORE_FORMAT_X_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3759144960),	// BUFFER_STORE_FORMAT_X_OFFSET_si
    UINT64_C(3759144960),	// BUFFER_STORE_FORMAT_X_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3759144960),	// BUFFER_STORE_FORMAT_Xanonymous_774_si
    UINT64_C(3759144960),	// BUFFER_STORE_FORMAT_Xanonymous_774_vi
    UINT64_C(0),
    UINT64_C(3764944896),	// BUFFER_STORE_SHORT_ADDR64_si
    UINT64_C(0),
    UINT64_C(3764924416),	// BUFFER_STORE_SHORT_BOTHEN_si
    UINT64_C(3764924416),	// BUFFER_STORE_SHORT_BOTHEN_vi
    UINT64_C(0),
    UINT64_C(3764920320),	// BUFFER_STORE_SHORT_IDXEN_si
    UINT64_C(3764920320),	// BUFFER_STORE_SHORT_IDXEN_vi
    UINT64_C(0),
    UINT64_C(3764916224),	// BUFFER_STORE_SHORT_OFFEN_si
    UINT64_C(3764916224),	// BUFFER_STORE_SHORT_OFFEN_vi
    UINT64_C(0),
    UINT64_C(3764912128),	// BUFFER_STORE_SHORT_OFFSET_si
    UINT64_C(3764912128),	// BUFFER_STORE_SHORT_OFFSET_vi
    UINT64_C(0),
    UINT64_C(3764912128),	// BUFFER_STORE_SHORTanonymous_774_si
    UINT64_C(3764912128),	// BUFFER_STORE_SHORTanonymous_774_vi
    UINT64_C(9895604649984),	// CEIL
    UINT64_C(11529215046068469760),	// CF_ALU
    UINT64_C(13258597302978740224),	// CF_ALU_BREAK
    UINT64_C(12970366926827028480),	// CF_ALU_CONTINUE
    UINT64_C(13546827679130451968),	// CF_ALU_ELSE_AFTER
    UINT64_C(12105675798371893248),	// CF_ALU_POP_AFTER
    UINT64_C(11817445422220181504),	// CF_ALU_PUSH_BEFORE
    UINT64_C(9565645608534933504),	// CF_CALL_FS_EG
    UINT64_C(9907919180215091200),	// CF_CALL_FS_R600
    UINT64_C(9367487224930631680),	// CF_CONTINUE_EG
    UINT64_C(9511602413006487552),	// CF_CONTINUE_R600
    UINT64_C(9457559217478041600),	// CF_ELSE_EG
    UINT64_C(9691746398101307392),	// CF_ELSE_R600
    UINT64_C(9799832789158199296),	// CF_END_CM
    UINT64_C(9232379236109516800),	// CF_END_EG
    UINT64_C(9232379236109516800),	// CF_END_R600
    UINT64_C(9403516021949595648),	// CF_JUMP_EG
    UINT64_C(9583660007044415488),	// CF_JUMP_R600
    UINT64_C(9421530420459077632),	// CF_PUSH_EG
    UINT64_C(9655717601082343424),	// CF_PUSH_ELSE_R600
    UINT64_C(9241386435364257792),	// CF_TC_EG
    UINT64_C(9259400833873739776),	// CF_TC_R600
    UINT64_C(9259400833873739776),	// CF_VC_EG
    UINT64_C(9295429630892703744),	// CF_VC_R600
    UINT64_C(0),
    UINT64_C(985162418487296),	// CNDE_INT
    UINT64_C(879609302220800),	// CNDE_eg
    UINT64_C(844424930131968),	// CNDE_r600
    UINT64_C(1055531162664960),	// CNDGE_INT
    UINT64_C(949978046398464),	// CNDGE_eg
    UINT64_C(914793674309632),	// CNDGE_r600
    UINT64_C(1020346790576128),	// CNDGT_INT
    UINT64_C(914793674309632),	// CNDGT_eg
    UINT64_C(879609302220800),	// CNDGT_r600
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(78065325572096),	// COS_cm
    UINT64_C(78065325572096),	// COS_eg
    UINT64_C(61022895341568),	// COS_r600
    UINT64_C(61022895341568),	// COS_r700
    UINT64_C(0),
    UINT64_C(105553116266496),	// CUBE_eg_real
    UINT64_C(0),
    UINT64_C(45079976738816),	// CUBE_r600_real
    UINT64_C(0),
    UINT64_C(104453604638720),	// DOT4_eg
    UINT64_C(43980465111040),	// DOT4_r600
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3632267264),	// DS_ADD_RTN_U32_si
    UINT64_C(3628072960),	// DS_ADD_RTN_U32_vi
    UINT64_C(0),
    UINT64_C(3649044480),	// DS_ADD_RTN_U64_si
    UINT64_C(3636461568),	// DS_ADD_RTN_U64_vi
    UINT64_C(0),
    UINT64_C(3657433088),	// DS_ADD_SRC2_U32_si
    UINT64_C(3640655872),	// DS_ADD_SRC2_U32_vi
    UINT64_C(0),
    UINT64_C(3674210304),	// DS_ADD_SRC2_U64_si
    UINT64_C(3649044480),	// DS_ADD_SRC2_U64_vi
    UINT64_C(0),
    UINT64_C(3623878656),	// DS_ADD_U32_si
    UINT64_C(3623878656),	// DS_ADD_U32_vi
    UINT64_C(0),
    UINT64_C(3640655872),	// DS_ADD_U64_si
    UINT64_C(3632267264),	// DS_ADD_U64_vi
    UINT64_C(0),
    UINT64_C(3626237952),	// DS_AND_B32_si
    UINT64_C(3625058304),	// DS_AND_B32_vi
    UINT64_C(0),
    UINT64_C(3643015168),	// DS_AND_B64_si
    UINT64_C(3633446912),	// DS_AND_B64_vi
    UINT64_C(0),
    UINT64_C(3634626560),	// DS_AND_RTN_B32_si
    UINT64_C(3629252608),	// DS_AND_RTN_B32_vi
    UINT64_C(0),
    UINT64_C(3651403776),	// DS_AND_RTN_B64_si
    UINT64_C(3637641216),	// DS_AND_RTN_B64_vi
    UINT64_C(0),
    UINT64_C(3659792384),	// DS_AND_SRC2_B32_si
    UINT64_C(3641835520),	// DS_AND_SRC2_B32_vi
    UINT64_C(0),
    UINT64_C(3676569600),	// DS_AND_SRC2_B64_si
    UINT64_C(3650224128),	// DS_AND_SRC2_B64_vi
    UINT64_C(0),
    UINT64_C(3640131584),	// DS_APPEND_si
    UINT64_C(3632005120),	// DS_APPEND_vi
    UINT64_C(0),
    UINT64_C(3628072960),	// DS_CMPST_B32_si
    UINT64_C(3625975808),	// DS_CMPST_B32_vi
    UINT64_C(0),
    UINT64_C(3644850176),	// DS_CMPST_B64_si
    UINT64_C(3634364416),	// DS_CMPST_B64_vi
    UINT64_C(0),
    UINT64_C(3628335104),	// DS_CMPST_F32_si
    UINT64_C(3626106880),	// DS_CMPST_F32_vi
    UINT64_C(0),
    UINT64_C(3645112320),	// DS_CMPST_F64_si
    UINT64_C(3634495488),	// DS_CMPST_F64_vi
    UINT64_C(0),
    UINT64_C(3636461568),	// DS_CMPST_RTN_B32_si
    UINT64_C(3630170112),	// DS_CMPST_RTN_B32_vi
    UINT64_C(0),
    UINT64_C(3653238784),	// DS_CMPST_RTN_B64_si
    UINT64_C(3638558720),	// DS_CMPST_RTN_B64_vi
    UINT64_C(0),
    UINT64_C(3636723712),	// DS_CMPST_RTN_F32_si
    UINT64_C(3630301184),	// DS_CMPST_RTN_F32_vi
    UINT64_C(0),
    UINT64_C(3653500928),	// DS_CMPST_RTN_F64_si
    UINT64_C(3638689792),	// DS_CMPST_RTN_F64_vi
    UINT64_C(0),
    UINT64_C(3639869440),	// DS_CONSUME_si
    UINT64_C(3631874048),	// DS_CONSUME_vi
    UINT64_C(0),
    UINT64_C(3633315840),	// DS_DEC_RTN_U32_si
    UINT64_C(3628597248),	// DS_DEC_RTN_U32_vi
    UINT64_C(0),
    UINT64_C(3650093056),	// DS_DEC_RTN_U64_si
    UINT64_C(3636985856),	// DS_DEC_RTN_U64_vi
    UINT64_C(0),
    UINT64_C(3658481664),	// DS_DEC_SRC2_U32_si
    UINT64_C(3641180160),	// DS_DEC_SRC2_U32_vi
    UINT64_C(0),
    UINT64_C(3675258880),	// DS_DEC_SRC2_U64_si
    UINT64_C(3649568768),	// DS_DEC_SRC2_U64_vi
    UINT64_C(0),
    UINT64_C(3624927232),	// DS_DEC_U32_si
    UINT64_C(3624402944),	// DS_DEC_U32_vi
    UINT64_C(0),
    UINT64_C(3641704448),	// DS_DEC_U64_si
    UINT64_C(3632791552),	// DS_DEC_U64_vi
    UINT64_C(0),
    UINT64_C(3631611904),	// DS_GWS_BARRIER_si
    UINT64_C(3627745280),	// DS_GWS_BARRIER_vi
    UINT64_C(0),
    UINT64_C(3630563328),	// DS_GWS_INIT_si
    UINT64_C(3627220992),	// DS_GWS_INIT_vi
    UINT64_C(0),
    UINT64_C(3631087616),	// DS_GWS_SEMA_BR_si
    UINT64_C(3627483136),	// DS_GWS_SEMA_BR_vi
    UINT64_C(0),
    UINT64_C(3631349760),	// DS_GWS_SEMA_P_si
    UINT64_C(3627614208),	// DS_GWS_SEMA_P_vi
    UINT64_C(0),
    UINT64_C(3630825472),	// DS_GWS_SEMA_V_si
    UINT64_C(3627352064),	// DS_GWS_SEMA_V_vi
    UINT64_C(0),
    UINT64_C(3633053696),	// DS_INC_RTN_U32_si
    UINT64_C(3628466176),	// DS_INC_RTN_U32_vi
    UINT64_C(0),
    UINT64_C(3649830912),	// DS_INC_RTN_U64_si
    UINT64_C(3636854784),	// DS_INC_RTN_U64_vi
    UINT64_C(0),
    UINT64_C(3658219520),	// DS_INC_SRC2_U32_si
    UINT64_C(3641049088),	// DS_INC_SRC2_U32_vi
    UINT64_C(0),
    UINT64_C(3674996736),	// DS_INC_SRC2_U64_si
    UINT64_C(3649437696),	// DS_INC_SRC2_U64_vi
    UINT64_C(0),
    UINT64_C(3624665088),	// DS_INC_U32_si
    UINT64_C(3624271872),	// DS_INC_U32_vi
    UINT64_C(0),
    UINT64_C(3641442304),	// DS_INC_U64_si
    UINT64_C(3632660480),	// DS_INC_U64_vi
    UINT64_C(0),
    UINT64_C(3628859392),	// DS_MAX_F32_si
    UINT64_C(3626369024),	// DS_MAX_F32_vi
    UINT64_C(0),
    UINT64_C(3645636608),	// DS_MAX_F64_si
    UINT64_C(3634757632),	// DS_MAX_F64_vi
    UINT64_C(0),
    UINT64_C(3625451520),	// DS_MAX_I32_si
    UINT64_C(3624665088),	// DS_MAX_I32_vi
    UINT64_C(0),
    UINT64_C(3642228736),	// DS_MAX_I64_si
    UINT64_C(3633053696),	// DS_MAX_I64_vi
    UINT64_C(0),
    UINT64_C(3637248000),	// DS_MAX_RTN_F32_si
    UINT64_C(3630563328),	// DS_MAX_RTN_F32_vi
    UINT64_C(0),
    UINT64_C(3654025216),	// DS_MAX_RTN_F64_si
    UINT64_C(3638951936),	// DS_MAX_RTN_F64_vi
    UINT64_C(0),
    UINT64_C(3633840128),	// DS_MAX_RTN_I32_si
    UINT64_C(3628859392),	// DS_MAX_RTN_I32_vi
    UINT64_C(0),
    UINT64_C(3650617344),	// DS_MAX_RTN_I64_si
    UINT64_C(3637248000),	// DS_MAX_RTN_I64_vi
    UINT64_C(0),
    UINT64_C(3634364416),	// DS_MAX_RTN_U32_si
    UINT64_C(3629121536),	// DS_MAX_RTN_U32_vi
    UINT64_C(0),
    UINT64_C(3651141632),	// DS_MAX_RTN_U64_si
    UINT64_C(3637510144),	// DS_MAX_RTN_U64_vi
    UINT64_C(0),
    UINT64_C(3662413824),	// DS_MAX_SRC2_F32_si
    UINT64_C(3643146240),	// DS_MAX_SRC2_F32_vi
    UINT64_C(0),
    UINT64_C(3679191040),	// DS_MAX_SRC2_F64_si
    UINT64_C(3651534848),	// DS_MAX_SRC2_F64_vi
    UINT64_C(0),
    UINT64_C(3659005952),	// DS_MAX_SRC2_I32_si
    UINT64_C(3641442304),	// DS_MAX_SRC2_I32_vi
    UINT64_C(0),
    UINT64_C(3675783168),	// DS_MAX_SRC2_I64_si
    UINT64_C(3649830912),	// DS_MAX_SRC2_I64_vi
    UINT64_C(0),
    UINT64_C(3659530240),	// DS_MAX_SRC2_U32_si
    UINT64_C(3641704448),	// DS_MAX_SRC2_U32_vi
    UINT64_C(0),
    UINT64_C(3676307456),	// DS_MAX_SRC2_U64_si
    UINT64_C(3650093056),	// DS_MAX_SRC2_U64_vi
    UINT64_C(0),
    UINT64_C(3625975808),	// DS_MAX_U32_si
    UINT64_C(3624927232),	// DS_MAX_U32_vi
    UINT64_C(0),
    UINT64_C(3642753024),	// DS_MAX_U64_si
    UINT64_C(3633315840),	// DS_MAX_U64_vi
    UINT64_C(0),
    UINT64_C(3628597248),	// DS_MIN_F32_si
    UINT64_C(3626237952),	// DS_MIN_F32_vi
    UINT64_C(0),
    UINT64_C(3645374464),	// DS_MIN_F64_si
    UINT64_C(3634626560),	// DS_MIN_F64_vi
    UINT64_C(0),
    UINT64_C(3625189376),	// DS_MIN_I32_si
    UINT64_C(3624534016),	// DS_MIN_I32_vi
    UINT64_C(0),
    UINT64_C(3641966592),	// DS_MIN_I64_si
    UINT64_C(3632922624),	// DS_MIN_I64_vi
    UINT64_C(0),
    UINT64_C(3636985856),	// DS_MIN_RTN_F32_si
    UINT64_C(3630432256),	// DS_MIN_RTN_F32_vi
    UINT64_C(0),
    UINT64_C(3653763072),	// DS_MIN_RTN_F64_si
    UINT64_C(3638820864),	// DS_MIN_RTN_F64_vi
    UINT64_C(0),
    UINT64_C(3633577984),	// DS_MIN_RTN_I32_si
    UINT64_C(3628728320),	// DS_MIN_RTN_I32_vi
    UINT64_C(0),
    UINT64_C(3650355200),	// DS_MIN_RTN_I64_si
    UINT64_C(3637116928),	// DS_MIN_RTN_I64_vi
    UINT64_C(0),
    UINT64_C(3634102272),	// DS_MIN_RTN_U32_si
    UINT64_C(3628990464),	// DS_MIN_RTN_U32_vi
    UINT64_C(0),
    UINT64_C(3650879488),	// DS_MIN_RTN_U64_si
    UINT64_C(3637379072),	// DS_MIN_RTN_U64_vi
    UINT64_C(0),
    UINT64_C(3662151680),	// DS_MIN_SRC2_F32_si
    UINT64_C(3643015168),	// DS_MIN_SRC2_F32_vi
    UINT64_C(0),
    UINT64_C(3678928896),	// DS_MIN_SRC2_F64_si
    UINT64_C(3651403776),	// DS_MIN_SRC2_F64_vi
    UINT64_C(0),
    UINT64_C(3658743808),	// DS_MIN_SRC2_I32_si
    UINT64_C(3641311232),	// DS_MIN_SRC2_I32_vi
    UINT64_C(0),
    UINT64_C(3675521024),	// DS_MIN_SRC2_I64_si
    UINT64_C(3649699840),	// DS_MIN_SRC2_I64_vi
    UINT64_C(0),
    UINT64_C(3659268096),	// DS_MIN_SRC2_U32_si
    UINT64_C(3641573376),	// DS_MIN_SRC2_U32_vi
    UINT64_C(0),
    UINT64_C(3676045312),	// DS_MIN_SRC2_U64_si
    UINT64_C(3649961984),	// DS_MIN_SRC2_U64_vi
    UINT64_C(0),
    UINT64_C(3625713664),	// DS_MIN_U32_si
    UINT64_C(3624796160),	// DS_MIN_U32_vi
    UINT64_C(0),
    UINT64_C(3642490880),	// DS_MIN_U64_si
    UINT64_C(3633184768),	// DS_MIN_U64_vi
    UINT64_C(0),
    UINT64_C(3627024384),	// DS_MSKOR_B32_si
    UINT64_C(3625451520),	// DS_MSKOR_B32_vi
    UINT64_C(0),
    UINT64_C(3643801600),	// DS_MSKOR_B64_si
    UINT64_C(3633840128),	// DS_MSKOR_B64_vi
    UINT64_C(0),
    UINT64_C(3635412992),	// DS_MSKOR_RTN_B32_si
    UINT64_C(3629645824),	// DS_MSKOR_RTN_B32_vi
    UINT64_C(0),
    UINT64_C(3652190208),	// DS_MSKOR_RTN_B64_si
    UINT64_C(3638034432),	// DS_MSKOR_RTN_B64_vi
    UINT64_C(0),
    UINT64_C(3640524800),	// DS_ORDERED_COUNT_si
    UINT64_C(3632201728),	// DS_ORDERED_COUNT_vi
    UINT64_C(0),
    UINT64_C(3626500096),	// DS_OR_B32_si
    UINT64_C(3625189376),	// DS_OR_B32_vi
    UINT64_C(0),
    UINT64_C(3643277312),	// DS_OR_B64_si
    UINT64_C(3633577984),	// DS_OR_B64_vi
    UINT64_C(0),
    UINT64_C(3634888704),	// DS_OR_RTN_B32_si
    UINT64_C(3629383680),	// DS_OR_RTN_B32_vi
    UINT64_C(0),
    UINT64_C(3651665920),	// DS_OR_RTN_B64_si
    UINT64_C(3637772288),	// DS_OR_RTN_B64_vi
    UINT64_C(0),
    UINT64_C(3660054528),	// DS_OR_SRC2_B32_si
    UINT64_C(3641966592),	// DS_OR_SRC2_B32_vi
    UINT64_C(0),
    UINT64_C(3676831744),	// DS_OR_SRC2_B64_si
    UINT64_C(3650355200),	// DS_OR_SRC2_B64_vi
    UINT64_C(0),
    UINT64_C(3638558720),	// DS_READ2ST64_B32_si
    UINT64_C(3631218688),	// DS_READ2ST64_B32_vi
    UINT64_C(0),
    UINT64_C(3655335936),	// DS_READ2ST64_B64_si
    UINT64_C(3639607296),	// DS_READ2ST64_B64_vi
    UINT64_C(0),
    UINT64_C(3638296576),	// DS_READ2_B32_si
    UINT64_C(3631087616),	// DS_READ2_B32_vi
    UINT64_C(0),
    UINT64_C(3655073792),	// DS_READ2_B64_si
    UINT64_C(3639476224),	// DS_READ2_B64_vi
    UINT64_C(0),
    UINT64_C(3638034432),	// DS_READ_B32_si
    UINT64_C(3630956544),	// DS_READ_B32_vi
    UINT64_C(0),
    UINT64_C(3654811648),	// DS_READ_B64_si
    UINT64_C(3639345152),	// DS_READ_B64_vi
    UINT64_C(0),
    UINT64_C(3639345152),	// DS_READ_I16_si
    UINT64_C(3631611904),	// DS_READ_I16_vi
    UINT64_C(0),
    UINT64_C(3638820864),	// DS_READ_I8_si
    UINT64_C(3631349760),	// DS_READ_I8_vi
    UINT64_C(0),
    UINT64_C(3639607296),	// DS_READ_U16_si
    UINT64_C(3631742976),	// DS_READ_U16_vi
    UINT64_C(0),
    UINT64_C(3639083008),	// DS_READ_U8_si
    UINT64_C(3631480832),	// DS_READ_U8_vi
    UINT64_C(0),
    UINT64_C(3632791552),	// DS_RSUB_RTN_U32_si
    UINT64_C(3628335104),	// DS_RSUB_RTN_U32_vi
    UINT64_C(0),
    UINT64_C(3649568768),	// DS_RSUB_RTN_U64_si
    UINT64_C(3636723712),	// DS_RSUB_RTN_U64_vi
    UINT64_C(0),
    UINT64_C(3657957376),	// DS_RSUB_SRC2_U32_si
    UINT64_C(3640918016),	// DS_RSUB_SRC2_U32_vi
    UINT64_C(0),
    UINT64_C(3674734592),	// DS_RSUB_SRC2_U64_si
    UINT64_C(3649306624),	// DS_RSUB_SRC2_U64_vi
    UINT64_C(0),
    UINT64_C(3624402944),	// DS_RSUB_U32_si
    UINT64_C(3624140800),	// DS_RSUB_U32_vi
    UINT64_C(0),
    UINT64_C(3641180160),	// DS_RSUB_U64_si
    UINT64_C(3632529408),	// DS_RSUB_U64_vi
    UINT64_C(0),
    UINT64_C(3632529408),	// DS_SUB_RTN_U32_si
    UINT64_C(3628204032),	// DS_SUB_RTN_U32_vi
    UINT64_C(0),
    UINT64_C(3649306624),	// DS_SUB_RTN_U64_si
    UINT64_C(3636592640),	// DS_SUB_RTN_U64_vi
    UINT64_C(0),
    UINT64_C(3657695232),	// DS_SUB_SRC2_U32_si
    UINT64_C(3640786944),	// DS_SUB_SRC2_U32_vi
    UINT64_C(0),
    UINT64_C(3674472448),	// DS_SUB_SRC2_U64_si
    UINT64_C(3649175552),	// DS_SUB_SRC2_U64_vi
    UINT64_C(0),
    UINT64_C(3624140800),	// DS_SUB_U32_si
    UINT64_C(3624009728),	// DS_SUB_U32_vi
    UINT64_C(0),
    UINT64_C(3640918016),	// DS_SUB_U64_si
    UINT64_C(3632398336),	// DS_SUB_U64_vi
    UINT64_C(0),
    UINT64_C(3637772288),	// DS_SWIZZLE_B32_si
    UINT64_C(3630825472),	// DS_SWIZZLE_B32_vi
    UINT64_C(0),
    UINT64_C(3637510144),	// DS_WRAP_RTN_F32_si
    UINT64_C(3630694400),	// DS_WRAP_RTN_F32_vi
    UINT64_C(0),
    UINT64_C(3627810816),	// DS_WRITE2ST64_B32_si
    UINT64_C(3625844736),	// DS_WRITE2ST64_B32_vi
    UINT64_C(0),
    UINT64_C(3644588032),	// DS_WRITE2ST64_B64_si
    UINT64_C(3634233344),	// DS_WRITE2ST64_B64_vi
    UINT64_C(0),
    UINT64_C(3627548672),	// DS_WRITE2_B32_si
    UINT64_C(3625713664),	// DS_WRITE2_B32_vi
    UINT64_C(0),
    UINT64_C(3644325888),	// DS_WRITE2_B64_si
    UINT64_C(3634102272),	// DS_WRITE2_B64_vi
    UINT64_C(0),
    UINT64_C(3632005120),	// DS_WRITE_B16_si
    UINT64_C(3627941888),	// DS_WRITE_B16_vi
    UINT64_C(0),
    UINT64_C(3627286528),	// DS_WRITE_B32_si
    UINT64_C(3625582592),	// DS_WRITE_B32_vi
    UINT64_C(0),
    UINT64_C(3644063744),	// DS_WRITE_B64_si
    UINT64_C(3633971200),	// DS_WRITE_B64_vi
    UINT64_C(0),
    UINT64_C(3631742976),	// DS_WRITE_B8_si
    UINT64_C(3627810816),	// DS_WRITE_B8_vi
    UINT64_C(0),
    UINT64_C(3660578816),	// DS_WRITE_SRC2_B32_si
    UINT64_C(3642228736),	// DS_WRITE_SRC2_B32_vi
    UINT64_C(0),
    UINT64_C(3677356032),	// DS_WRITE_SRC2_B64_si
    UINT64_C(3650617344),	// DS_WRITE_SRC2_B64_vi
    UINT64_C(0),
    UINT64_C(3636199424),	// DS_WRXCHG2ST64_RTN_B32_si
    UINT64_C(3630039040),	// DS_WRXCHG2ST64_RTN_B32_vi
    UINT64_C(0),
    UINT64_C(3652976640),	// DS_WRXCHG2ST64_RTN_B64_si
    UINT64_C(3638427648),	// DS_WRXCHG2ST64_RTN_B64_vi
    UINT64_C(0),
    UINT64_C(3635937280),	// DS_WRXCHG2_RTN_B32_si
    UINT64_C(3629907968),	// DS_WRXCHG2_RTN_B32_vi
    UINT64_C(0),
    UINT64_C(3652714496),	// DS_WRXCHG2_RTN_B64_si
    UINT64_C(3638296576),	// DS_WRXCHG2_RTN_B64_vi
    UINT64_C(0),
    UINT64_C(3635675136),	// DS_WRXCHG_RTN_B32_si
    UINT64_C(3629776896),	// DS_WRXCHG_RTN_B32_vi
    UINT64_C(0),
    UINT64_C(3652452352),	// DS_WRXCHG_RTN_B64_si
    UINT64_C(3638165504),	// DS_WRXCHG_RTN_B64_vi
    UINT64_C(0),
    UINT64_C(3626762240),	// DS_XOR_B32_si
    UINT64_C(3625320448),	// DS_XOR_B32_vi
    UINT64_C(0),
    UINT64_C(3643539456),	// DS_XOR_B64_si
    UINT64_C(3633709056),	// DS_XOR_B64_vi
    UINT64_C(0),
    UINT64_C(3635150848),	// DS_XOR_RTN_B32_si
    UINT64_C(3629514752),	// DS_XOR_RTN_B32_vi
    UINT64_C(0),
    UINT64_C(3651928064),	// DS_XOR_RTN_B64_si
    UINT64_C(3637903360),	// DS_XOR_RTN_B64_vi
    UINT64_C(0),
    UINT64_C(3660316672),	// DS_XOR_SRC2_B32_si
    UINT64_C(3642097664),	// DS_XOR_SRC2_B32_vi
    UINT64_C(0),
    UINT64_C(3677093888),	// DS_XOR_SRC2_B64_si
    UINT64_C(3650486272),	// DS_XOR_SRC2_B64_vi
    UINT64_C(9223372036854775808),	// EG_ExportBuf
    UINT64_C(9223372040076001280),	// EG_ExportSwz
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(9313444029402185728),	// END_LOOP_EG
    UINT64_C(9403516021949595648),	// END_LOOP_R600
    UINT64_C(0),
    UINT64_C(70918499991552),	// EXP_IEEE_cm
    UINT64_C(70918499991552),	// EXP_IEEE_eg
    UINT64_C(53326313947136),	// EXP_IEEE_r600
    UINT64_C(4160749568),	// EXP_si
    UINT64_C(3288334336),	// EXP_vi
    UINT64_C(0),
    UINT64_C(0),	// FETCH_CLAUSE
    UINT64_C(94008244174848),	// FFBH_UINT
    UINT64_C(94557999988736),	// FFBL_INT
    UINT64_C(3704094720),	// FLAT_ATOMIC_ADD
    UINT64_C(3704160256),	// FLAT_ATOMIC_ADD_RTN
    UINT64_C(3712483328),	// FLAT_ATOMIC_ADD_X2
    UINT64_C(3712548864),	// FLAT_ATOMIC_ADD_X2_RTN
    UINT64_C(3705929728),	// FLAT_ATOMIC_AND
    UINT64_C(3705995264),	// FLAT_ATOMIC_AND_RTN
    UINT64_C(3714318336),	// FLAT_ATOMIC_AND_X2
    UINT64_C(3714383872),	// FLAT_ATOMIC_AND_X2_RTN
    UINT64_C(3703832576),	// FLAT_ATOMIC_CMPSWAP
    UINT64_C(3703898112),	// FLAT_ATOMIC_CMPSWAP_RTN
    UINT64_C(3712221184),	// FLAT_ATOMIC_CMPSWAP_X2
    UINT64_C(3712286720),	// FLAT_ATOMIC_CMPSWAP_X2_RTN
    UINT64_C(3706978304),	// FLAT_ATOMIC_DEC
    UINT64_C(3707043840),	// FLAT_ATOMIC_DEC_RTN
    UINT64_C(3715366912),	// FLAT_ATOMIC_DEC_X2
    UINT64_C(3715432448),	// FLAT_ATOMIC_DEC_X2_RTN
    UINT64_C(3707240448),	// FLAT_ATOMIC_FCMPSWAP
    UINT64_C(3707305984),	// FLAT_ATOMIC_FCMPSWAP_RTN
    UINT64_C(3715629056),	// FLAT_ATOMIC_FCMPSWAP_X2
    UINT64_C(3715694592),	// FLAT_ATOMIC_FCMPSWAP_X2_RTN
    UINT64_C(3707764736),	// FLAT_ATOMIC_FMAX
    UINT64_C(3707830272),	// FLAT_ATOMIC_FMAX_RTN
    UINT64_C(3716153344),	// FLAT_ATOMIC_FMAX_X2
    UINT64_C(3716218880),	// FLAT_ATOMIC_FMAX_X2_RTN
    UINT64_C(3707502592),	// FLAT_ATOMIC_FMIN
    UINT64_C(3707568128),	// FLAT_ATOMIC_FMIN_RTN
    UINT64_C(3715891200),	// FLAT_ATOMIC_FMIN_X2
    UINT64_C(3715956736),	// FLAT_ATOMIC_FMIN_X2_RTN
    UINT64_C(3706716160),	// FLAT_ATOMIC_INC
    UINT64_C(3706781696),	// FLAT_ATOMIC_INC_RTN
    UINT64_C(3715104768),	// FLAT_ATOMIC_INC_X2
    UINT64_C(3715170304),	// FLAT_ATOMIC_INC_X2_RTN
    UINT64_C(3706191872),	// FLAT_ATOMIC_OR
    UINT64_C(3706257408),	// FLAT_ATOMIC_OR_RTN
    UINT64_C(3714580480),	// FLAT_ATOMIC_OR_X2
    UINT64_C(3714646016),	// FLAT_ATOMIC_OR_X2_RTN
    UINT64_C(3704619008),	// FLAT_ATOMIC_RSUB
    UINT64_C(3704684544),	// FLAT_ATOMIC_RSUB_RTN
    UINT64_C(3713007616),	// FLAT_ATOMIC_RSUB_X2
    UINT64_C(3713073152),	// FLAT_ATOMIC_RSUB_X2_RTN
    UINT64_C(3705405440),	// FLAT_ATOMIC_SMAX
    UINT64_C(3705470976),	// FLAT_ATOMIC_SMAX_RTN
    UINT64_C(3713794048),	// FLAT_ATOMIC_SMAX_X2
    UINT64_C(3713859584),	// FLAT_ATOMIC_SMAX_X2_RTN
    UINT64_C(3704881152),	// FLAT_ATOMIC_SMIN
    UINT64_C(3704946688),	// FLAT_ATOMIC_SMIN_RTN
    UINT64_C(3713269760),	// FLAT_ATOMIC_SMIN_X2
    UINT64_C(3713335296),	// FLAT_ATOMIC_SMIN_X2_RTN
    UINT64_C(3704356864),	// FLAT_ATOMIC_SUB
    UINT64_C(3704422400),	// FLAT_ATOMIC_SUB_RTN
    UINT64_C(3712745472),	// FLAT_ATOMIC_SUB_X2
    UINT64_C(3712811008),	// FLAT_ATOMIC_SUB_X2_RTN
    UINT64_C(3703570432),	// FLAT_ATOMIC_SWAP
    UINT64_C(3703635968),	// FLAT_ATOMIC_SWAP_RTN
    UINT64_C(3711959040),	// FLAT_ATOMIC_SWAP_X2
    UINT64_C(3712024576),	// FLAT_ATOMIC_SWAP_X2_RTN
    UINT64_C(3705667584),	// FLAT_ATOMIC_UMAX
    UINT64_C(3705733120),	// FLAT_ATOMIC_UMAX_RTN
    UINT64_C(3714056192),	// FLAT_ATOMIC_UMAX_X2
    UINT64_C(3714121728),	// FLAT_ATOMIC_UMAX_X2_RTN
    UINT64_C(3705143296),	// FLAT_ATOMIC_UMIN
    UINT64_C(3705208832),	// FLAT_ATOMIC_UMIN_RTN
    UINT64_C(3713531904),	// FLAT_ATOMIC_UMIN_X2
    UINT64_C(3713597440),	// FLAT_ATOMIC_UMIN_X2_RTN
    UINT64_C(3706454016),	// FLAT_ATOMIC_XOR
    UINT64_C(3706519552),	// FLAT_ATOMIC_XOR_RTN
    UINT64_C(3714842624),	// FLAT_ATOMIC_XOR_X2
    UINT64_C(3714908160),	// FLAT_ATOMIC_XOR_X2_RTN
    UINT64_C(3694133248),	// FLAT_LOAD_DWORD
    UINT64_C(3694395392),	// FLAT_LOAD_DWORDX2
    UINT64_C(3694919680),	// FLAT_LOAD_DWORDX3
    UINT64_C(3694657536),	// FLAT_LOAD_DWORDX4
    UINT64_C(3693346816),	// FLAT_LOAD_SBYTE
    UINT64_C(3693871104),	// FLAT_LOAD_SSHORT
    UINT64_C(3693084672),	// FLAT_LOAD_UBYTE
    UINT64_C(3693608960),	// FLAT_LOAD_USHORT
    UINT64_C(3697278976),	// FLAT_STORE_BYTE
    UINT64_C(3698327552),	// FLAT_STORE_DWORD
    UINT64_C(3698589696),	// FLAT_STORE_DWORDX2
    UINT64_C(3699113984),	// FLAT_STORE_DWORDX3
    UINT64_C(3698851840),	// FLAT_STORE_DWORDX4
    UINT64_C(3697803264),	// FLAT_STORE_SHORT
    UINT64_C(10995116277760),	// FLOOR
    UINT64_C(43980465111040),	// FLT_TO_INT_eg
    UINT64_C(58823872086016),	// FLT_TO_INT_r600
    UINT64_C(84662395338752),	// FLT_TO_UINT_eg
    UINT64_C(66520453480448),	// FLT_TO_UINT_r600
    UINT64_C(246290604621824),	// FMA_eg
    UINT64_C(0),
    UINT64_C(8796093022208),	// FRACT
    UINT64_C(0),
    UINT64_C(46181635850240),	// GROUP_BARRIER
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V1_V1
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V1_V16
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V1_V2
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V1_V4
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V1_V8
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V2_V1
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V2_V16
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V2_V2
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V2_V4
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V2_V8
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V3_V1
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V3_V16
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V3_V2
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V3_V4
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V3_V8
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V4_V1
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V4_V16
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V4_V2
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V4_V4
    UINT64_C(4049076224),	// IMAGE_GATHER4_B_CL_O_V4_V8
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V1_V1
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V1_V16
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V1_V2
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V1_V4
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V1_V8
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V2_V1
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V2_V16
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V2_V2
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V2_V4
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V2_V8
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V3_V1
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V3_V16
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V3_V2
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V3_V4
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V3_V8
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V4_V1
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V4_V16
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V4_V2
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V4_V4
    UINT64_C(4044881920),	// IMAGE_GATHER4_B_CL_V4_V8
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V1_V1
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V1_V16
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V1_V2
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V1_V4
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V1_V8
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V2_V1
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V2_V16
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V2_V2
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V2_V4
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V2_V8
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V3_V1
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V3_V16
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V3_V2
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V3_V4
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V3_V8
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V4_V1
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V4_V16
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V4_V2
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V4_V4
    UINT64_C(4048814080),	// IMAGE_GATHER4_B_O_V4_V8
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V1_V1
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V1_V16
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V1_V2
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V1_V4
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V1_V8
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V2_V1
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V2_V16
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V2_V2
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V2_V4
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V2_V8
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V3_V1
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V3_V16
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V3_V2
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V3_V4
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V3_V8
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V4_V1
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V4_V16
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V4_V2
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V4_V4
    UINT64_C(4044619776),	// IMAGE_GATHER4_B_V4_V8
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V1_V1
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V1_V16
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V1_V2
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V1_V4
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V1_V8
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V2_V1
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V2_V16
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V2_V2
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V2_V4
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V2_V8
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V3_V1
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V3_V16
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V3_V2
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V3_V4
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V3_V8
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V4_V1
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V4_V16
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V4_V2
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V4_V4
    UINT64_C(4047765504),	// IMAGE_GATHER4_CL_O_V4_V8
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V1_V1
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V1_V16
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V1_V2
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V1_V4
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V1_V8
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V2_V1
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V2_V16
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V2_V2
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V2_V4
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V2_V8
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V3_V1
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V3_V16
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V3_V2
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V3_V4
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V3_V8
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V4_V1
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V4_V16
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V4_V2
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V4_V4
    UINT64_C(4043571200),	// IMAGE_GATHER4_CL_V4_V8
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V1_V1
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V1_V16
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V1_V2
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V1_V4
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V1_V8
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V2_V1
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V2_V16
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V2_V2
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V2_V4
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V2_V8
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V3_V1
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V3_V16
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V3_V2
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V3_V4
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V3_V8
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V4_V1
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V4_V16
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V4_V2
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V4_V4
    UINT64_C(4051173376),	// IMAGE_GATHER4_C_B_CL_O_V4_V8
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V1_V1
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V1_V16
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V1_V2
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V1_V4
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V1_V8
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V2_V1
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V2_V16
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V2_V2
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V2_V4
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V2_V8
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V3_V1
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V3_V16
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V3_V2
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V3_V4
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V3_V8
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V4_V1
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V4_V16
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V4_V2
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V4_V4
    UINT64_C(4046979072),	// IMAGE_GATHER4_C_B_CL_V4_V8
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V1_V1
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V1_V16
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V1_V2
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V1_V4
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V1_V8
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V2_V1
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V2_V16
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V2_V2
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V2_V4
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V2_V8
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V3_V1
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V3_V16
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V3_V2
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V3_V4
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V3_V8
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V4_V1
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V4_V16
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V4_V2
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V4_V4
    UINT64_C(4050911232),	// IMAGE_GATHER4_C_B_O_V4_V8
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V1_V1
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V1_V16
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V1_V2
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V1_V4
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V1_V8
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V2_V1
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V2_V16
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V2_V2
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V2_V4
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V2_V8
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V3_V1
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V3_V16
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V3_V2
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V3_V4
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V3_V8
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V4_V1
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V4_V16
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V4_V2
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V4_V4
    UINT64_C(4046716928),	// IMAGE_GATHER4_C_B_V4_V8
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V1_V1
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V1_V16
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V1_V2
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V1_V4
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V1_V8
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V2_V1
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V2_V16
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V2_V2
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V2_V4
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V2_V8
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V3_V1
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V3_V16
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V3_V2
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V3_V4
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V3_V8
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V4_V1
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V4_V16
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V4_V2
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V4_V4
    UINT64_C(4049862656),	// IMAGE_GATHER4_C_CL_O_V4_V8
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V1_V1
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V1_V16
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V1_V2
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V1_V4
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V1_V8
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V2_V1
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V2_V16
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V2_V2
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V2_V4
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V2_V8
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V3_V1
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V3_V16
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V3_V2
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V3_V4
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V3_V8
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V4_V1
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V4_V16
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V4_V2
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V4_V4
    UINT64_C(4045668352),	// IMAGE_GATHER4_C_CL_V4_V8
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V1_V1
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V1_V16
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V1_V2
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V1_V4
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V1_V8
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V2_V1
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V2_V16
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V2_V2
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V2_V4
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V2_V8
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V3_V1
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V3_V16
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V3_V2
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V3_V4
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V3_V8
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V4_V1
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V4_V16
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V4_V2
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V4_V4
    UINT64_C(4051435520),	// IMAGE_GATHER4_C_LZ_O_V4_V8
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V1_V1
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V1_V16
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V1_V2
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V1_V4
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V1_V8
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V2_V1
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V2_V16
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V2_V2
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V2_V4
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V2_V8
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V3_V1
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V3_V16
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V3_V2
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V3_V4
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V3_V8
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V4_V1
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V4_V16
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V4_V2
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V4_V4
    UINT64_C(4047241216),	// IMAGE_GATHER4_C_LZ_V4_V8
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V1_V1
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V1_V16
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V1_V2
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V1_V4
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V1_V8
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V2_V1
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V2_V16
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V2_V2
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V2_V4
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V2_V8
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V3_V1
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V3_V16
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V3_V2
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V3_V4
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V3_V8
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V4_V1
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V4_V16
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V4_V2
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V4_V4
    UINT64_C(4050649088),	// IMAGE_GATHER4_C_L_O_V4_V8
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V1_V1
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V1_V16
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V1_V2
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V1_V4
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V1_V8
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V2_V1
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V2_V16
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V2_V2
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V2_V4
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V2_V8
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V3_V1
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V3_V16
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V3_V2
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V3_V4
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V3_V8
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V4_V1
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V4_V16
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V4_V2
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V4_V4
    UINT64_C(4046454784),	// IMAGE_GATHER4_C_L_V4_V8
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V1_V1
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V1_V16
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V1_V2
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V1_V4
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V1_V8
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V2_V1
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V2_V16
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V2_V2
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V2_V4
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V2_V8
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V3_V1
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V3_V16
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V3_V2
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V3_V4
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V3_V8
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V4_V1
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V4_V16
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V4_V2
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V4_V4
    UINT64_C(4049600512),	// IMAGE_GATHER4_C_O_V4_V8
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V1_V1
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V1_V16
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V1_V2
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V1_V4
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V1_V8
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V2_V1
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V2_V16
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V2_V2
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V2_V4
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V2_V8
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V3_V1
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V3_V16
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V3_V2
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V3_V4
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V3_V8
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V4_V1
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V4_V16
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V4_V2
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V4_V4
    UINT64_C(4045406208),	// IMAGE_GATHER4_C_V4_V8
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V1_V1
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V1_V16
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V1_V2
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V1_V4
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V1_V8
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V2_V1
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V2_V16
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V2_V2
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V2_V4
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V2_V8
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V3_V1
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V3_V16
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V3_V2
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V3_V4
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V3_V8
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V4_V1
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V4_V16
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V4_V2
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V4_V4
    UINT64_C(4049338368),	// IMAGE_GATHER4_LZ_O_V4_V8
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V1_V1
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V1_V16
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V1_V2
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V1_V4
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V1_V8
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V2_V1
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V2_V16
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V2_V2
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V2_V4
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V2_V8
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V3_V1
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V3_V16
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V3_V2
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V3_V4
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V3_V8
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V4_V1
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V4_V16
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V4_V2
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V4_V4
    UINT64_C(4045144064),	// IMAGE_GATHER4_LZ_V4_V8
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V1_V1
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V1_V16
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V1_V2
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V1_V4
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V1_V8
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V2_V1
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V2_V16
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V2_V2
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V2_V4
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V2_V8
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V3_V1
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V3_V16
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V3_V2
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V3_V4
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V3_V8
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V4_V1
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V4_V16
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V4_V2
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V4_V4
    UINT64_C(4048551936),	// IMAGE_GATHER4_L_O_V4_V8
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V1_V1
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V1_V16
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V1_V2
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V1_V4
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V1_V8
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V2_V1
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V2_V16
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V2_V2
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V2_V4
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V2_V8
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V3_V1
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V3_V16
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V3_V2
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V3_V4
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V3_V8
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V4_V1
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V4_V16
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V4_V2
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V4_V4
    UINT64_C(4044357632),	// IMAGE_GATHER4_L_V4_V8
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V1_V1
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V1_V16
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V1_V2
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V1_V4
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V1_V8
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V2_V1
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V2_V16
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V2_V2
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V2_V4
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V2_V8
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V3_V1
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V3_V16
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V3_V2
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V3_V4
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V3_V8
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V4_V1
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V4_V16
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V4_V2
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V4_V4
    UINT64_C(4047503360),	// IMAGE_GATHER4_O_V4_V8
    UINT64_C(4043309056),	// IMAGE_GATHER4_V1_V1
    UINT64_C(4043309056),	// IMAGE_GATHER4_V1_V16
    UINT64_C(4043309056),	// IMAGE_GATHER4_V1_V2
    UINT64_C(4043309056),	// IMAGE_GATHER4_V1_V4
    UINT64_C(4043309056),	// IMAGE_GATHER4_V1_V8
    UINT64_C(4043309056),	// IMAGE_GATHER4_V2_V1
    UINT64_C(4043309056),	// IMAGE_GATHER4_V2_V16
    UINT64_C(4043309056),	// IMAGE_GATHER4_V2_V2
    UINT64_C(4043309056),	// IMAGE_GATHER4_V2_V4
    UINT64_C(4043309056),	// IMAGE_GATHER4_V2_V8
    UINT64_C(4043309056),	// IMAGE_GATHER4_V3_V1
    UINT64_C(4043309056),	// IMAGE_GATHER4_V3_V16
    UINT64_C(4043309056),	// IMAGE_GATHER4_V3_V2
    UINT64_C(4043309056),	// IMAGE_GATHER4_V3_V4
    UINT64_C(4043309056),	// IMAGE_GATHER4_V3_V8
    UINT64_C(4043309056),	// IMAGE_GATHER4_V4_V1
    UINT64_C(4043309056),	// IMAGE_GATHER4_V4_V16
    UINT64_C(4043309056),	// IMAGE_GATHER4_V4_V2
    UINT64_C(4043309056),	// IMAGE_GATHER4_V4_V4
    UINT64_C(4043309056),	// IMAGE_GATHER4_V4_V8
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V1_V1
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V1_V16
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V1_V2
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V1_V4
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V1_V8
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V2_V1
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V2_V16
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V2_V2
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V2_V4
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V2_V8
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V3_V1
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V3_V16
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V3_V2
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V3_V4
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V3_V8
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V4_V1
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V4_V16
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V4_V2
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V4_V4
    UINT64_C(4051697664),	// IMAGE_GET_LOD_V4_V8
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V1_V1
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V1_V2
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V1_V4
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V2_V1
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V2_V2
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V2_V4
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V3_V1
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V3_V2
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V3_V4
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V4_V1
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V4_V2
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V4_V4
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V1_V1
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V1_V2
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V1_V4
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V2_V1
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V2_V2
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V2_V4
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V3_V1
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V3_V2
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V3_V4
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V4_V1
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V4_V2
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V4_V4
    UINT64_C(4026531840),	// IMAGE_LOAD_V1_V1
    UINT64_C(4026531840),	// IMAGE_LOAD_V1_V2
    UINT64_C(4026531840),	// IMAGE_LOAD_V1_V4
    UINT64_C(4026531840),	// IMAGE_LOAD_V2_V1
    UINT64_C(4026531840),	// IMAGE_LOAD_V2_V2
    UINT64_C(4026531840),	// IMAGE_LOAD_V2_V4
    UINT64_C(4026531840),	// IMAGE_LOAD_V3_V1
    UINT64_C(4026531840),	// IMAGE_LOAD_V3_V2
    UINT64_C(4026531840),	// IMAGE_LOAD_V3_V4
    UINT64_C(4026531840),	// IMAGE_LOAD_V4_V1
    UINT64_C(4026531840),	// IMAGE_LOAD_V4_V2
    UINT64_C(4026531840),	// IMAGE_LOAD_V4_V4
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V1_V1
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V1_V16
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V1_V2
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V1_V4
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V1_V8
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V2_V1
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V2_V16
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V2_V2
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V2_V4
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V2_V8
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V3_V1
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V3_V16
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V3_V2
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V3_V4
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V3_V8
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V4_V1
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V4_V16
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V4_V2
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V4_V4
    UINT64_C(4040687616),	// IMAGE_SAMPLE_B_CL_O_V4_V8
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V1_V1
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V1_V16
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V1_V2
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V1_V4
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V1_V8
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V2_V1
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V2_V16
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V2_V2
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V2_V4
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V2_V8
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V3_V1
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V3_V16
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V3_V2
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V3_V4
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V3_V8
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V4_V1
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V4_V16
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V4_V2
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V4_V4
    UINT64_C(4036493312),	// IMAGE_SAMPLE_B_CL_V4_V8
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V1_V1
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V1_V16
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V1_V2
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V1_V4
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V1_V8
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V2_V1
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V2_V16
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V2_V2
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V2_V4
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V2_V8
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V3_V1
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V3_V16
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V3_V2
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V3_V4
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V3_V8
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V4_V1
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V4_V16
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V4_V2
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V4_V4
    UINT64_C(4040425472),	// IMAGE_SAMPLE_B_O_V4_V8
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V1_V1
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V1_V16
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V1_V2
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V1_V4
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V1_V8
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V2_V1
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V2_V16
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V2_V2
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V2_V4
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V2_V8
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V3_V1
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V3_V16
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V3_V2
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V3_V4
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V3_V8
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V4_V1
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V4_V16
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V4_V2
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V4_V4
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V4_V8
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V1_V1
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V1_V16
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V1_V2
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V1_V4
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V1_V8
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V2_V1
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V2_V16
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V2_V2
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V2_V4
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V2_V8
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V3_V1
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V3_V16
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V3_V2
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V3_V4
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V3_V8
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V4_V1
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V4_V16
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V4_V2
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V4_V4
    UINT64_C(4055105536),	// IMAGE_SAMPLE_CD_CL_O_V4_V8
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V1_V1
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V1_V16
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V1_V2
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V1_V4
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V1_V8
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V2_V1
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V2_V16
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V2_V2
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V2_V4
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V2_V8
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V3_V1
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V3_V16
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V3_V2
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V3_V4
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V3_V8
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V4_V1
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V4_V16
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V4_V2
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V4_V4
    UINT64_C(4054056960),	// IMAGE_SAMPLE_CD_CL_V4_V8
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V1_V1
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V1_V16
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V1_V2
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V1_V4
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V1_V8
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V2_V1
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V2_V16
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V2_V2
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V2_V4
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V2_V8
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V3_V1
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V3_V16
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V3_V2
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V3_V4
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V3_V8
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V4_V1
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V4_V16
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V4_V2
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V4_V4
    UINT64_C(4054843392),	// IMAGE_SAMPLE_CD_O_V4_V8
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V1_V1
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V1_V16
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V1_V2
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V1_V4
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V1_V8
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V2_V1
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V2_V16
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V2_V2
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V2_V4
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V2_V8
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V3_V1
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V3_V16
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V3_V2
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V3_V4
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V3_V8
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V4_V1
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V4_V16
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V4_V2
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V4_V4
    UINT64_C(4053794816),	// IMAGE_SAMPLE_CD_V4_V8
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V1_V1
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V1_V16
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V1_V2
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V1_V4
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V1_V8
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V2_V1
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V2_V16
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V2_V2
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V2_V4
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V2_V8
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V3_V1
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V3_V16
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V3_V2
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V3_V4
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V3_V8
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V4_V1
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V4_V16
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V4_V2
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V4_V4
    UINT64_C(4039376896),	// IMAGE_SAMPLE_CL_O_V4_V8
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V1_V1
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V1_V16
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V1_V2
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V1_V4
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V1_V8
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V2_V1
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V2_V16
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V2_V2
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V2_V4
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V2_V8
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V3_V1
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V3_V16
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V3_V2
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V3_V4
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V3_V8
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V4_V1
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V4_V16
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V4_V2
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V4_V4
    UINT64_C(4035182592),	// IMAGE_SAMPLE_CL_V4_V8
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V1_V1
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V1_V16
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V1_V2
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V1_V4
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V1_V8
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V2_V1
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V2_V16
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V2_V2
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V2_V4
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V2_V8
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V3_V1
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V3_V16
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V3_V2
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V3_V4
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V3_V8
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V4_V1
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V4_V16
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V4_V2
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V4_V4
    UINT64_C(4042784768),	// IMAGE_SAMPLE_C_B_CL_O_V4_V8
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V1_V1
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V1_V16
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V1_V2
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V1_V4
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V1_V8
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V2_V1
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V2_V16
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V2_V2
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V2_V4
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V2_V8
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V3_V1
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V3_V16
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V3_V2
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V3_V4
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V3_V8
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V4_V1
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V4_V16
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V4_V2
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V4_V4
    UINT64_C(4038590464),	// IMAGE_SAMPLE_C_B_CL_V4_V8
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V1_V1
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V1_V16
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V1_V2
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V1_V4
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V1_V8
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V2_V1
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V2_V16
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V2_V2
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V2_V4
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V2_V8
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V3_V1
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V3_V16
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V3_V2
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V3_V4
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V3_V8
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V4_V1
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V4_V16
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V4_V2
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V4_V4
    UINT64_C(4042522624),	// IMAGE_SAMPLE_C_B_O_V4_V8
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V1_V1
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V1_V16
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V1_V2
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V1_V4
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V1_V8
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V2_V1
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V2_V16
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V2_V2
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V2_V4
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V2_V8
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V3_V1
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V3_V16
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V3_V2
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V3_V4
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V3_V8
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V4_V1
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V4_V16
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V4_V2
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V4_V4
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V4_V8
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V1_V1
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V1_V16
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V1_V2
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V1_V4
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V1_V8
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V2_V1
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V2_V16
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V2_V2
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V2_V4
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V2_V8
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V3_V1
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V3_V16
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V3_V2
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V3_V4
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V3_V8
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V4_V1
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V4_V16
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V4_V2
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V4_V4
    UINT64_C(4055629824),	// IMAGE_SAMPLE_C_CD_CL_O_V4_V8
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V1_V1
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V1_V16
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V1_V2
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V1_V4
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V1_V8
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V2_V1
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V2_V16
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V2_V2
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V2_V4
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V2_V8
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V3_V1
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V3_V16
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V3_V2
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V3_V4
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V3_V8
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V4_V1
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V4_V16
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V4_V2
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V4_V4
    UINT64_C(4054581248),	// IMAGE_SAMPLE_C_CD_CL_V4_V8
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V1_V1
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V1_V16
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V1_V2
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V1_V4
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V1_V8
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V2_V1
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V2_V16
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V2_V2
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V2_V4
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V2_V8
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V3_V1
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V3_V16
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V3_V2
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V3_V4
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V3_V8
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V4_V1
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V4_V16
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V4_V2
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V4_V4
    UINT64_C(4055367680),	// IMAGE_SAMPLE_C_CD_O_V4_V8
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V1_V1
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V1_V16
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V1_V2
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V1_V4
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V1_V8
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V2_V1
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V2_V16
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V2_V2
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V2_V4
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V2_V8
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V3_V1
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V3_V16
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V3_V2
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V3_V4
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V3_V8
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V4_V1
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V4_V16
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V4_V2
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V4_V4
    UINT64_C(4054319104),	// IMAGE_SAMPLE_C_CD_V4_V8
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V1_V1
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V1_V16
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V1_V2
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V1_V4
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V1_V8
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V2_V1
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V2_V16
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V2_V2
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V2_V4
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V2_V8
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V3_V1
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V3_V16
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V3_V2
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V3_V4
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V3_V8
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V4_V1
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V4_V16
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V4_V2
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V4_V4
    UINT64_C(4041474048),	// IMAGE_SAMPLE_C_CL_O_V4_V8
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V1_V1
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V1_V16
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V1_V2
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V1_V4
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V1_V8
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V2_V1
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V2_V16
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V2_V2
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V2_V4
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V2_V8
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V3_V1
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V3_V16
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V3_V2
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V3_V4
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V3_V8
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V4_V1
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V4_V16
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V4_V2
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V4_V4
    UINT64_C(4037279744),	// IMAGE_SAMPLE_C_CL_V4_V8
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V1_V1
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V1_V16
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V1_V2
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V1_V4
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V1_V8
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V2_V1
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V2_V16
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V2_V2
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V2_V4
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V2_V8
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V3_V1
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V3_V16
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V3_V2
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V3_V4
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V3_V8
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V4_V1
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V4_V16
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V4_V2
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V4_V4
    UINT64_C(4041998336),	// IMAGE_SAMPLE_C_D_CL_O_V4_V8
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V1_V1
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V1_V16
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V1_V2
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V1_V4
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V1_V8
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V2_V1
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V2_V16
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V2_V2
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V2_V4
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V2_V8
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V3_V1
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V3_V16
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V3_V2
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V3_V4
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V3_V8
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V4_V1
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V4_V16
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V4_V2
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V4_V4
    UINT64_C(4037804032),	// IMAGE_SAMPLE_C_D_CL_V4_V8
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V1_V1
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V1_V16
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V1_V2
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V1_V4
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V1_V8
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V2_V1
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V2_V16
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V2_V2
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V2_V4
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V2_V8
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V3_V1
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V3_V16
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V3_V2
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V3_V4
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V3_V8
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V4_V1
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V4_V16
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V4_V2
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V4_V4
    UINT64_C(4041736192),	// IMAGE_SAMPLE_C_D_O_V4_V8
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V1_V1
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V1_V16
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V1_V2
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V1_V4
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V1_V8
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V2_V1
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V2_V16
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V2_V2
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V2_V4
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V2_V8
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V3_V1
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V3_V16
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V3_V2
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V3_V4
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V3_V8
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V4_V1
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V4_V16
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V4_V2
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V4_V4
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V4_V8
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V1_V1
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V1_V16
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V1_V2
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V1_V4
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V1_V8
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V2_V1
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V2_V16
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V2_V2
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V2_V4
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V2_V8
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V3_V1
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V3_V16
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V3_V2
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V3_V4
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V3_V8
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V4_V1
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V4_V16
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V4_V2
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V4_V4
    UINT64_C(4043046912),	// IMAGE_SAMPLE_C_LZ_O_V4_V8
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V1_V1
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V1_V16
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V1_V2
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V1_V4
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V1_V8
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V2_V1
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V2_V16
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V2_V2
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V2_V4
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V2_V8
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V3_V1
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V3_V16
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V3_V2
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V3_V4
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V3_V8
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V4_V1
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V4_V16
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V4_V2
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V4_V4
    UINT64_C(4038852608),	// IMAGE_SAMPLE_C_LZ_V4_V8
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V1_V1
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V1_V16
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V1_V2
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V1_V4
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V1_V8
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V2_V1
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V2_V16
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V2_V2
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V2_V4
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V2_V8
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V3_V1
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V3_V16
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V3_V2
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V3_V4
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V3_V8
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V4_V1
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V4_V16
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V4_V2
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V4_V4
    UINT64_C(4042260480),	// IMAGE_SAMPLE_C_L_O_V4_V8
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V1_V1
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V1_V16
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V1_V2
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V1_V4
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V1_V8
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V2_V1
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V2_V16
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V2_V2
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V2_V4
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V2_V8
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V3_V1
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V3_V16
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V3_V2
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V3_V4
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V3_V8
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V4_V1
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V4_V16
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V4_V2
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V4_V4
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V4_V8
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V1_V1
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V1_V16
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V1_V2
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V1_V4
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V1_V8
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V2_V1
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V2_V16
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V2_V2
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V2_V4
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V2_V8
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V3_V1
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V3_V16
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V3_V2
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V3_V4
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V3_V8
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V4_V1
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V4_V16
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V4_V2
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V4_V4
    UINT64_C(4041211904),	// IMAGE_SAMPLE_C_O_V4_V8
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V1_V1
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V1_V16
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V1_V2
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V1_V4
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V1_V8
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V2_V1
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V2_V16
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V2_V2
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V2_V4
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V2_V8
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V3_V1
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V3_V16
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V3_V2
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V3_V4
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V3_V8
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V4_V1
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V4_V16
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V4_V2
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V4_V4
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V4_V8
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V1_V1
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V1_V16
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V1_V2
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V1_V4
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V1_V8
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V2_V1
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V2_V16
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V2_V2
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V2_V4
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V2_V8
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V3_V1
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V3_V16
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V3_V2
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V3_V4
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V3_V8
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V4_V1
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V4_V16
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V4_V2
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V4_V4
    UINT64_C(4039901184),	// IMAGE_SAMPLE_D_CL_O_V4_V8
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V1_V1
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V1_V16
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V1_V2
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V1_V4
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V1_V8
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V2_V1
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V2_V16
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V2_V2
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V2_V4
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V2_V8
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V3_V1
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V3_V16
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V3_V2
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V3_V4
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V3_V8
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V4_V1
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V4_V16
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V4_V2
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V4_V4
    UINT64_C(4035706880),	// IMAGE_SAMPLE_D_CL_V4_V8
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V1_V1
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V1_V16
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V1_V2
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V1_V4
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V1_V8
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V2_V1
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V2_V16
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V2_V2
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V2_V4
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V2_V8
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V3_V1
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V3_V16
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V3_V2
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V3_V4
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V3_V8
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V4_V1
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V4_V16
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V4_V2
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V4_V4
    UINT64_C(4039639040),	// IMAGE_SAMPLE_D_O_V4_V8
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V1_V1
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V1_V16
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V1_V2
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V1_V4
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V1_V8
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V2_V1
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V2_V16
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V2_V2
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V2_V4
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V2_V8
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V3_V1
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V3_V16
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V3_V2
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V3_V4
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V3_V8
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V4_V1
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V4_V16
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V4_V2
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V4_V4
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V4_V8
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V1_V1
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V1_V16
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V1_V2
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V1_V4
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V1_V8
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V2_V1
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V2_V16
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V2_V2
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V2_V4
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V2_V8
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V3_V1
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V3_V16
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V3_V2
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V3_V4
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V3_V8
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V4_V1
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V4_V16
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V4_V2
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V4_V4
    UINT64_C(4040949760),	// IMAGE_SAMPLE_LZ_O_V4_V8
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V1_V1
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V1_V16
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V1_V2
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V1_V4
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V1_V8
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V2_V1
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V2_V16
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V2_V2
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V2_V4
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V2_V8
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V3_V1
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V3_V16
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V3_V2
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V3_V4
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V3_V8
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V4_V1
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V4_V16
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V4_V2
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V4_V4
    UINT64_C(4036755456),	// IMAGE_SAMPLE_LZ_V4_V8
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V1_V1
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V1_V16
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V1_V2
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V1_V4
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V1_V8
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V2_V1
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V2_V16
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V2_V2
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V2_V4
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V2_V8
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V3_V1
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V3_V16
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V3_V2
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V3_V4
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V3_V8
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V4_V1
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V4_V16
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V4_V2
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V4_V4
    UINT64_C(4040163328),	// IMAGE_SAMPLE_L_O_V4_V8
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V1_V1
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V1_V16
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V1_V2
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V1_V4
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V1_V8
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V2_V1
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V2_V16
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V2_V2
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V2_V4
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V2_V8
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V3_V1
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V3_V16
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V3_V2
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V3_V4
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V3_V8
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V4_V1
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V4_V16
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V4_V2
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V4_V4
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V4_V8
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V1_V1
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V1_V16
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V1_V2
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V1_V4
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V1_V8
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V2_V1
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V2_V16
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V2_V2
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V2_V4
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V2_V8
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V3_V1
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V3_V16
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V3_V2
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V3_V4
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V3_V8
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V4_V1
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V4_V16
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V4_V2
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V4_V4
    UINT64_C(4039114752),	// IMAGE_SAMPLE_O_V4_V8
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V1_V1
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V1_V16
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V1_V2
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V1_V4
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V1_V8
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V2_V1
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V2_V16
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V2_V2
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V2_V4
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V2_V8
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V3_V1
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V3_V16
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V3_V2
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V3_V4
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V3_V8
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V4_V1
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V4_V16
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V4_V2
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V4_V4
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V4_V8
    UINT64_C(123145302310912),	// INTERP_LOAD_P0
    UINT64_C(4294967295),	// INTERP_PAIR_XY
    UINT64_C(4294967295),	// INTERP_PAIR_ZW
    UINT64_C(4294967295),	// INTERP_VEC_LOAD
    UINT64_C(5747147278385152),	// INTERP_XY
    UINT64_C(5747697034199040),	// INTERP_ZW
    UINT64_C(85212151152640),	// INT_TO_FLT_eg
    UINT64_C(59373627899904),	// INT_TO_FLT_r600
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(24739011624960),	// KILLGT
    UINT64_C(598134325510144),	// LDS_ADD
    UINT64_C(288828510477221888),	// LDS_ADD_RET
    UINT64_C(81662927618179072),	// LDS_AND
    UINT64_C(369893303769890816),	// LDS_AND_RET
    UINT64_C(486986894081523712),	// LDS_BYTE_READ_RET
    UINT64_C(162727720910848000),	// LDS_BYTE_WRITE
    UINT64_C(144713322401366016),	// LDS_CMPST
    UINT64_C(432943698553077760),	// LDS_CMPST_RET
    UINT64_C(54641329853956096),	// LDS_MAX_INT
    UINT64_C(342871706005667840),	// LDS_MAX_INT_RET
    UINT64_C(72655728363438080),	// LDS_MAX_UINT
    UINT64_C(360886104515149824),	// LDS_MAX_UINT_RET
    UINT64_C(45634130599215104),	// LDS_MIN_INT
    UINT64_C(333864506750926848),	// LDS_MIN_INT_RET
    UINT64_C(63648529108697088),	// LDS_MIN_UINT
    UINT64_C(351878905260408832),	// LDS_MIN_UINT_RET
    UINT64_C(90670126872920064),	// LDS_OR
    UINT64_C(378900503024631808),	// LDS_OR_RET
    UINT64_C(450958097062559744),	// LDS_READ_RET
    UINT64_C(505001292591005696),	// LDS_SHORT_READ_RET
    UINT64_C(171734920165588992),	// LDS_SHORT_WRITE
    UINT64_C(9605333580251136),	// LDS_SUB
    UINT64_C(297835709731962880),	// LDS_SUB_RET
    UINT64_C(495994093336264704),	// LDS_UBYTE_READ_RET
    UINT64_C(514008491845746688),	// LDS_USHORT_READ_RET
    UINT64_C(117691724637143040),	// LDS_WRITE
    UINT64_C(117691724637143040),	// LDS_WRXCHG
    UINT64_C(405922100788854784),	// LDS_WRXCHG_RET
    UINT64_C(99677326127661056),	// LDS_XOR
    UINT64_C(387907702279372800),	// LDS_XOR_RET
    UINT64_C(0),	// LITERALS
    UINT64_C(71468255805440),	// LOG_CLAMPED_eg
    UINT64_C(53876069761024),	// LOG_CLAMPED_r600
    UINT64_C(72018011619328),	// LOG_IEEE_cm
    UINT64_C(72018011619328),	// LOG_IEEE_eg
    UINT64_C(54425825574912),	// LOG_IEEE_r600
    UINT64_C(9385501623440113664),	// LOOP_BREAK_EG
    UINT64_C(9547631210025451520),	// LOOP_BREAK_R600
    UINT64_C(12644383719424),	// LSHL_eg
    UINT64_C(62672162783232),	// LSHL_r600
    UINT64_C(12094627905536),	// LSHR_eg
    UINT64_C(62122406969344),	// LSHR_r600
    UINT64_C(0),
    UINT64_C(1649267441664),	// MAX
    UINT64_C(2748779069440),	// MAX_DX10
    UINT64_C(29686813949952),	// MAX_INT
    UINT64_C(30786325577728),	// MAX_UINT
    UINT64_C(2199023255552),	// MIN
    UINT64_C(3298534883328),	// MIN_DX10
    UINT64_C(30236569763840),	// MIN_INT
    UINT64_C(31336081391616),	// MIN_UINT
    UINT64_C(13743895347200),	// MOV
    UINT64_C(112150186033152),	// MOVA_INT_eg
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(549755813888),	// MUL
    UINT64_C(844424930131968),	// MULADD_IEEE_eg
    UINT64_C(703687441776640),	// MULADD_IEEE_r600
    UINT64_C(281474976710656),	// MULADD_INT24_cm
    UINT64_C(562949953421312),	// MULADD_UINT24_eg
    UINT64_C(703687441776640),	// MULADD_eg
    UINT64_C(562949953421312),	// MULADD_r600
    UINT64_C(79164837199872),	// MULHI_INT_cm
    UINT64_C(79164837199872),	// MULHI_INT_eg
    UINT64_C(63771674411008),	// MULHI_INT_r600
    UINT64_C(80264348827648),	// MULHI_UINT_cm
    UINT64_C(80264348827648),	// MULHI_UINT_eg
    UINT64_C(64871186038784),	// MULHI_UINT_r600
    UINT64_C(78615081385984),	// MULLO_INT_cm
    UINT64_C(78615081385984),	// MULLO_INT_eg
    UINT64_C(63221918597120),	// MULLO_INT_r600
    UINT64_C(79714593013760),	// MULLO_UINT_cm
    UINT64_C(79714593013760),	// MULLO_UINT_eg
    UINT64_C(64321430224896),	// MULLO_UINT_r600
    UINT64_C(1099511627776),	// MUL_IEEE
    UINT64_C(50027779063808),	// MUL_INT24_cm
    UINT64_C(1090715534753792),	// MUL_LIT_eg
    UINT64_C(422212465065984),	// MUL_LIT_r600
    UINT64_C(99505802313728),	// MUL_UINT24_eg
    UINT64_C(28037546508288),	// NOT_INT
    UINT64_C(26938034880512),	// OR_INT
    UINT64_C(0),	// PAD
    UINT64_C(9475573615987523584),	// POP_EG
    UINT64_C(9727775195120271360),	// POP_R600
    UINT64_C(17592186044416),	// PRED_SETE
    UINT64_C(36283883716608),	// PRED_SETE_INT
    UINT64_C(18691697672192),	// PRED_SETGE
    UINT64_C(37383395344384),	// PRED_SETGE_INT
    UINT64_C(18141941858304),	// PRED_SETGT
    UINT64_C(36833639530496),	// PRED_SETGT_INT
    UINT64_C(19241453486080),	// PRED_SETNE
    UINT64_C(37933151158272),	// PRED_SETNE_INT
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(9223372036854775808),	// R600_ExportBuf
    UINT64_C(9223372040076001280),	// R600_ExportSwz
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(10772874191460901136),	// RAT_MSKOR
    UINT64_C(10790888589970383168),	// RAT_STORE_DWORD128
    UINT64_C(10790642299365761344),	// RAT_STORE_DWORD32
    UINT64_C(10790677483737850176),	// RAT_STORE_DWORD64
    UINT64_C(10790888589970382880),	// RAT_WRITE_CACHELESS_128_eg
    UINT64_C(10790642299365761056),	// RAT_WRITE_CACHELESS_32_eg
    UINT64_C(10790677483737849888),	// RAT_WRITE_CACHELESS_64_eg
    UINT64_C(74217034874880),	// RECIPSQRT_CLAMPED_cm
    UINT64_C(74217034874880),	// RECIPSQRT_CLAMPED_eg
    UINT64_C(56624848830464),	// RECIPSQRT_CLAMPED_r600
    UINT64_C(75316546502656),	// RECIPSQRT_IEEE_cm
    UINT64_C(75316546502656),	// RECIPSQRT_IEEE_eg
    UINT64_C(57724360458240),	// RECIPSQRT_IEEE_r600
    UINT64_C(72567767433216),	// RECIP_CLAMPED_cm
    UINT64_C(72567767433216),	// RECIP_CLAMPED_eg
    UINT64_C(54975581388800),	// RECIP_CLAMPED_r600
    UINT64_C(73667279060992),	// RECIP_IEEE_cm
    UINT64_C(73667279060992),	// RECIP_IEEE_eg
    UINT64_C(56075093016576),	// RECIP_IEEE_r600
    UINT64_C(81363860455424),	// RECIP_UINT_eg
    UINT64_C(65970697666560),	// RECIP_UINT_r600
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(10445360463872),	// RNDNE
    UINT64_C(4398046511104),	// SETE
    UINT64_C(6597069766656),	// SETE_DX10
    UINT64_C(31885837205504),	// SETE_INT
    UINT64_C(7696581394432),	// SETGE_DX10
    UINT64_C(32985348833280),	// SETGE_INT
    UINT64_C(34634616274944),	// SETGE_UINT
    UINT64_C(7146825580544),	// SETGT_DX10
    UINT64_C(32435593019392),	// SETGT_INT
    UINT64_C(34084860461056),	// SETGT_UINT
    UINT64_C(8246337208320),	// SETNE_DX10
    UINT64_C(33535104647168),	// SETNE_INT
    UINT64_C(5497558138880),	// SGE
    UINT64_C(0),
    UINT64_C(4947802324992),	// SGT
    UINT64_C(77515569758208),	// SIN_cm
    UINT64_C(77515569758208),	// SIN_eg
    UINT64_C(60473139527680),	// SIN_r600
    UINT64_C(60473139527680),	// SIN_r700
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(6047313952768),	// SNE
    UINT64_C(45629732552704),	// SUBB_UINT
    UINT64_C(29137058136064),	// SUB_INT
    UINT64_C(0),
    UINT64_C(2516582400),	// S_ABSDIFF_I32_si
    UINT64_C(2499805184),	// S_ABSDIFF_I32_vi
    UINT64_C(0),
    UINT64_C(3196072960),	// S_ABS_I32_si
    UINT64_C(3196071936),	// S_ABS_I32_vi
    UINT64_C(0),
    UINT64_C(2181038080),	// S_ADDC_U32_si
    UINT64_C(2181038080),	// S_ADDC_U32_vi
    UINT64_C(0),
    UINT64_C(3078619136),	// S_ADDK_I32_si
    UINT64_C(3070230528),	// S_ADDK_I32_vi
    UINT64_C(0),
    UINT64_C(2164260864),	// S_ADD_I32_si
    UINT64_C(2164260864),	// S_ADD_I32_vi
    UINT64_C(0),
    UINT64_C(2147483648),	// S_ADD_U32_si
    UINT64_C(2147483648),	// S_ADD_U32_vi
    UINT64_C(0),
    UINT64_C(2315255808),	// S_ANDN2_B32_si
    UINT64_C(2298478592),	// S_ANDN2_B32_vi
    UINT64_C(0),
    UINT64_C(2323644416),	// S_ANDN2_B64_si
    UINT64_C(2306867200),	// S_ANDN2_B64_vi
    UINT64_C(0),
    UINT64_C(3196069632),	// S_ANDN2_SAVEEXEC_B64_si
    UINT64_C(3196068608),	// S_ANDN2_SAVEEXEC_B64_vi
    UINT64_C(0),
    UINT64_C(2264924160),	// S_AND_B32_si
    UINT64_C(2248146944),	// S_AND_B32_vi
    UINT64_C(0),
    UINT64_C(2273312768),	// S_AND_B64_si
    UINT64_C(2256535552),	// S_AND_B64_vi
    UINT64_C(0),
    UINT64_C(3196068864),	// S_AND_SAVEEXEC_B64_si
    UINT64_C(3196067840),	// S_AND_SAVEEXEC_B64_vi
    UINT64_C(0),
    UINT64_C(2432696320),	// S_ASHR_I32_si
    UINT64_C(2415919104),	// S_ASHR_I32_vi
    UINT64_C(0),
    UINT64_C(2441084928),	// S_ASHR_I64_si
    UINT64_C(2424307712),	// S_ASHR_I64_vi
    UINT64_C(3213492224),	// S_BARRIER
    UINT64_C(0),
    UINT64_C(3196062976),	// S_BCNT0_I32_B32_si
    UINT64_C(3196062208),	// S_BCNT0_I32_B32_vi
    UINT64_C(0),
    UINT64_C(3196063232),	// S_BCNT0_I32_B64_si
    UINT64_C(3196062464),	// S_BCNT0_I32_B64_vi
    UINT64_C(0),
    UINT64_C(3196063488),	// S_BCNT1_I32_B32_si
    UINT64_C(3196062720),	// S_BCNT1_I32_B32_vi
    UINT64_C(0),
    UINT64_C(3196063744),	// S_BCNT1_I32_B64_si
    UINT64_C(3196062976),	// S_BCNT1_I32_B64_vi
    UINT64_C(0),
    UINT64_C(2483027968),	// S_BFE_I32_si
    UINT64_C(2466250752),	// S_BFE_I32_vi
    UINT64_C(0),
    UINT64_C(2499805184),	// S_BFE_I64_si
    UINT64_C(2483027968),	// S_BFE_I64_vi
    UINT64_C(0),
    UINT64_C(2474639360),	// S_BFE_U32_si
    UINT64_C(2457862144),	// S_BFE_U32_vi
    UINT64_C(0),
    UINT64_C(2491416576),	// S_BFE_U64_si
    UINT64_C(2474639360),	// S_BFE_U64_vi
    UINT64_C(0),
    UINT64_C(2449473536),	// S_BFM_B32_si
    UINT64_C(2432696320),	// S_BFM_B32_vi
    UINT64_C(0),
    UINT64_C(2457862144),	// S_BFM_B64_si
    UINT64_C(2441084928),	// S_BFM_B64_vi
    UINT64_C(0),
    UINT64_C(3196066560),	// S_BITSET0_B32_si
    UINT64_C(3196065792),	// S_BITSET0_B32_vi
    UINT64_C(0),
    UINT64_C(3196066816),	// S_BITSET0_B64_si
    UINT64_C(3196066048),	// S_BITSET0_B64_vi
    UINT64_C(0),
    UINT64_C(3196067072),	// S_BITSET1_B32_si
    UINT64_C(3196066304),	// S_BITSET1_B32_vi
    UINT64_C(0),
    UINT64_C(3196067328),	// S_BITSET1_B64_si
    UINT64_C(3196066560),	// S_BITSET1_B64_vi
    UINT64_C(3212967936),	// S_BRANCH
    UINT64_C(0),
    UINT64_C(3196062464),	// S_BREV_B32_si
    UINT64_C(3196061696),	// S_BREV_B32_vi
    UINT64_C(0),
    UINT64_C(3196062720),	// S_BREV_B64_si
    UINT64_C(3196061952),	// S_BREV_B64_vi
    UINT64_C(0),
    UINT64_C(3271557376),	// S_BUFFER_LOAD_DWORDX16_IMM_si
    UINT64_C(3224502272),	// S_BUFFER_LOAD_DWORDX16_IMM_vi
    UINT64_C(0),
    UINT64_C(3271557120),	// S_BUFFER_LOAD_DWORDX16_SGPR_si
    UINT64_C(3224371200),	// S_BUFFER_LOAD_DWORDX16_SGPR_vi
    UINT64_C(0),
    UINT64_C(3258974464),	// S_BUFFER_LOAD_DWORDX2_IMM_si
    UINT64_C(3223715840),	// S_BUFFER_LOAD_DWORDX2_IMM_vi
    UINT64_C(0),
    UINT64_C(3258974208),	// S_BUFFER_LOAD_DWORDX2_SGPR_si
    UINT64_C(3223584768),	// S_BUFFER_LOAD_DWORDX2_SGPR_vi
    UINT64_C(0),
    UINT64_C(3263168768),	// S_BUFFER_LOAD_DWORDX4_IMM_si
    UINT64_C(3223977984),	// S_BUFFER_LOAD_DWORDX4_IMM_vi
    UINT64_C(0),
    UINT64_C(3263168512),	// S_BUFFER_LOAD_DWORDX4_SGPR_si
    UINT64_C(3223846912),	// S_BUFFER_LOAD_DWORDX4_SGPR_vi
    UINT64_C(0),
    UINT64_C(3267363072),	// S_BUFFER_LOAD_DWORDX8_IMM_si
    UINT64_C(3224240128),	// S_BUFFER_LOAD_DWORDX8_IMM_vi
    UINT64_C(0),
    UINT64_C(3267362816),	// S_BUFFER_LOAD_DWORDX8_SGPR_si
    UINT64_C(3224109056),	// S_BUFFER_LOAD_DWORDX8_SGPR_vi
    UINT64_C(0),
    UINT64_C(3254780160),	// S_BUFFER_LOAD_DWORD_IMM_si
    UINT64_C(3223453696),	// S_BUFFER_LOAD_DWORD_IMM_vi
    UINT64_C(0),
    UINT64_C(3254779904),	// S_BUFFER_LOAD_DWORD_SGPR_si
    UINT64_C(3223322624),	// S_BUFFER_LOAD_DWORD_SGPR_vi
    UINT64_C(3213426688),	// S_CBRANCH_EXECNZ
    UINT64_C(3213361152),	// S_CBRANCH_EXECZ
    UINT64_C(0),
    UINT64_C(2508193792),	// S_CBRANCH_G_FORK_si
    UINT64_C(2491416576),	// S_CBRANCH_G_FORK_vi
    UINT64_C(0),
    UINT64_C(3095396352),	// S_CBRANCH_I_FORK_si
    UINT64_C(3087007744),	// S_CBRANCH_I_FORK_vi
    UINT64_C(0),
    UINT64_C(3196072448),	// S_CBRANCH_JOIN_si
    UINT64_C(3196071424),	// S_CBRANCH_JOIN_vi
    UINT64_C(3213099008),	// S_CBRANCH_SCC0
    UINT64_C(3213164544),	// S_CBRANCH_SCC1
    UINT64_C(3213295616),	// S_CBRANCH_VCCNZ
    UINT64_C(3213230080),	// S_CBRANCH_VCCZ
    UINT64_C(0),
    UINT64_C(2969567232),	// S_CMOVK_I32_si
    UINT64_C(2961178624),	// S_CMOVK_I32_vi
    UINT64_C(0),
    UINT64_C(3196060928),	// S_CMOV_B32_si
    UINT64_C(3196060160),	// S_CMOV_B32_vi
    UINT64_C(0),
    UINT64_C(3196061184),	// S_CMOV_B64_si
    UINT64_C(3196060416),	// S_CMOV_B64_vi
    UINT64_C(0),
    UINT64_C(2977955840),	// S_CMPK_EQ_I32_si
    UINT64_C(2969567232),	// S_CMPK_EQ_I32_vi
    UINT64_C(0),
    UINT64_C(3028287488),	// S_CMPK_EQ_U32_si
    UINT64_C(3019898880),	// S_CMPK_EQ_U32_vi
    UINT64_C(0),
    UINT64_C(3003121664),	// S_CMPK_GE_I32_si
    UINT64_C(2994733056),	// S_CMPK_GE_I32_vi
    UINT64_C(0),
    UINT64_C(3053453312),	// S_CMPK_GE_U32_si
    UINT64_C(3045064704),	// S_CMPK_GE_U32_vi
    UINT64_C(0),
    UINT64_C(2994733056),	// S_CMPK_GT_I32_si
    UINT64_C(2986344448),	// S_CMPK_GT_I32_vi
    UINT64_C(0),
    UINT64_C(3045064704),	// S_CMPK_GT_U32_si
    UINT64_C(3036676096),	// S_CMPK_GT_U32_vi
    UINT64_C(0),
    UINT64_C(3019898880),	// S_CMPK_LE_I32_si
    UINT64_C(3011510272),	// S_CMPK_LE_I32_vi
    UINT64_C(0),
    UINT64_C(3070230528),	// S_CMPK_LE_U32_si
    UINT64_C(3061841920),	// S_CMPK_LE_U32_vi
    UINT64_C(0),
    UINT64_C(2986344448),	// S_CMPK_LG_I32_si
    UINT64_C(2977955840),	// S_CMPK_LG_I32_vi
    UINT64_C(0),
    UINT64_C(3036676096),	// S_CMPK_LG_U32_si
    UINT64_C(3028287488),	// S_CMPK_LG_U32_vi
    UINT64_C(0),
    UINT64_C(3011510272),	// S_CMPK_LT_I32_si
    UINT64_C(3003121664),	// S_CMPK_LT_I32_vi
    UINT64_C(0),
    UINT64_C(3061841920),	// S_CMPK_LT_U32_si
    UINT64_C(3053453312),	// S_CMPK_LT_U32_vi
    UINT64_C(3204448256),	// S_CMP_EQ_I32
    UINT64_C(3204841472),	// S_CMP_EQ_U32
    UINT64_C(3204644864),	// S_CMP_GE_I32
    UINT64_C(3205038080),	// S_CMP_GE_U32
    UINT64_C(3204579328),	// S_CMP_GT_I32
    UINT64_C(3204972544),	// S_CMP_GT_U32
    UINT64_C(3204775936),	// S_CMP_LE_I32
    UINT64_C(3205169152),	// S_CMP_LE_U32
    UINT64_C(3204513792),	// S_CMP_LG_I32
    UINT64_C(3204907008),	// S_CMP_LG_U32
    UINT64_C(3204710400),	// S_CMP_LT_I32
    UINT64_C(3205103616),	// S_CMP_LT_U32
    UINT64_C(0),
    UINT64_C(2231369728),	// S_CSELECT_B32_si
    UINT64_C(2231369728),	// S_CSELECT_B32_vi
    UINT64_C(0),
    UINT64_C(2239758336),	// S_CSELECT_B64_si
    UINT64_C(2239758336),	// S_CSELECT_B64_vi
    UINT64_C(3214213120),	// S_DECPERFLEVEL
    UINT64_C(3212902400),	// S_ENDPGM
    UINT64_C(0),
    UINT64_C(3196064000),	// S_FF0_I32_B32_si
    UINT64_C(3196063232),	// S_FF0_I32_B32_vi
    UINT64_C(0),
    UINT64_C(3196064256),	// S_FF0_I32_B64_si
    UINT64_C(3196063488),	// S_FF0_I32_B64_vi
    UINT64_C(0),
    UINT64_C(3196064512),	// S_FF1_I32_B32_si
    UINT64_C(3196063744),	// S_FF1_I32_B32_vi
    UINT64_C(0),
    UINT64_C(3196064768),	// S_FF1_I32_B64_si
    UINT64_C(3196064000),	// S_FF1_I32_B64_vi
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3196065024),	// S_FLBIT_I32_B32_si
    UINT64_C(3196064256),	// S_FLBIT_I32_B32_vi
    UINT64_C(0),
    UINT64_C(3196065280),	// S_FLBIT_I32_B64_si
    UINT64_C(3196064512),	// S_FLBIT_I32_B64_vi
    UINT64_C(0),
    UINT64_C(3196065792),	// S_FLBIT_I32_I64_si
    UINT64_C(3196065024),	// S_FLBIT_I32_I64_vi
    UINT64_C(3196065536),	// S_FLBIT_I32_si
    UINT64_C(3196064768),	// S_FLBIT_I32_vi
    UINT64_C(0),
    UINT64_C(3196067584),	// S_GETPC_B64_si
    UINT64_C(3196066816),	// S_GETPC_B64_vi
    UINT64_C(0),
    UINT64_C(3103784960),	// S_GETREG_B32_si
    UINT64_C(3095396352),	// S_GETREG_B32_vi
    UINT64_C(3214082048),	// S_ICACHE_INV
    UINT64_C(3214147584),	// S_INCPERFLEVEL
    UINT64_C(0),
    UINT64_C(3238002944),	// S_LOAD_DWORDX16_IMM_si
    UINT64_C(3222405120),	// S_LOAD_DWORDX16_IMM_vi
    UINT64_C(0),
    UINT64_C(3238002688),	// S_LOAD_DWORDX16_SGPR_si
    UINT64_C(3222274048),	// S_LOAD_DWORDX16_SGPR_vi
    UINT64_C(0),
    UINT64_C(3225420032),	// S_LOAD_DWORDX2_IMM_si
    UINT64_C(3221618688),	// S_LOAD_DWORDX2_IMM_vi
    UINT64_C(0),
    UINT64_C(3225419776),	// S_LOAD_DWORDX2_SGPR_si
    UINT64_C(3221487616),	// S_LOAD_DWORDX2_SGPR_vi
    UINT64_C(0),
    UINT64_C(3229614336),	// S_LOAD_DWORDX4_IMM_si
    UINT64_C(3221880832),	// S_LOAD_DWORDX4_IMM_vi
    UINT64_C(0),
    UINT64_C(3229614080),	// S_LOAD_DWORDX4_SGPR_si
    UINT64_C(3221749760),	// S_LOAD_DWORDX4_SGPR_vi
    UINT64_C(0),
    UINT64_C(3233808640),	// S_LOAD_DWORDX8_IMM_si
    UINT64_C(3222142976),	// S_LOAD_DWORDX8_IMM_vi
    UINT64_C(0),
    UINT64_C(3233808384),	// S_LOAD_DWORDX8_SGPR_si
    UINT64_C(3222011904),	// S_LOAD_DWORDX8_SGPR_vi
    UINT64_C(0),
    UINT64_C(3221225728),	// S_LOAD_DWORD_IMM_si
    UINT64_C(3221356544),	// S_LOAD_DWORD_IMM_vi
    UINT64_C(0),
    UINT64_C(3221225472),	// S_LOAD_DWORD_SGPR_si
    UINT64_C(3221225472),	// S_LOAD_DWORD_SGPR_vi
    UINT64_C(0),
    UINT64_C(2399141888),	// S_LSHL_B32_si
    UINT64_C(2382364672),	// S_LSHL_B32_vi
    UINT64_C(0),
    UINT64_C(2407530496),	// S_LSHL_B64_si
    UINT64_C(2390753280),	// S_LSHL_B64_vi
    UINT64_C(0),
    UINT64_C(2415919104),	// S_LSHR_B32_si
    UINT64_C(2399141888),	// S_LSHR_B32_vi
    UINT64_C(0),
    UINT64_C(2424307712),	// S_LSHR_B64_si
    UINT64_C(2407530496),	// S_LSHR_B64_vi
    UINT64_C(0),
    UINT64_C(2214592512),	// S_MAX_I32_si
    UINT64_C(2214592512),	// S_MAX_I32_vi
    UINT64_C(0),
    UINT64_C(2222981120),	// S_MAX_U32_si
    UINT64_C(2222981120),	// S_MAX_U32_vi
    UINT64_C(0),
    UINT64_C(2197815296),	// S_MIN_I32_si
    UINT64_C(2197815296),	// S_MIN_I32_vi
    UINT64_C(0),
    UINT64_C(2206203904),	// S_MIN_U32_si
    UINT64_C(2206203904),	// S_MIN_U32_vi
    UINT64_C(0),
    UINT64_C(2952790016),	// S_MOVK_I32_si
    UINT64_C(2952790016),	// S_MOVK_I32_vi
    UINT64_C(0),
    UINT64_C(3196071936),	// S_MOVRELD_B32_si
    UINT64_C(3196070912),	// S_MOVRELD_B32_vi
    UINT64_C(0),
    UINT64_C(3196072192),	// S_MOVRELD_B64_si
    UINT64_C(3196071168),	// S_MOVRELD_B64_vi
    UINT64_C(0),
    UINT64_C(3196071424),	// S_MOVRELS_B32_si
    UINT64_C(3196070400),	// S_MOVRELS_B32_vi
    UINT64_C(0),
    UINT64_C(3196071680),	// S_MOVRELS_B64_si
    UINT64_C(3196070656),	// S_MOVRELS_B64_vi
    UINT64_C(0),
    UINT64_C(3196060416),	// S_MOV_B32_si
    UINT64_C(3196059648),	// S_MOV_B32_vi
    UINT64_C(0),
    UINT64_C(3196060672),	// S_MOV_B64_si
    UINT64_C(3196059904),	// S_MOV_B64_vi
    UINT64_C(0),
    UINT64_C(3196073216),	// S_MOV_FED_B32_si
    UINT64_C(3196072192),	// S_MOV_FED_B32_vi
    UINT64_C(0),
    UINT64_C(3196072704),	// S_MOV_REGRD_B32_si
    UINT64_C(3196071680),	// S_MOV_REGRD_B32_vi
    UINT64_C(0),
    UINT64_C(3087007744),	// S_MULK_I32_si
    UINT64_C(3078619136),	// S_MULK_I32_vi
    UINT64_C(0),
    UINT64_C(2466250752),	// S_MUL_I32_si
    UINT64_C(2449473536),	// S_MUL_I32_vi
    UINT64_C(0),
    UINT64_C(2348810240),	// S_NAND_B32_si
    UINT64_C(2332033024),	// S_NAND_B32_vi
    UINT64_C(0),
    UINT64_C(2357198848),	// S_NAND_B64_si
    UINT64_C(2340421632),	// S_NAND_B64_vi
    UINT64_C(0),
    UINT64_C(3196070144),	// S_NAND_SAVEEXEC_B64_si
    UINT64_C(3196069120),	// S_NAND_SAVEEXEC_B64_vi
    UINT64_C(3212836864),	// S_NOP
    UINT64_C(0),
    UINT64_C(2365587456),	// S_NOR_B32_si
    UINT64_C(2348810240),	// S_NOR_B32_vi
    UINT64_C(0),
    UINT64_C(2373976064),	// S_NOR_B64_si
    UINT64_C(2357198848),	// S_NOR_B64_vi
    UINT64_C(0),
    UINT64_C(3196070400),	// S_NOR_SAVEEXEC_B64_si
    UINT64_C(3196069376),	// S_NOR_SAVEEXEC_B64_vi
    UINT64_C(0),
    UINT64_C(3196061440),	// S_NOT_B32_si
    UINT64_C(3196060672),	// S_NOT_B32_vi
    UINT64_C(0),
    UINT64_C(3196061696),	// S_NOT_B64_si
    UINT64_C(3196060928),	// S_NOT_B64_vi
    UINT64_C(0),
    UINT64_C(2332033024),	// S_ORN2_B32_si
    UINT64_C(2315255808),	// S_ORN2_B32_vi
    UINT64_C(0),
    UINT64_C(2340421632),	// S_ORN2_B64_si
    UINT64_C(2323644416),	// S_ORN2_B64_vi
    UINT64_C(0),
    UINT64_C(3196069888),	// S_ORN2_SAVEEXEC_B64_si
    UINT64_C(3196068864),	// S_ORN2_SAVEEXEC_B64_vi
    UINT64_C(0),
    UINT64_C(2281701376),	// S_OR_B32_si
    UINT64_C(2264924160),	// S_OR_B32_vi
    UINT64_C(0),
    UINT64_C(2290089984),	// S_OR_B64_si
    UINT64_C(2273312768),	// S_OR_B64_vi
    UINT64_C(0),
    UINT64_C(3196069120),	// S_OR_SAVEEXEC_B64_si
    UINT64_C(3196068096),	// S_OR_SAVEEXEC_B64_vi
    UINT64_C(0),
    UINT64_C(3196070912),	// S_QUADMASK_B32_si
    UINT64_C(3196069888),	// S_QUADMASK_B32_vi
    UINT64_C(0),
    UINT64_C(3196071168),	// S_QUADMASK_B64_si
    UINT64_C(3196070144),	// S_QUADMASK_B64_vi
    UINT64_C(0),
    UINT64_C(3196068352),	// S_RFE_B64_si
    UINT64_C(3196067584),	// S_RFE_B64_vi
    UINT64_C(3213885440),	// S_SENDMSG
    UINT64_C(3213950976),	// S_SENDMSGHALT
    UINT64_C(3213688832),	// S_SETHALT
    UINT64_C(0),
    UINT64_C(3196067840),	// S_SETPC_B64_si
    UINT64_C(3196067072),	// S_SETPC_B64_vi
    UINT64_C(3213819904),	// S_SETPRIO
    UINT64_C(0),
    UINT64_C(3112173568),	// S_SETREG_B32_si
    UINT64_C(3103784960),	// S_SETREG_B32_vi
    UINT64_C(0),
    UINT64_C(3128950784),	// S_SETREG_IMM32_B32_si
    UINT64_C(3120562176),	// S_SETREG_IMM32_B32_vi
    UINT64_C(0),
    UINT64_C(3196066304),	// S_SEXT_I32_I16_si
    UINT64_C(3196065536),	// S_SEXT_I32_I16_vi
    UINT64_C(0),
    UINT64_C(3196066048),	// S_SEXT_I32_I8_si
    UINT64_C(3196065280),	// S_SEXT_I32_I8_vi
    UINT64_C(3213754368),	// S_SLEEP
    UINT64_C(0),
    UINT64_C(2189426688),	// S_SUBB_U32_si
    UINT64_C(2189426688),	// S_SUBB_U32_vi
    UINT64_C(0),
    UINT64_C(2172649472),	// S_SUB_I32_si
    UINT64_C(2172649472),	// S_SUB_I32_vi
    UINT64_C(0),
    UINT64_C(2155872256),	// S_SUB_U32_si
    UINT64_C(2155872256),	// S_SUB_U32_vi
    UINT64_C(0),
    UINT64_C(3196068096),	// S_SWAPPC_B64_si
    UINT64_C(3196067328),	// S_SWAPPC_B64_vi
    UINT64_C(3214016512),	// S_TRAP
    UINT64_C(3214278656),	// S_TTRACEDATA
    UINT64_C(3213623296),	// S_WAITCNT
    UINT64_C(0),
    UINT64_C(3196061952),	// S_WQM_B32_si
    UINT64_C(3196061184),	// S_WQM_B32_vi
    UINT64_C(0),
    UINT64_C(3196062208),	// S_WQM_B64_si
    UINT64_C(3196061440),	// S_WQM_B64_vi
    UINT64_C(0),
    UINT64_C(2382364672),	// S_XNOR_B32_si
    UINT64_C(2365587456),	// S_XNOR_B32_vi
    UINT64_C(0),
    UINT64_C(2390753280),	// S_XNOR_B64_si
    UINT64_C(2373976064),	// S_XNOR_B64_vi
    UINT64_C(0),
    UINT64_C(3196070656),	// S_XNOR_SAVEEXEC_B64_si
    UINT64_C(3196069632),	// S_XNOR_SAVEEXEC_B64_vi
    UINT64_C(0),
    UINT64_C(2298478592),	// S_XOR_B32_si
    UINT64_C(2281701376),	// S_XOR_B32_vi
    UINT64_C(0),
    UINT64_C(2306867200),	// S_XOR_B64_si
    UINT64_C(2290089984),	// S_XOR_B64_vi
    UINT64_C(0),
    UINT64_C(3196069376),	// S_XOR_SAVEEXEC_B64_si
    UINT64_C(3196068352),	// S_XOR_SAVEEXEC_B64_vi
    UINT64_C(0),
    UINT64_C(3892510720),	// TBUFFER_LOAD_FORMAT_XYZW_si
    UINT64_C(3892412416),	// TBUFFER_LOAD_FORMAT_XYZW_vi
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3892772864),	// TBUFFER_STORE_FORMAT_XYZW_si
    UINT64_C(3892543488),	// TBUFFER_STORE_FORMAT_XYZW_vi
    UINT64_C(3892707328),	// TBUFFER_STORE_FORMAT_XYZ_si
    UINT64_C(3892510720),	// TBUFFER_STORE_FORMAT_XYZ_vi
    UINT64_C(3892641792),	// TBUFFER_STORE_FORMAT_XY_si
    UINT64_C(3892477952),	// TBUFFER_STORE_FORMAT_XY_vi
    UINT64_C(3892576256),	// TBUFFER_STORE_FORMAT_X_si
    UINT64_C(3892445184),	// TBUFFER_STORE_FORMAT_X_vi
    UINT64_C(7),	// TEX_GET_GRADIENTS_H
    UINT64_C(8),	// TEX_GET_GRADIENTS_V
    UINT64_C(4),	// TEX_GET_TEXTURE_RESINFO
    UINT64_C(3),	// TEX_LD
    UINT64_C(35),	// TEX_LDPTR
    UINT64_C(16),	// TEX_SAMPLE
    UINT64_C(24),	// TEX_SAMPLE_C
    UINT64_C(28),	// TEX_SAMPLE_C_G
    UINT64_C(25),	// TEX_SAMPLE_C_L
    UINT64_C(26),	// TEX_SAMPLE_C_LB
    UINT64_C(20),	// TEX_SAMPLE_G
    UINT64_C(17),	// TEX_SAMPLE_L
    UINT64_C(18),	// TEX_SAMPLE_LB
    UINT64_C(11),	// TEX_SET_GRADIENTS_H
    UINT64_C(12),	// TEX_SET_GRADIENTS_V
    UINT64_C(16775081780284751936),	// TEX_VTX_CONSTBUF
    UINT64_C(9236056004066541632),	// TEX_VTX_TEXBUF
    UINT64_C(9345848836096),	// TRUNC
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(85761906966528),	// UINT_TO_FLT_eg
    UINT64_C(59923383713792),	// UINT_TO_FLT_r600
    UINT64_C(1769087820812517696),	// VTX_READ_GLOBAL_128_cm
    UINT64_C(1769087821886259520),	// VTX_READ_GLOBAL_128_eg
    UINT64_C(1251983104222953792),	// VTX_READ_GLOBAL_16_cm
    UINT64_C(1251983104357171520),	// VTX_READ_GLOBAL_16_eg
    UINT64_C(1396098292298809664),	// VTX_READ_GLOBAL_32_cm
    UINT64_C(1396098292567245120),	// VTX_READ_GLOBAL_32_eg
    UINT64_C(1684223115334254912),	// VTX_READ_GLOBAL_64_cm
    UINT64_C(1684223115871125824),	// VTX_READ_GLOBAL_64_eg
    UINT64_C(1179925510185025856),	// VTX_READ_GLOBAL_8_cm
    UINT64_C(1179925510252134720),	// VTX_READ_GLOBAL_8_eg
    UINT64_C(1769087820812517440),	// VTX_READ_PARAM_128_cm
    UINT64_C(1769087821886259264),	// VTX_READ_PARAM_128_eg
    UINT64_C(1251983104222953536),	// VTX_READ_PARAM_16_cm
    UINT64_C(1251983104357171264),	// VTX_READ_PARAM_16_eg
    UINT64_C(1396098292298809408),	// VTX_READ_PARAM_32_cm
    UINT64_C(1396098292567244864),	// VTX_READ_PARAM_32_eg
    UINT64_C(1684223115334254656),	// VTX_READ_PARAM_64_cm
    UINT64_C(1684223115871125568),	// VTX_READ_PARAM_64_eg
    UINT64_C(1179925510185025600),	// VTX_READ_PARAM_8_cm
    UINT64_C(1179925510252134464),	// VTX_READ_PARAM_8_eg
    UINT64_C(0),
    UINT64_C(1342177280),	// V_ADDC_U32_e32_si
    UINT64_C(939524096),	// V_ADDC_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3528485376),	// V_ADDC_U32_e64_si
    UINT64_C(3508300288),	// V_ADDC_U32_e64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_ADD_F16_e32_si
    UINT64_C(1040187392),	// V_ADD_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_ADD_F16_e64_si
    UINT64_C(3508469760),	// V_ADD_F16_e64_vi
    UINT64_C(0),
    UINT64_C(100663296),	// V_ADD_F32_e32_si
    UINT64_C(33554432),	// V_ADD_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3523608576),	// V_ADD_F32_e64_si
    UINT64_C(3506503680),	// V_ADD_F32_e64_vi
    UINT64_C(0),
    UINT64_C(3536322560),	// V_ADD_F64_si
    UINT64_C(3531603968),	// V_ADD_F64_vi
    UINT64_C(0),
    UINT64_C(1241513984),	// V_ADD_I32_e32_si
    UINT64_C(838860800),	// V_ADD_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3528092160),	// V_ADD_I32_e64_si
    UINT64_C(3508103680),	// V_ADD_I32_e64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_ADD_U16_e32_si
    UINT64_C(1275068416),	// V_ADD_U16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_ADD_U16_e64_si
    UINT64_C(3508928512),	// V_ADD_U16_e64_vi
    UINT64_C(0),
    UINT64_C(3533438976),	// V_ALIGNBIT_B32_si
    UINT64_C(3519938560),	// V_ALIGNBIT_B32_vi
    UINT64_C(0),
    UINT64_C(3533570048),	// V_ALIGNBYTE_B32_si
    UINT64_C(3520004096),	// V_ALIGNBYTE_B32_vi
    UINT64_C(0),
    UINT64_C(905969664),	// V_AND_B32_e32_si
    UINT64_C(637534208),	// V_AND_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3526754304),	// V_AND_B32_e64_si
    UINT64_C(3507683328),	// V_AND_B32_e64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_ASHRREV_B16_e32_si
    UINT64_C(1476395008),	// V_ASHRREV_B16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_ASHRREV_B16_e64_si
    UINT64_C(3509321728),	// V_ASHRREV_B16_e64_vi
    UINT64_C(0),
    UINT64_C(805306368),	// V_ASHRREV_I32_e32_si
    UINT64_C(570425344),	// V_ASHRREV_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3526361088),	// V_ASHRREV_I32_e64_si
    UINT64_C(3507552256),	// V_ASHRREV_I32_e64_vi
    UINT64_C(0),
    UINT64_C(3489660928),	// V_ASHRREV_I64_si
    UINT64_C(3532718080),	// V_ASHRREV_I64_vi
    UINT64_C(0),
    UINT64_C(771751936),	// V_ASHR_I32_e32_si
    UINT64_C(0),
    UINT64_C(3526230016),	// V_ASHR_I32_e64_si
    UINT64_C(0),
    UINT64_C(3536191488),	// V_ASHR_I64_si
    UINT64_C(3512926208),	// V_ASHR_I64_vi
    UINT64_C(0),
    UINT64_C(1140850688),	// V_BCNT_U32_B32_e32_si
    UINT64_C(0),
    UINT64_C(3527671808),	// V_BCNT_U32_B32_e64_si
    UINT64_C(3532324864),	// V_BCNT_U32_B32_e64_vi
    UINT64_C(0),
    UINT64_C(3532783616),	// V_BFE_I32_si
    UINT64_C(3519610880),	// V_BFE_I32_vi
    UINT64_C(0),
    UINT64_C(3532652544),	// V_BFE_U32_si
    UINT64_C(3519545344),	// V_BFE_U32_vi
    UINT64_C(0),
    UINT64_C(3532914688),	// V_BFI_B32_si
    UINT64_C(3519676416),	// V_BFI_B32_vi
    UINT64_C(0),
    UINT64_C(1006632960),	// V_BFM_B32_e32_si
    UINT64_C(0),
    UINT64_C(3527147520),	// V_BFM_B32_e64_si
    UINT64_C(3532849152),	// V_BFM_B32_e64_vi
    UINT64_C(0),
    UINT64_C(2113957888),	// V_BFREV_B32_e32_si
    UINT64_C(2113951744),	// V_BFREV_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3547332608),	// V_BFREV_B32_e64_si
    UINT64_C(3513516032),	// V_BFREV_B32_e64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_CEIL_F16_e32_si
    UINT64_C(2113964544),	// V_CEIL_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_CEIL_F16_e64_si
    UINT64_C(3515154432),	// V_CEIL_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113946624),	// V_CEIL_F32_e32_si
    UINT64_C(2113944064),	// V_CEIL_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3544449024),	// V_CEIL_F32_e64_si
    UINT64_C(3512532992),	// V_CEIL_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113941504),	// V_CEIL_F64_e32_si
    UINT64_C(2113941504),	// V_CEIL_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3543138304),	// V_CEIL_F64_e64_si
    UINT64_C(3512205312),	// V_CEIL_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2113962496),	// V_CLREXCP_si
    UINT64_C(2113956352),	// V_CLREXCP_vi
    UINT64_C(0),
    UINT64_C(2091122688),	// V_CMPSX_EQ_F32_e32_si
    UINT64_C(2099511296),	// V_CMPSX_EQ_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3500408832),	// V_CMPSX_EQ_F32_e64_si
    UINT64_C(3499229184),	// V_CMPSX_EQ_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2095316992),	// V_CMPSX_EQ_F64_e32_si
    UINT64_C(2103705600),	// V_CMPSX_EQ_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3504603136),	// V_CMPSX_EQ_F64_e64_si
    UINT64_C(3501326336),	// V_CMPSX_EQ_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2090860544),	// V_CMPSX_F_F32_e32_si
    UINT64_C(2099249152),	// V_CMPSX_F_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3500146688),	// V_CMPSX_F_F32_e64_si
    UINT64_C(3499098112),	// V_CMPSX_F_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2095054848),	// V_CMPSX_F_F64_e32_si
    UINT64_C(2103443456),	// V_CMPSX_F_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3504340992),	// V_CMPSX_F_F64_e64_si
    UINT64_C(3501195264),	// V_CMPSX_F_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2091646976),	// V_CMPSX_GE_F32_e32_si
    UINT64_C(2100035584),	// V_CMPSX_GE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3500933120),	// V_CMPSX_GE_F32_e64_si
    UINT64_C(3499491328),	// V_CMPSX_GE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2095841280),	// V_CMPSX_GE_F64_e32_si
    UINT64_C(2104229888),	// V_CMPSX_GE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3505127424),	// V_CMPSX_GE_F64_e64_si
    UINT64_C(3501588480),	// V_CMPSX_GE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2091384832),	// V_CMPSX_GT_F32_e32_si
    UINT64_C(2099773440),	// V_CMPSX_GT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3500670976),	// V_CMPSX_GT_F32_e64_si
    UINT64_C(3499360256),	// V_CMPSX_GT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2095579136),	// V_CMPSX_GT_F64_e32_si
    UINT64_C(2103967744),	// V_CMPSX_GT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3504865280),	// V_CMPSX_GT_F64_e64_si
    UINT64_C(3501457408),	// V_CMPSX_GT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2091253760),	// V_CMPSX_LE_F32_e32_si
    UINT64_C(2099642368),	// V_CMPSX_LE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3500539904),	// V_CMPSX_LE_F32_e64_si
    UINT64_C(3499294720),	// V_CMPSX_LE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2095448064),	// V_CMPSX_LE_F64_e32_si
    UINT64_C(2103836672),	// V_CMPSX_LE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3504734208),	// V_CMPSX_LE_F64_e64_si
    UINT64_C(3501391872),	// V_CMPSX_LE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2091515904),	// V_CMPSX_LG_F32_e32_si
    UINT64_C(2099904512),	// V_CMPSX_LG_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3500802048),	// V_CMPSX_LG_F32_e64_si
    UINT64_C(3499425792),	// V_CMPSX_LG_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2095710208),	// V_CMPSX_LG_F64_e32_si
    UINT64_C(2104098816),	// V_CMPSX_LG_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3504996352),	// V_CMPSX_LG_F64_e64_si
    UINT64_C(3501522944),	// V_CMPSX_LG_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2090991616),	// V_CMPSX_LT_F32_e32_si
    UINT64_C(2099380224),	// V_CMPSX_LT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3500277760),	// V_CMPSX_LT_F32_e64_si
    UINT64_C(3499163648),	// V_CMPSX_LT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2095185920),	// V_CMPSX_LT_F64_e32_si
    UINT64_C(2103574528),	// V_CMPSX_LT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3504472064),	// V_CMPSX_LT_F64_e64_si
    UINT64_C(3501260800),	// V_CMPSX_LT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2092564480),	// V_CMPSX_NEQ_F32_e32_si
    UINT64_C(2100953088),	// V_CMPSX_NEQ_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3501850624),	// V_CMPSX_NEQ_F32_e64_si
    UINT64_C(3499950080),	// V_CMPSX_NEQ_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2096758784),	// V_CMPSX_NEQ_F64_e32_si
    UINT64_C(2105147392),	// V_CMPSX_NEQ_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3506044928),	// V_CMPSX_NEQ_F64_e64_si
    UINT64_C(3502047232),	// V_CMPSX_NEQ_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2092040192),	// V_CMPSX_NGE_F32_e32_si
    UINT64_C(2100428800),	// V_CMPSX_NGE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3501326336),	// V_CMPSX_NGE_F32_e64_si
    UINT64_C(3499687936),	// V_CMPSX_NGE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2096234496),	// V_CMPSX_NGE_F64_e32_si
    UINT64_C(2104623104),	// V_CMPSX_NGE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3505520640),	// V_CMPSX_NGE_F64_e64_si
    UINT64_C(3501785088),	// V_CMPSX_NGE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2092302336),	// V_CMPSX_NGT_F32_e32_si
    UINT64_C(2100690944),	// V_CMPSX_NGT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3501588480),	// V_CMPSX_NGT_F32_e64_si
    UINT64_C(3499819008),	// V_CMPSX_NGT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2096496640),	// V_CMPSX_NGT_F64_e32_si
    UINT64_C(2104885248),	// V_CMPSX_NGT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3505782784),	// V_CMPSX_NGT_F64_e64_si
    UINT64_C(3501916160),	// V_CMPSX_NGT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2092433408),	// V_CMPSX_NLE_F32_e32_si
    UINT64_C(2100822016),	// V_CMPSX_NLE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3501719552),	// V_CMPSX_NLE_F32_e64_si
    UINT64_C(3499884544),	// V_CMPSX_NLE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2096627712),	// V_CMPSX_NLE_F64_e32_si
    UINT64_C(2105016320),	// V_CMPSX_NLE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3505913856),	// V_CMPSX_NLE_F64_e64_si
    UINT64_C(3501981696),	// V_CMPSX_NLE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2092171264),	// V_CMPSX_NLG_F32_e32_si
    UINT64_C(2100559872),	// V_CMPSX_NLG_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3501457408),	// V_CMPSX_NLG_F32_e64_si
    UINT64_C(3499753472),	// V_CMPSX_NLG_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2096365568),	// V_CMPSX_NLG_F64_e32_si
    UINT64_C(2104754176),	// V_CMPSX_NLG_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3505651712),	// V_CMPSX_NLG_F64_e64_si
    UINT64_C(3501850624),	// V_CMPSX_NLG_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2092695552),	// V_CMPSX_NLT_F32_e32_si
    UINT64_C(2101084160),	// V_CMPSX_NLT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3501981696),	// V_CMPSX_NLT_F32_e64_si
    UINT64_C(3500015616),	// V_CMPSX_NLT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2096889856),	// V_CMPSX_NLT_F64_e32_si
    UINT64_C(2105278464),	// V_CMPSX_NLT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3506176000),	// V_CMPSX_NLT_F64_e64_si
    UINT64_C(3502112768),	// V_CMPSX_NLT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2091778048),	// V_CMPSX_O_F32_e32_si
    UINT64_C(2100166656),	// V_CMPSX_O_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3501064192),	// V_CMPSX_O_F32_e64_si
    UINT64_C(3499556864),	// V_CMPSX_O_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2095972352),	// V_CMPSX_O_F64_e32_si
    UINT64_C(2104360960),	// V_CMPSX_O_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3505258496),	// V_CMPSX_O_F64_e64_si
    UINT64_C(3501654016),	// V_CMPSX_O_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2092826624),	// V_CMPSX_TRU_F32_e32_si
    UINT64_C(2101215232),	// V_CMPSX_TRU_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3502112768),	// V_CMPSX_TRU_F32_e64_si
    UINT64_C(3500081152),	// V_CMPSX_TRU_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2097020928),	// V_CMPSX_TRU_F64_e32_si
    UINT64_C(2105409536),	// V_CMPSX_TRU_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3506307072),	// V_CMPSX_TRU_F64_e64_si
    UINT64_C(3502178304),	// V_CMPSX_TRU_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2091909120),	// V_CMPSX_U_F32_e32_si
    UINT64_C(2100297728),	// V_CMPSX_U_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3501195264),	// V_CMPSX_U_F32_e64_si
    UINT64_C(3499622400),	// V_CMPSX_U_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2096103424),	// V_CMPSX_U_F64_e32_si
    UINT64_C(2104492032),	// V_CMPSX_U_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3505389568),	// V_CMPSX_U_F64_e64_si
    UINT64_C(3501719552),	// V_CMPSX_U_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2089025536),	// V_CMPS_EQ_F32_e32_si
    UINT64_C(2097414144),	// V_CMPS_EQ_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3498311680),	// V_CMPS_EQ_F32_e64_si
    UINT64_C(3498180608),	// V_CMPS_EQ_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2093219840),	// V_CMPS_EQ_F64_e32_si
    UINT64_C(2101608448),	// V_CMPS_EQ_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3502505984),	// V_CMPS_EQ_F64_e64_si
    UINT64_C(3500277760),	// V_CMPS_EQ_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2088763392),	// V_CMPS_F_F32_e32_si
    UINT64_C(2097152000),	// V_CMPS_F_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3498049536),	// V_CMPS_F_F32_e64_si
    UINT64_C(3498049536),	// V_CMPS_F_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2092957696),	// V_CMPS_F_F64_e32_si
    UINT64_C(2101346304),	// V_CMPS_F_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3502243840),	// V_CMPS_F_F64_e64_si
    UINT64_C(3500146688),	// V_CMPS_F_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2089549824),	// V_CMPS_GE_F32_e32_si
    UINT64_C(2097938432),	// V_CMPS_GE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3498835968),	// V_CMPS_GE_F32_e64_si
    UINT64_C(3498442752),	// V_CMPS_GE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2093744128),	// V_CMPS_GE_F64_e32_si
    UINT64_C(2102132736),	// V_CMPS_GE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3503030272),	// V_CMPS_GE_F64_e64_si
    UINT64_C(3500539904),	// V_CMPS_GE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2089287680),	// V_CMPS_GT_F32_e32_si
    UINT64_C(2097676288),	// V_CMPS_GT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3498573824),	// V_CMPS_GT_F32_e64_si
    UINT64_C(3498311680),	// V_CMPS_GT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2093481984),	// V_CMPS_GT_F64_e32_si
    UINT64_C(2101870592),	// V_CMPS_GT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3502768128),	// V_CMPS_GT_F64_e64_si
    UINT64_C(3500408832),	// V_CMPS_GT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2089156608),	// V_CMPS_LE_F32_e32_si
    UINT64_C(2097545216),	// V_CMPS_LE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3498442752),	// V_CMPS_LE_F32_e64_si
    UINT64_C(3498246144),	// V_CMPS_LE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2093350912),	// V_CMPS_LE_F64_e32_si
    UINT64_C(2101739520),	// V_CMPS_LE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3502637056),	// V_CMPS_LE_F64_e64_si
    UINT64_C(3500343296),	// V_CMPS_LE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2089418752),	// V_CMPS_LG_F32_e32_si
    UINT64_C(2097807360),	// V_CMPS_LG_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3498704896),	// V_CMPS_LG_F32_e64_si
    UINT64_C(3498377216),	// V_CMPS_LG_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2093613056),	// V_CMPS_LG_F64_e32_si
    UINT64_C(2102001664),	// V_CMPS_LG_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3502899200),	// V_CMPS_LG_F64_e64_si
    UINT64_C(3500474368),	// V_CMPS_LG_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2088894464),	// V_CMPS_LT_F32_e32_si
    UINT64_C(2097283072),	// V_CMPS_LT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3498180608),	// V_CMPS_LT_F32_e64_si
    UINT64_C(3498115072),	// V_CMPS_LT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2093088768),	// V_CMPS_LT_F64_e32_si
    UINT64_C(2101477376),	// V_CMPS_LT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3502374912),	// V_CMPS_LT_F64_e64_si
    UINT64_C(3500212224),	// V_CMPS_LT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2090467328),	// V_CMPS_NEQ_F32_e32_si
    UINT64_C(2098855936),	// V_CMPS_NEQ_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3499753472),	// V_CMPS_NEQ_F32_e64_si
    UINT64_C(3498901504),	// V_CMPS_NEQ_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2094661632),	// V_CMPS_NEQ_F64_e32_si
    UINT64_C(2103050240),	// V_CMPS_NEQ_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3503947776),	// V_CMPS_NEQ_F64_e64_si
    UINT64_C(3500998656),	// V_CMPS_NEQ_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2089943040),	// V_CMPS_NGE_F32_e32_si
    UINT64_C(2098331648),	// V_CMPS_NGE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3499229184),	// V_CMPS_NGE_F32_e64_si
    UINT64_C(3498639360),	// V_CMPS_NGE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2094137344),	// V_CMPS_NGE_F64_e32_si
    UINT64_C(2102525952),	// V_CMPS_NGE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3503423488),	// V_CMPS_NGE_F64_e64_si
    UINT64_C(3500736512),	// V_CMPS_NGE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2090205184),	// V_CMPS_NGT_F32_e32_si
    UINT64_C(2098593792),	// V_CMPS_NGT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3499491328),	// V_CMPS_NGT_F32_e64_si
    UINT64_C(3498770432),	// V_CMPS_NGT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2094399488),	// V_CMPS_NGT_F64_e32_si
    UINT64_C(2102788096),	// V_CMPS_NGT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3503685632),	// V_CMPS_NGT_F64_e64_si
    UINT64_C(3500867584),	// V_CMPS_NGT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2090336256),	// V_CMPS_NLE_F32_e32_si
    UINT64_C(2098724864),	// V_CMPS_NLE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3499622400),	// V_CMPS_NLE_F32_e64_si
    UINT64_C(3498835968),	// V_CMPS_NLE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2094530560),	// V_CMPS_NLE_F64_e32_si
    UINT64_C(2102919168),	// V_CMPS_NLE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3503816704),	// V_CMPS_NLE_F64_e64_si
    UINT64_C(3500933120),	// V_CMPS_NLE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2090074112),	// V_CMPS_NLG_F32_e32_si
    UINT64_C(2098462720),	// V_CMPS_NLG_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3499360256),	// V_CMPS_NLG_F32_e64_si
    UINT64_C(3498704896),	// V_CMPS_NLG_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2094268416),	// V_CMPS_NLG_F64_e32_si
    UINT64_C(2102657024),	// V_CMPS_NLG_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3503554560),	// V_CMPS_NLG_F64_e64_si
    UINT64_C(3500802048),	// V_CMPS_NLG_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2090598400),	// V_CMPS_NLT_F32_e32_si
    UINT64_C(2098987008),	// V_CMPS_NLT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3499884544),	// V_CMPS_NLT_F32_e64_si
    UINT64_C(3498967040),	// V_CMPS_NLT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2094792704),	// V_CMPS_NLT_F64_e32_si
    UINT64_C(2103181312),	// V_CMPS_NLT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3504078848),	// V_CMPS_NLT_F64_e64_si
    UINT64_C(3501064192),	// V_CMPS_NLT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2089680896),	// V_CMPS_O_F32_e32_si
    UINT64_C(2098069504),	// V_CMPS_O_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3498967040),	// V_CMPS_O_F32_e64_si
    UINT64_C(3498508288),	// V_CMPS_O_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2093875200),	// V_CMPS_O_F64_e32_si
    UINT64_C(2102263808),	// V_CMPS_O_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3503161344),	// V_CMPS_O_F64_e64_si
    UINT64_C(3500605440),	// V_CMPS_O_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2090729472),	// V_CMPS_TRU_F32_e32_si
    UINT64_C(2099118080),	// V_CMPS_TRU_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3500015616),	// V_CMPS_TRU_F32_e64_si
    UINT64_C(3499032576),	// V_CMPS_TRU_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2094923776),	// V_CMPS_TRU_F64_e32_si
    UINT64_C(2103312384),	// V_CMPS_TRU_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3504209920),	// V_CMPS_TRU_F64_e64_si
    UINT64_C(3501129728),	// V_CMPS_TRU_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2089811968),	// V_CMPS_U_F32_e32_si
    UINT64_C(2098200576),	// V_CMPS_U_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3499098112),	// V_CMPS_U_F32_e64_si
    UINT64_C(3498573824),	// V_CMPS_U_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2094006272),	// V_CMPS_U_F64_e32_si
    UINT64_C(2102394880),	// V_CMPS_U_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3503292416),	// V_CMPS_U_F64_e64_si
    UINT64_C(3500670976),	// V_CMPS_U_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2100297728),	// V_CMPX_CLASS_F32_e32_si
    UINT64_C(2082603008),	// V_CMPX_CLASS_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3509583872),	// V_CMPX_CLASS_F32_e64_si
    UINT64_C(3490775040),	// V_CMPX_CLASS_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2104492032),	// V_CMPX_CLASS_F64_e32_si
    UINT64_C(2082865152),	// V_CMPX_CLASS_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3513778176),	// V_CMPX_CLASS_F64_e64_si
    UINT64_C(3490906112),	// V_CMPX_CLASS_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2082734080),	// V_CMPX_EQ_F32_e32_si
    UINT64_C(2091122688),	// V_CMPX_EQ_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3492020224),	// V_CMPX_EQ_F32_e64_si
    UINT64_C(3495034880),	// V_CMPX_EQ_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2086928384),	// V_CMPX_EQ_F64_e32_si
    UINT64_C(2095316992),	// V_CMPX_EQ_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3496214528),	// V_CMPX_EQ_F64_e64_si
    UINT64_C(3497132032),	// V_CMPX_EQ_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2099511296),	// V_CMPX_EQ_I32_e32_si
    UINT64_C(2107899904),	// V_CMPX_EQ_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3508797440),	// V_CMPX_EQ_I32_e64_si
    UINT64_C(3503423488),	// V_CMPX_EQ_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2103705600),	// V_CMPX_EQ_I64_e32_si
    UINT64_C(2112094208),	// V_CMPX_EQ_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3512991744),	// V_CMPX_EQ_I64_e64_si
    UINT64_C(3505520640),	// V_CMPX_EQ_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2107899904),	// V_CMPX_EQ_U32_e32_si
    UINT64_C(2108948480),	// V_CMPX_EQ_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3517186048),	// V_CMPX_EQ_U32_e64_si
    UINT64_C(3503947776),	// V_CMPX_EQ_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2112094208),	// V_CMPX_EQ_U64_e32_si
    UINT64_C(2113142784),	// V_CMPX_EQ_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3521380352),	// V_CMPX_EQ_U64_e64_si
    UINT64_C(3506044928),	// V_CMPX_EQ_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2082471936),	// V_CMPX_F_F32_e32_si
    UINT64_C(2090860544),	// V_CMPX_F_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3491758080),	// V_CMPX_F_F32_e64_si
    UINT64_C(3494903808),	// V_CMPX_F_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2086666240),	// V_CMPX_F_F64_e32_si
    UINT64_C(2095054848),	// V_CMPX_F_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3495952384),	// V_CMPX_F_F64_e64_si
    UINT64_C(3497000960),	// V_CMPX_F_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2099249152),	// V_CMPX_F_I32_e32_si
    UINT64_C(2107637760),	// V_CMPX_F_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3508535296),	// V_CMPX_F_I32_e64_si
    UINT64_C(3503292416),	// V_CMPX_F_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2103443456),	// V_CMPX_F_I64_e32_si
    UINT64_C(2111832064),	// V_CMPX_F_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3512729600),	// V_CMPX_F_I64_e64_si
    UINT64_C(3505389568),	// V_CMPX_F_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2107637760),	// V_CMPX_F_U32_e32_si
    UINT64_C(2108686336),	// V_CMPX_F_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3516923904),	// V_CMPX_F_U32_e64_si
    UINT64_C(3503816704),	// V_CMPX_F_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2111832064),	// V_CMPX_F_U64_e32_si
    UINT64_C(2112880640),	// V_CMPX_F_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3521118208),	// V_CMPX_F_U64_e64_si
    UINT64_C(3505913856),	// V_CMPX_F_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2083258368),	// V_CMPX_GE_F32_e32_si
    UINT64_C(2091646976),	// V_CMPX_GE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3492544512),	// V_CMPX_GE_F32_e64_si
    UINT64_C(3495297024),	// V_CMPX_GE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2087452672),	// V_CMPX_GE_F64_e32_si
    UINT64_C(2095841280),	// V_CMPX_GE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3496738816),	// V_CMPX_GE_F64_e64_si
    UINT64_C(3497394176),	// V_CMPX_GE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2100035584),	// V_CMPX_GE_I32_e32_si
    UINT64_C(2108424192),	// V_CMPX_GE_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3509321728),	// V_CMPX_GE_I32_e64_si
    UINT64_C(3503685632),	// V_CMPX_GE_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2104229888),	// V_CMPX_GE_I64_e32_si
    UINT64_C(2112618496),	// V_CMPX_GE_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3513516032),	// V_CMPX_GE_I64_e64_si
    UINT64_C(3505782784),	// V_CMPX_GE_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2108424192),	// V_CMPX_GE_U32_e32_si
    UINT64_C(2109472768),	// V_CMPX_GE_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3517710336),	// V_CMPX_GE_U32_e64_si
    UINT64_C(3504209920),	// V_CMPX_GE_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2112618496),	// V_CMPX_GE_U64_e32_si
    UINT64_C(2113667072),	// V_CMPX_GE_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3521904640),	// V_CMPX_GE_U64_e64_si
    UINT64_C(3506307072),	// V_CMPX_GE_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2082996224),	// V_CMPX_GT_F32_e32_si
    UINT64_C(2091384832),	// V_CMPX_GT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3492282368),	// V_CMPX_GT_F32_e64_si
    UINT64_C(3495165952),	// V_CMPX_GT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2087190528),	// V_CMPX_GT_F64_e32_si
    UINT64_C(2095579136),	// V_CMPX_GT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3496476672),	// V_CMPX_GT_F64_e64_si
    UINT64_C(3497263104),	// V_CMPX_GT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2099773440),	// V_CMPX_GT_I32_e32_si
    UINT64_C(2108162048),	// V_CMPX_GT_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3509059584),	// V_CMPX_GT_I32_e64_si
    UINT64_C(3503554560),	// V_CMPX_GT_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2103967744),	// V_CMPX_GT_I64_e32_si
    UINT64_C(2112356352),	// V_CMPX_GT_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3513253888),	// V_CMPX_GT_I64_e64_si
    UINT64_C(3505651712),	// V_CMPX_GT_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2108162048),	// V_CMPX_GT_U32_e32_si
    UINT64_C(2109210624),	// V_CMPX_GT_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3517448192),	// V_CMPX_GT_U32_e64_si
    UINT64_C(3504078848),	// V_CMPX_GT_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2112356352),	// V_CMPX_GT_U64_e32_si
    UINT64_C(2113404928),	// V_CMPX_GT_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3521642496),	// V_CMPX_GT_U64_e64_si
    UINT64_C(3506176000),	// V_CMPX_GT_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2082865152),	// V_CMPX_LE_F32_e32_si
    UINT64_C(2091253760),	// V_CMPX_LE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3492151296),	// V_CMPX_LE_F32_e64_si
    UINT64_C(3495100416),	// V_CMPX_LE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2087059456),	// V_CMPX_LE_F64_e32_si
    UINT64_C(2095448064),	// V_CMPX_LE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3496345600),	// V_CMPX_LE_F64_e64_si
    UINT64_C(3497197568),	// V_CMPX_LE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2099642368),	// V_CMPX_LE_I32_e32_si
    UINT64_C(2108030976),	// V_CMPX_LE_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3508928512),	// V_CMPX_LE_I32_e64_si
    UINT64_C(3503489024),	// V_CMPX_LE_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2103836672),	// V_CMPX_LE_I64_e32_si
    UINT64_C(2112225280),	// V_CMPX_LE_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3513122816),	// V_CMPX_LE_I64_e64_si
    UINT64_C(3505586176),	// V_CMPX_LE_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2108030976),	// V_CMPX_LE_U32_e32_si
    UINT64_C(2109079552),	// V_CMPX_LE_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3517317120),	// V_CMPX_LE_U32_e64_si
    UINT64_C(3504013312),	// V_CMPX_LE_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2112225280),	// V_CMPX_LE_U64_e32_si
    UINT64_C(2113273856),	// V_CMPX_LE_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3521511424),	// V_CMPX_LE_U64_e64_si
    UINT64_C(3506110464),	// V_CMPX_LE_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2083127296),	// V_CMPX_LG_F32_e32_si
    UINT64_C(2091515904),	// V_CMPX_LG_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3492413440),	// V_CMPX_LG_F32_e64_si
    UINT64_C(3495231488),	// V_CMPX_LG_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2087321600),	// V_CMPX_LG_F64_e32_si
    UINT64_C(2095710208),	// V_CMPX_LG_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3496607744),	// V_CMPX_LG_F64_e64_si
    UINT64_C(3497328640),	// V_CMPX_LG_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2082603008),	// V_CMPX_LT_F32_e32_si
    UINT64_C(2090991616),	// V_CMPX_LT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3491889152),	// V_CMPX_LT_F32_e64_si
    UINT64_C(3494969344),	// V_CMPX_LT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2086797312),	// V_CMPX_LT_F64_e32_si
    UINT64_C(2095185920),	// V_CMPX_LT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3496083456),	// V_CMPX_LT_F64_e64_si
    UINT64_C(3497066496),	// V_CMPX_LT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2099380224),	// V_CMPX_LT_I32_e32_si
    UINT64_C(2107768832),	// V_CMPX_LT_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3508666368),	// V_CMPX_LT_I32_e64_si
    UINT64_C(3503357952),	// V_CMPX_LT_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2103574528),	// V_CMPX_LT_I64_e32_si
    UINT64_C(2111963136),	// V_CMPX_LT_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3512860672),	// V_CMPX_LT_I64_e64_si
    UINT64_C(3505455104),	// V_CMPX_LT_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2107768832),	// V_CMPX_LT_U32_e32_si
    UINT64_C(2108817408),	// V_CMPX_LT_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3517054976),	// V_CMPX_LT_U32_e64_si
    UINT64_C(3503882240),	// V_CMPX_LT_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2111963136),	// V_CMPX_LT_U64_e32_si
    UINT64_C(2113011712),	// V_CMPX_LT_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3521249280),	// V_CMPX_LT_U64_e64_si
    UINT64_C(3505979392),	// V_CMPX_LT_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2084175872),	// V_CMPX_NEQ_F32_e32_si
    UINT64_C(2092564480),	// V_CMPX_NEQ_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3493462016),	// V_CMPX_NEQ_F32_e64_si
    UINT64_C(3495755776),	// V_CMPX_NEQ_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2088370176),	// V_CMPX_NEQ_F64_e32_si
    UINT64_C(2096758784),	// V_CMPX_NEQ_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3497656320),	// V_CMPX_NEQ_F64_e64_si
    UINT64_C(3497852928),	// V_CMPX_NEQ_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2099904512),	// V_CMPX_NE_I32_e32_si
    UINT64_C(2108293120),	// V_CMPX_NE_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3509190656),	// V_CMPX_NE_I32_e64_si
    UINT64_C(3503620096),	// V_CMPX_NE_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2104098816),	// V_CMPX_NE_I64_e32_si
    UINT64_C(2112487424),	// V_CMPX_NE_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3513384960),	// V_CMPX_NE_I64_e64_si
    UINT64_C(3505717248),	// V_CMPX_NE_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2108293120),	// V_CMPX_NE_U32_e32_si
    UINT64_C(2109341696),	// V_CMPX_NE_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3517579264),	// V_CMPX_NE_U32_e64_si
    UINT64_C(3504144384),	// V_CMPX_NE_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2112487424),	// V_CMPX_NE_U64_e32_si
    UINT64_C(2113536000),	// V_CMPX_NE_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3521773568),	// V_CMPX_NE_U64_e64_si
    UINT64_C(3506241536),	// V_CMPX_NE_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2083651584),	// V_CMPX_NGE_F32_e32_si
    UINT64_C(2092040192),	// V_CMPX_NGE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3492937728),	// V_CMPX_NGE_F32_e64_si
    UINT64_C(3495493632),	// V_CMPX_NGE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2087845888),	// V_CMPX_NGE_F64_e32_si
    UINT64_C(2096234496),	// V_CMPX_NGE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3497132032),	// V_CMPX_NGE_F64_e64_si
    UINT64_C(3497590784),	// V_CMPX_NGE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2083913728),	// V_CMPX_NGT_F32_e32_si
    UINT64_C(2092302336),	// V_CMPX_NGT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3493199872),	// V_CMPX_NGT_F32_e64_si
    UINT64_C(3495624704),	// V_CMPX_NGT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2088108032),	// V_CMPX_NGT_F64_e32_si
    UINT64_C(2096496640),	// V_CMPX_NGT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3497394176),	// V_CMPX_NGT_F64_e64_si
    UINT64_C(3497721856),	// V_CMPX_NGT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2084044800),	// V_CMPX_NLE_F32_e32_si
    UINT64_C(2092433408),	// V_CMPX_NLE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3493330944),	// V_CMPX_NLE_F32_e64_si
    UINT64_C(3495690240),	// V_CMPX_NLE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2088239104),	// V_CMPX_NLE_F64_e32_si
    UINT64_C(2096627712),	// V_CMPX_NLE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3497525248),	// V_CMPX_NLE_F64_e64_si
    UINT64_C(3497787392),	// V_CMPX_NLE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2083782656),	// V_CMPX_NLG_F32_e32_si
    UINT64_C(2092171264),	// V_CMPX_NLG_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3493068800),	// V_CMPX_NLG_F32_e64_si
    UINT64_C(3495559168),	// V_CMPX_NLG_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2087976960),	// V_CMPX_NLG_F64_e32_si
    UINT64_C(2096365568),	// V_CMPX_NLG_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3497263104),	// V_CMPX_NLG_F64_e64_si
    UINT64_C(3497656320),	// V_CMPX_NLG_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2084306944),	// V_CMPX_NLT_F32_e32_si
    UINT64_C(2092695552),	// V_CMPX_NLT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3493593088),	// V_CMPX_NLT_F32_e64_si
    UINT64_C(3495821312),	// V_CMPX_NLT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2088501248),	// V_CMPX_NLT_F64_e32_si
    UINT64_C(2096889856),	// V_CMPX_NLT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3497787392),	// V_CMPX_NLT_F64_e64_si
    UINT64_C(3497918464),	// V_CMPX_NLT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2083389440),	// V_CMPX_O_F32_e32_si
    UINT64_C(2091778048),	// V_CMPX_O_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3492675584),	// V_CMPX_O_F32_e64_si
    UINT64_C(3495362560),	// V_CMPX_O_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2087583744),	// V_CMPX_O_F64_e32_si
    UINT64_C(2095972352),	// V_CMPX_O_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3496869888),	// V_CMPX_O_F64_e64_si
    UINT64_C(3497459712),	// V_CMPX_O_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2084438016),	// V_CMPX_TRU_F32_e32_si
    UINT64_C(2092826624),	// V_CMPX_TRU_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3493724160),	// V_CMPX_TRU_F32_e64_si
    UINT64_C(3495886848),	// V_CMPX_TRU_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2088632320),	// V_CMPX_TRU_F64_e32_si
    UINT64_C(2097020928),	// V_CMPX_TRU_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3497918464),	// V_CMPX_TRU_F64_e64_si
    UINT64_C(3497984000),	// V_CMPX_TRU_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2100166656),	// V_CMPX_T_I32_e32_si
    UINT64_C(2108555264),	// V_CMPX_T_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3509452800),	// V_CMPX_T_I32_e64_si
    UINT64_C(3503751168),	// V_CMPX_T_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2104360960),	// V_CMPX_T_I64_e32_si
    UINT64_C(2112749568),	// V_CMPX_T_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3513647104),	// V_CMPX_T_I64_e64_si
    UINT64_C(3505848320),	// V_CMPX_T_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2108555264),	// V_CMPX_T_U32_e32_si
    UINT64_C(2109603840),	// V_CMPX_T_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3517841408),	// V_CMPX_T_U32_e64_si
    UINT64_C(3504275456),	// V_CMPX_T_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2112749568),	// V_CMPX_T_U64_e32_si
    UINT64_C(2113798144),	// V_CMPX_T_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3522035712),	// V_CMPX_T_U64_e64_si
    UINT64_C(3506372608),	// V_CMPX_T_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2083520512),	// V_CMPX_U_F32_e32_si
    UINT64_C(2091909120),	// V_CMPX_U_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3492806656),	// V_CMPX_U_F32_e64_si
    UINT64_C(3495428096),	// V_CMPX_U_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2087714816),	// V_CMPX_U_F64_e32_si
    UINT64_C(2096103424),	// V_CMPX_U_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3497000960),	// V_CMPX_U_F64_e64_si
    UINT64_C(3497525248),	// V_CMPX_U_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2098200576),	// V_CMP_CLASS_F32_e32_si
    UINT64_C(2082471936),	// V_CMP_CLASS_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3507486720),	// V_CMP_CLASS_F32_e64_si
    UINT64_C(3490709504),	// V_CMP_CLASS_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2102394880),	// V_CMP_CLASS_F64_e32_si
    UINT64_C(2082734080),	// V_CMP_CLASS_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3511681024),	// V_CMP_CLASS_F64_e64_si
    UINT64_C(3490840576),	// V_CMP_CLASS_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2080636928),	// V_CMP_EQ_F32_e32_si
    UINT64_C(2089025536),	// V_CMP_EQ_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3489923072),	// V_CMP_EQ_F32_e64_si
    UINT64_C(3493986304),	// V_CMP_EQ_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2084831232),	// V_CMP_EQ_F64_e32_si
    UINT64_C(2093219840),	// V_CMP_EQ_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3494117376),	// V_CMP_EQ_F64_e64_si
    UINT64_C(3496083456),	// V_CMP_EQ_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2097414144),	// V_CMP_EQ_I32_e32_si
    UINT64_C(2105802752),	// V_CMP_EQ_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3506700288),	// V_CMP_EQ_I32_e64_si
    UINT64_C(3502374912),	// V_CMP_EQ_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2101608448),	// V_CMP_EQ_I64_e32_si
    UINT64_C(2109997056),	// V_CMP_EQ_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3510894592),	// V_CMP_EQ_I64_e64_si
    UINT64_C(3504472064),	// V_CMP_EQ_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2105802752),	// V_CMP_EQ_U32_e32_si
    UINT64_C(2106851328),	// V_CMP_EQ_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3515088896),	// V_CMP_EQ_U32_e64_si
    UINT64_C(3502899200),	// V_CMP_EQ_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2109997056),	// V_CMP_EQ_U64_e32_si
    UINT64_C(2111045632),	// V_CMP_EQ_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3519283200),	// V_CMP_EQ_U64_e64_si
    UINT64_C(3504996352),	// V_CMP_EQ_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2080374784),	// V_CMP_F_F32_e32_si
    UINT64_C(2088763392),	// V_CMP_F_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3489660928),	// V_CMP_F_F32_e64_si
    UINT64_C(3493855232),	// V_CMP_F_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2084569088),	// V_CMP_F_F64_e32_si
    UINT64_C(2092957696),	// V_CMP_F_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3493855232),	// V_CMP_F_F64_e64_si
    UINT64_C(3495952384),	// V_CMP_F_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2097152000),	// V_CMP_F_I32_e32_si
    UINT64_C(2105540608),	// V_CMP_F_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3506438144),	// V_CMP_F_I32_e64_si
    UINT64_C(3502243840),	// V_CMP_F_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2101346304),	// V_CMP_F_I64_e32_si
    UINT64_C(2109734912),	// V_CMP_F_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3510632448),	// V_CMP_F_I64_e64_si
    UINT64_C(3504340992),	// V_CMP_F_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2105540608),	// V_CMP_F_U32_e32_si
    UINT64_C(2106589184),	// V_CMP_F_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3514826752),	// V_CMP_F_U32_e64_si
    UINT64_C(3502768128),	// V_CMP_F_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2109734912),	// V_CMP_F_U64_e32_si
    UINT64_C(2110783488),	// V_CMP_F_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3519021056),	// V_CMP_F_U64_e64_si
    UINT64_C(3504865280),	// V_CMP_F_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2081161216),	// V_CMP_GE_F32_e32_si
    UINT64_C(2089549824),	// V_CMP_GE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3490447360),	// V_CMP_GE_F32_e64_si
    UINT64_C(3494248448),	// V_CMP_GE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2085355520),	// V_CMP_GE_F64_e32_si
    UINT64_C(2093744128),	// V_CMP_GE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3494641664),	// V_CMP_GE_F64_e64_si
    UINT64_C(3496345600),	// V_CMP_GE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2097938432),	// V_CMP_GE_I32_e32_si
    UINT64_C(2106327040),	// V_CMP_GE_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3507224576),	// V_CMP_GE_I32_e64_si
    UINT64_C(3502637056),	// V_CMP_GE_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2102132736),	// V_CMP_GE_I64_e32_si
    UINT64_C(2110521344),	// V_CMP_GE_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3511418880),	// V_CMP_GE_I64_e64_si
    UINT64_C(3504734208),	// V_CMP_GE_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2106327040),	// V_CMP_GE_U32_e32_si
    UINT64_C(2107375616),	// V_CMP_GE_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3515613184),	// V_CMP_GE_U32_e64_si
    UINT64_C(3503161344),	// V_CMP_GE_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2110521344),	// V_CMP_GE_U64_e32_si
    UINT64_C(2111569920),	// V_CMP_GE_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3519807488),	// V_CMP_GE_U64_e64_si
    UINT64_C(3505258496),	// V_CMP_GE_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2080899072),	// V_CMP_GT_F32_e32_si
    UINT64_C(2089287680),	// V_CMP_GT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3490185216),	// V_CMP_GT_F32_e64_si
    UINT64_C(3494117376),	// V_CMP_GT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2085093376),	// V_CMP_GT_F64_e32_si
    UINT64_C(2093481984),	// V_CMP_GT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3494379520),	// V_CMP_GT_F64_e64_si
    UINT64_C(3496214528),	// V_CMP_GT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2097676288),	// V_CMP_GT_I32_e32_si
    UINT64_C(2106064896),	// V_CMP_GT_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3506962432),	// V_CMP_GT_I32_e64_si
    UINT64_C(3502505984),	// V_CMP_GT_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2101870592),	// V_CMP_GT_I64_e32_si
    UINT64_C(2110259200),	// V_CMP_GT_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3511156736),	// V_CMP_GT_I64_e64_si
    UINT64_C(3504603136),	// V_CMP_GT_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2106064896),	// V_CMP_GT_U32_e32_si
    UINT64_C(2107113472),	// V_CMP_GT_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3515351040),	// V_CMP_GT_U32_e64_si
    UINT64_C(3503030272),	// V_CMP_GT_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2110259200),	// V_CMP_GT_U64_e32_si
    UINT64_C(2111307776),	// V_CMP_GT_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3519545344),	// V_CMP_GT_U64_e64_si
    UINT64_C(3505127424),	// V_CMP_GT_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2080768000),	// V_CMP_LE_F32_e32_si
    UINT64_C(2089156608),	// V_CMP_LE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3490054144),	// V_CMP_LE_F32_e64_si
    UINT64_C(3494051840),	// V_CMP_LE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2084962304),	// V_CMP_LE_F64_e32_si
    UINT64_C(2093350912),	// V_CMP_LE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3494248448),	// V_CMP_LE_F64_e64_si
    UINT64_C(3496148992),	// V_CMP_LE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2097545216),	// V_CMP_LE_I32_e32_si
    UINT64_C(2105933824),	// V_CMP_LE_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3506831360),	// V_CMP_LE_I32_e64_si
    UINT64_C(3502440448),	// V_CMP_LE_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2101739520),	// V_CMP_LE_I64_e32_si
    UINT64_C(2110128128),	// V_CMP_LE_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3511025664),	// V_CMP_LE_I64_e64_si
    UINT64_C(3504537600),	// V_CMP_LE_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2105933824),	// V_CMP_LE_U32_e32_si
    UINT64_C(2106982400),	// V_CMP_LE_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3515219968),	// V_CMP_LE_U32_e64_si
    UINT64_C(3502964736),	// V_CMP_LE_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2110128128),	// V_CMP_LE_U64_e32_si
    UINT64_C(2111176704),	// V_CMP_LE_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3519414272),	// V_CMP_LE_U64_e64_si
    UINT64_C(3505061888),	// V_CMP_LE_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2081030144),	// V_CMP_LG_F32_e32_si
    UINT64_C(2089418752),	// V_CMP_LG_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3490316288),	// V_CMP_LG_F32_e64_si
    UINT64_C(3494182912),	// V_CMP_LG_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2085224448),	// V_CMP_LG_F64_e32_si
    UINT64_C(2093613056),	// V_CMP_LG_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3494510592),	// V_CMP_LG_F64_e64_si
    UINT64_C(3496280064),	// V_CMP_LG_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2080505856),	// V_CMP_LT_F32_e32_si
    UINT64_C(2088894464),	// V_CMP_LT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3489792000),	// V_CMP_LT_F32_e64_si
    UINT64_C(3493920768),	// V_CMP_LT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2084700160),	// V_CMP_LT_F64_e32_si
    UINT64_C(2093088768),	// V_CMP_LT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3493986304),	// V_CMP_LT_F64_e64_si
    UINT64_C(3496017920),	// V_CMP_LT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2097283072),	// V_CMP_LT_I32_e32_si
    UINT64_C(2105671680),	// V_CMP_LT_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3506569216),	// V_CMP_LT_I32_e64_si
    UINT64_C(3502309376),	// V_CMP_LT_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2101477376),	// V_CMP_LT_I64_e32_si
    UINT64_C(2109865984),	// V_CMP_LT_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3510763520),	// V_CMP_LT_I64_e64_si
    UINT64_C(3504406528),	// V_CMP_LT_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2105671680),	// V_CMP_LT_U32_e32_si
    UINT64_C(2106720256),	// V_CMP_LT_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3514957824),	// V_CMP_LT_U32_e64_si
    UINT64_C(3502833664),	// V_CMP_LT_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2109865984),	// V_CMP_LT_U64_e32_si
    UINT64_C(2110914560),	// V_CMP_LT_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3519152128),	// V_CMP_LT_U64_e64_si
    UINT64_C(3504930816),	// V_CMP_LT_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2082078720),	// V_CMP_NEQ_F32_e32_si
    UINT64_C(2090467328),	// V_CMP_NEQ_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3491364864),	// V_CMP_NEQ_F32_e64_si
    UINT64_C(3494707200),	// V_CMP_NEQ_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2086273024),	// V_CMP_NEQ_F64_e32_si
    UINT64_C(2094661632),	// V_CMP_NEQ_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3495559168),	// V_CMP_NEQ_F64_e64_si
    UINT64_C(3496804352),	// V_CMP_NEQ_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2097807360),	// V_CMP_NE_I32_e32_si
    UINT64_C(2106195968),	// V_CMP_NE_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3507093504),	// V_CMP_NE_I32_e64_si
    UINT64_C(3502571520),	// V_CMP_NE_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2102001664),	// V_CMP_NE_I64_e32_si
    UINT64_C(2110390272),	// V_CMP_NE_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3511287808),	// V_CMP_NE_I64_e64_si
    UINT64_C(3504668672),	// V_CMP_NE_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2106195968),	// V_CMP_NE_U32_e32_si
    UINT64_C(2107244544),	// V_CMP_NE_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3515482112),	// V_CMP_NE_U32_e64_si
    UINT64_C(3503095808),	// V_CMP_NE_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2110390272),	// V_CMP_NE_U64_e32_si
    UINT64_C(2111438848),	// V_CMP_NE_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3519676416),	// V_CMP_NE_U64_e64_si
    UINT64_C(3505192960),	// V_CMP_NE_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2081554432),	// V_CMP_NGE_F32_e32_si
    UINT64_C(2089943040),	// V_CMP_NGE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3490840576),	// V_CMP_NGE_F32_e64_si
    UINT64_C(3494445056),	// V_CMP_NGE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2085748736),	// V_CMP_NGE_F64_e32_si
    UINT64_C(2094137344),	// V_CMP_NGE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3495034880),	// V_CMP_NGE_F64_e64_si
    UINT64_C(3496542208),	// V_CMP_NGE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2081816576),	// V_CMP_NGT_F32_e32_si
    UINT64_C(2090205184),	// V_CMP_NGT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3491102720),	// V_CMP_NGT_F32_e64_si
    UINT64_C(3494576128),	// V_CMP_NGT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2086010880),	// V_CMP_NGT_F64_e32_si
    UINT64_C(2094399488),	// V_CMP_NGT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3495297024),	// V_CMP_NGT_F64_e64_si
    UINT64_C(3496673280),	// V_CMP_NGT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2081947648),	// V_CMP_NLE_F32_e32_si
    UINT64_C(2090336256),	// V_CMP_NLE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3491233792),	// V_CMP_NLE_F32_e64_si
    UINT64_C(3494641664),	// V_CMP_NLE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2086141952),	// V_CMP_NLE_F64_e32_si
    UINT64_C(2094530560),	// V_CMP_NLE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3495428096),	// V_CMP_NLE_F64_e64_si
    UINT64_C(3496738816),	// V_CMP_NLE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2081685504),	// V_CMP_NLG_F32_e32_si
    UINT64_C(2090074112),	// V_CMP_NLG_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3490971648),	// V_CMP_NLG_F32_e64_si
    UINT64_C(3494510592),	// V_CMP_NLG_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2085879808),	// V_CMP_NLG_F64_e32_si
    UINT64_C(2094268416),	// V_CMP_NLG_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3495165952),	// V_CMP_NLG_F64_e64_si
    UINT64_C(3496607744),	// V_CMP_NLG_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2082209792),	// V_CMP_NLT_F32_e32_si
    UINT64_C(2090598400),	// V_CMP_NLT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3491495936),	// V_CMP_NLT_F32_e64_si
    UINT64_C(3494772736),	// V_CMP_NLT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2086404096),	// V_CMP_NLT_F64_e32_si
    UINT64_C(2094792704),	// V_CMP_NLT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3495690240),	// V_CMP_NLT_F64_e64_si
    UINT64_C(3496869888),	// V_CMP_NLT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2081292288),	// V_CMP_O_F32_e32_si
    UINT64_C(2089680896),	// V_CMP_O_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3490578432),	// V_CMP_O_F32_e64_si
    UINT64_C(3494313984),	// V_CMP_O_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2085486592),	// V_CMP_O_F64_e32_si
    UINT64_C(2093875200),	// V_CMP_O_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3494772736),	// V_CMP_O_F64_e64_si
    UINT64_C(3496411136),	// V_CMP_O_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2082340864),	// V_CMP_TRU_F32_e32_si
    UINT64_C(2090729472),	// V_CMP_TRU_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3491627008),	// V_CMP_TRU_F32_e64_si
    UINT64_C(3494838272),	// V_CMP_TRU_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2086535168),	// V_CMP_TRU_F64_e32_si
    UINT64_C(2094923776),	// V_CMP_TRU_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3495821312),	// V_CMP_TRU_F64_e64_si
    UINT64_C(3496935424),	// V_CMP_TRU_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2098069504),	// V_CMP_T_I32_e32_si
    UINT64_C(2106458112),	// V_CMP_T_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3507355648),	// V_CMP_T_I32_e64_si
    UINT64_C(3502702592),	// V_CMP_T_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2102263808),	// V_CMP_T_I64_e32_si
    UINT64_C(2110652416),	// V_CMP_T_I64_e32_vi
    UINT64_C(0),
    UINT64_C(3511549952),	// V_CMP_T_I64_e64_si
    UINT64_C(3504799744),	// V_CMP_T_I64_e64_vi
    UINT64_C(0),
    UINT64_C(2106458112),	// V_CMP_T_U32_e32_si
    UINT64_C(2107506688),	// V_CMP_T_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3515744256),	// V_CMP_T_U32_e64_si
    UINT64_C(3503226880),	// V_CMP_T_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2110652416),	// V_CMP_T_U64_e32_si
    UINT64_C(2111700992),	// V_CMP_T_U64_e32_vi
    UINT64_C(0),
    UINT64_C(3519938560),	// V_CMP_T_U64_e64_si
    UINT64_C(3505324032),	// V_CMP_T_U64_e64_vi
    UINT64_C(0),
    UINT64_C(2081423360),	// V_CMP_U_F32_e32_si
    UINT64_C(2089811968),	// V_CMP_U_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3490709504),	// V_CMP_U_F32_e64_si
    UINT64_C(3494379520),	// V_CMP_U_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2085617664),	// V_CMP_U_F64_e32_si
    UINT64_C(2094006272),	// V_CMP_U_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3494903808),	// V_CMP_U_F64_e64_si
    UINT64_C(3496476672),	// V_CMP_U_F64_e64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_CNDMASK_B32_e32_si
    UINT64_C(0),	// V_CNDMASK_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_CNDMASK_B32_e64_si
    UINT64_C(3506438144),	// V_CNDMASK_B32_e64_vi
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2113929216),	// V_COS_F16_e32_si
    UINT64_C(2113967104),	// V_COS_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_COS_F16_e64_si
    UINT64_C(3515482112),	// V_COS_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113956864),	// V_COS_F32_e32_si
    UINT64_C(2113950720),	// V_COS_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3547070464),	// V_COS_F32_e64_si
    UINT64_C(3513384960),	// V_COS_F32_e64_vi
    UINT64_C(0),
    UINT64_C(3532128256),	// V_CUBEID_F32_si
    UINT64_C(3519283200),	// V_CUBEID_F32_vi
    UINT64_C(0),
    UINT64_C(3532521472),	// V_CUBEMA_F32_si
    UINT64_C(3519479808),	// V_CUBEMA_F32_vi
    UINT64_C(0),
    UINT64_C(3532259328),	// V_CUBESC_F32_si
    UINT64_C(3519348736),	// V_CUBESC_F32_vi
    UINT64_C(0),
    UINT64_C(3532390400),	// V_CUBETC_F32_si
    UINT64_C(3519414272),	// V_CUBETC_F32_vi
    UINT64_C(0),
    UINT64_C(2113934336),	// V_CVT_F16_F32_e32_si
    UINT64_C(2113934336),	// V_CVT_F16_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3541303296),	// V_CVT_F16_F32_e64_si
    UINT64_C(3511287808),	// V_CVT_F16_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_CVT_F16_I16_e32_si
    UINT64_C(2113958912),	// V_CVT_F16_I16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_CVT_F16_I16_e64_si
    UINT64_C(3514433536),	// V_CVT_F16_I16_e64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_CVT_F16_U16_e32_si
    UINT64_C(2113958400),	// V_CVT_F16_U16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_CVT_F16_U16_e64_si
    UINT64_C(3514368000),	// V_CVT_F16_U16_e64_vi
    UINT64_C(0),
    UINT64_C(2113934848),	// V_CVT_F32_F16_e32_si
    UINT64_C(2113934848),	// V_CVT_F32_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3541434368),	// V_CVT_F32_F16_e64_si
    UINT64_C(3511353344),	// V_CVT_F32_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113936896),	// V_CVT_F32_F64_e32_si
    UINT64_C(2113936896),	// V_CVT_F32_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3541958656),	// V_CVT_F32_F64_e64_si
    UINT64_C(3511615488),	// V_CVT_F32_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2113931776),	// V_CVT_F32_I32_e32_si
    UINT64_C(2113931776),	// V_CVT_F32_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3540647936),	// V_CVT_F32_I32_e64_si
    UINT64_C(3510960128),	// V_CVT_F32_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2113932288),	// V_CVT_F32_U32_e32_si
    UINT64_C(2113932288),	// V_CVT_F32_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3540779008),	// V_CVT_F32_U32_e64_si
    UINT64_C(3511025664),	// V_CVT_F32_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2113937920),	// V_CVT_F32_UBYTE0_e32_si
    UINT64_C(2113937920),	// V_CVT_F32_UBYTE0_e32_vi
    UINT64_C(0),
    UINT64_C(3542220800),	// V_CVT_F32_UBYTE0_e64_si
    UINT64_C(3511746560),	// V_CVT_F32_UBYTE0_e64_vi
    UINT64_C(0),
    UINT64_C(2113938432),	// V_CVT_F32_UBYTE1_e32_si
    UINT64_C(2113938432),	// V_CVT_F32_UBYTE1_e32_vi
    UINT64_C(0),
    UINT64_C(3542351872),	// V_CVT_F32_UBYTE1_e64_si
    UINT64_C(3511812096),	// V_CVT_F32_UBYTE1_e64_vi
    UINT64_C(0),
    UINT64_C(2113938944),	// V_CVT_F32_UBYTE2_e32_si
    UINT64_C(2113938944),	// V_CVT_F32_UBYTE2_e32_vi
    UINT64_C(0),
    UINT64_C(3542482944),	// V_CVT_F32_UBYTE2_e64_si
    UINT64_C(3511877632),	// V_CVT_F32_UBYTE2_e64_vi
    UINT64_C(0),
    UINT64_C(2113939456),	// V_CVT_F32_UBYTE3_e32_si
    UINT64_C(2113939456),	// V_CVT_F32_UBYTE3_e32_vi
    UINT64_C(0),
    UINT64_C(3542614016),	// V_CVT_F32_UBYTE3_e64_si
    UINT64_C(3511943168),	// V_CVT_F32_UBYTE3_e64_vi
    UINT64_C(0),
    UINT64_C(2113937408),	// V_CVT_F64_F32_e32_si
    UINT64_C(2113937408),	// V_CVT_F64_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3542089728),	// V_CVT_F64_F32_e64_si
    UINT64_C(3511681024),	// V_CVT_F64_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113931264),	// V_CVT_F64_I32_e32_si
    UINT64_C(2113931264),	// V_CVT_F64_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3540516864),	// V_CVT_F64_I32_e64_si
    UINT64_C(3510894592),	// V_CVT_F64_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2113940480),	// V_CVT_F64_U32_e32_si
    UINT64_C(2113940480),	// V_CVT_F64_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3542876160),	// V_CVT_F64_U32_e64_si
    UINT64_C(3512074240),	// V_CVT_F64_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2113935872),	// V_CVT_FLR_I32_F32_e32_si
    UINT64_C(2113935872),	// V_CVT_FLR_I32_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3541696512),	// V_CVT_FLR_I32_F32_e64_si
    UINT64_C(3511484416),	// V_CVT_FLR_I32_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_CVT_I16_F16_e32_si
    UINT64_C(2113959936),	// V_CVT_I16_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_CVT_I16_F16_e64_si
    UINT64_C(3514564608),	// V_CVT_I16_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113933312),	// V_CVT_I32_F32_e32_si
    UINT64_C(2113933312),	// V_CVT_I32_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3541041152),	// V_CVT_I32_F32_e64_si
    UINT64_C(3511156736),	// V_CVT_I32_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113930752),	// V_CVT_I32_F64_e32_si
    UINT64_C(2113930752),	// V_CVT_I32_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3540385792),	// V_CVT_I32_F64_e64_si
    UINT64_C(3510829056),	// V_CVT_I32_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2113936384),	// V_CVT_OFF_F32_I4_e32_si
    UINT64_C(2113936384),	// V_CVT_OFF_F32_I4_e32_vi
    UINT64_C(0),
    UINT64_C(3541827584),	// V_CVT_OFF_F32_I4_e64_si
    UINT64_C(3511549952),	// V_CVT_OFF_F32_I4_e64_vi
    UINT64_C(0),
    UINT64_C(1476395008),	// V_CVT_PKACCUM_U8_F32_e32_si
    UINT64_C(0),
    UINT64_C(3528982528),	// V_CVT_PKACCUM_U8_F32_e64_si
    UINT64_C(3522166784),	// V_CVT_PKACCUM_U8_F32_e64_vi
    UINT64_C(0),
    UINT64_C(1509949440),	// V_CVT_PKNORM_I16_F32_e32_si
    UINT64_C(0),
    UINT64_C(3529113600),	// V_CVT_PKNORM_I16_F32_e64_si
    UINT64_C(3532914688),	// V_CVT_PKNORM_I16_F32_e64_vi
    UINT64_C(0),
    UINT64_C(1543503872),	// V_CVT_PKNORM_U16_F32_e32_si
    UINT64_C(0),
    UINT64_C(3529244672),	// V_CVT_PKNORM_U16_F32_e64_si
    UINT64_C(3532980224),	// V_CVT_PKNORM_U16_F32_e64_vi
    UINT64_C(0),
    UINT64_C(1577058304),	// V_CVT_PKRTZ_F16_F32_e32_si
    UINT64_C(0),
    UINT64_C(3529375744),	// V_CVT_PKRTZ_F16_F32_e64_si
    UINT64_C(3533045760),	// V_CVT_PKRTZ_F16_F32_e64_vi
    UINT64_C(0),
    UINT64_C(1644167168),	// V_CVT_PK_I16_I32_e32_si
    UINT64_C(0),
    UINT64_C(3529637888),	// V_CVT_PK_I16_I32_e64_si
    UINT64_C(3533176832),	// V_CVT_PK_I16_I32_e64_vi
    UINT64_C(0),
    UINT64_C(1610612736),	// V_CVT_PK_U16_U32_e32_si
    UINT64_C(0),
    UINT64_C(3529506816),	// V_CVT_PK_U16_U32_e64_si
    UINT64_C(3533111296),	// V_CVT_PK_U16_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2113935360),	// V_CVT_RPI_I32_F32_e32_si
    UINT64_C(2113935360),	// V_CVT_RPI_I32_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3541565440),	// V_CVT_RPI_I32_F32_e64_si
    UINT64_C(3511418880),	// V_CVT_RPI_I32_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_CVT_U16_F16_e32_si
    UINT64_C(2113959424),	// V_CVT_U16_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_CVT_U16_F16_e64_si
    UINT64_C(3514499072),	// V_CVT_U16_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113932800),	// V_CVT_U32_F32_e32_si
    UINT64_C(2113932800),	// V_CVT_U32_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3540910080),	// V_CVT_U32_F32_e64_si
    UINT64_C(3511091200),	// V_CVT_U32_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113939968),	// V_CVT_U32_F64_e32_si
    UINT64_C(2113939968),	// V_CVT_U32_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3542745088),	// V_CVT_U32_F64_e64_si
    UINT64_C(3512008704),	// V_CVT_U32_F64_e64_vi
    UINT64_C(0),
    UINT64_C(3535667200),	// V_DIV_FIXUP_F32_si
    UINT64_C(3520987136),	// V_DIV_FIXUP_F32_vi
    UINT64_C(0),
    UINT64_C(3535798272),	// V_DIV_FIXUP_F64_si
    UINT64_C(3521052672),	// V_DIV_FIXUP_F64_vi
    UINT64_C(0),
    UINT64_C(3537764352),	// V_DIV_FMAS_F32_si
    UINT64_C(3521249280),	// V_DIV_FMAS_F32_vi
    UINT64_C(0),
    UINT64_C(3537895424),	// V_DIV_FMAS_F64_si
    UINT64_C(3521314816),	// V_DIV_FMAS_F64_vi
    UINT64_C(0),
    UINT64_C(3537502208),	// V_DIV_SCALE_F32_si
    UINT64_C(3521118208),	// V_DIV_SCALE_F32_vi
    UINT64_C(0),
    UINT64_C(3537633280),	// V_DIV_SCALE_F64_si
    UINT64_C(3521183744),	// V_DIV_SCALE_F64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_EXP_F16_e32_si
    UINT64_C(2113962496),	// V_EXP_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_EXP_F16_e64_si
    UINT64_C(3514892288),	// V_EXP_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113948160),	// V_EXP_F32_e32_si
    UINT64_C(2113945600),	// V_EXP_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3544842240),	// V_EXP_F32_e64_si
    UINT64_C(3512729600),	// V_EXP_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113965056),	// V_EXP_LEGACY_F32_e32_si
    UINT64_C(2113967616),	// V_EXP_LEGACY_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3549167616),	// V_EXP_LEGACY_F32_e64_si
    UINT64_C(3515547648),	// V_EXP_LEGACY_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113959424),	// V_FFBH_I32_e32_si
    UINT64_C(2113953280),	// V_FFBH_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3547725824),	// V_FFBH_I32_e64_si
    UINT64_C(3513712640),	// V_FFBH_I32_e64_vi
    UINT64_C(0),
    UINT64_C(2113958400),	// V_FFBH_U32_e32_si
    UINT64_C(2113952256),	// V_FFBH_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3547463680),	// V_FFBH_U32_e64_si
    UINT64_C(3513581568),	// V_FFBH_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2113958912),	// V_FFBL_B32_e32_si
    UINT64_C(2113952768),	// V_FFBL_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3547594752),	// V_FFBL_B32_e64_si
    UINT64_C(3513647104),	// V_FFBL_B32_e64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_FLOOR_F16_e32_si
    UINT64_C(2113964032),	// V_FLOOR_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_FLOOR_F16_e64_si
    UINT64_C(3515088896),	// V_FLOOR_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113947648),	// V_FLOOR_F32_e32_si
    UINT64_C(2113945088),	// V_FLOOR_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3544711168),	// V_FLOOR_F32_e64_si
    UINT64_C(3512664064),	// V_FLOOR_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113942528),	// V_FLOOR_F64_e32_si
    UINT64_C(2113942528),	// V_FLOOR_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3543400448),	// V_FLOOR_F64_e64_si
    UINT64_C(3512336384),	// V_FLOOR_F64_e64_vi
    UINT64_C(0),
    UINT64_C(3533045760),	// V_FMA_F32_si
    UINT64_C(3519741952),	// V_FMA_F32_vi
    UINT64_C(0),
    UINT64_C(3533176832),	// V_FMA_F64_si
    UINT64_C(3519807488),	// V_FMA_F64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_FRACT_F16_e32_si
    UINT64_C(2113966080),	// V_FRACT_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_FRACT_F16_e64_si
    UINT64_C(3515351040),	// V_FRACT_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113945600),	// V_FRACT_F32_e32_si
    UINT64_C(2113943040),	// V_FRACT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3544186880),	// V_FRACT_F32_e64_si
    UINT64_C(3512401920),	// V_FRACT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113960960),	// V_FRACT_F64_e32_si
    UINT64_C(2113954816),	// V_FRACT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3548119040),	// V_FRACT_F64_e64_si
    UINT64_C(3513909248),	// V_FRACT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_FREXP_EXP_I16_F16_e32_si
    UINT64_C(2113963520),	// V_FREXP_EXP_I16_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_FREXP_EXP_I16_F16_e64_si
    UINT64_C(3515023360),	// V_FREXP_EXP_I16_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113961472),	// V_FREXP_EXP_I32_F32_e32_si
    UINT64_C(2113955328),	// V_FREXP_EXP_I32_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3548250112),	// V_FREXP_EXP_I32_F32_e64_si
    UINT64_C(3513974784),	// V_FREXP_EXP_I32_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113959936),	// V_FREXP_EXP_I32_F64_e32_si
    UINT64_C(2113953792),	// V_FREXP_EXP_I32_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3547856896),	// V_FREXP_EXP_I32_F64_e64_si
    UINT64_C(3513778176),	// V_FREXP_EXP_I32_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_FREXP_MANT_F16_e32_si
    UINT64_C(2113963008),	// V_FREXP_MANT_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_FREXP_MANT_F16_e64_si
    UINT64_C(3514957824),	// V_FREXP_MANT_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113961984),	// V_FREXP_MANT_F32_e32_si
    UINT64_C(2113955840),	// V_FREXP_MANT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3548381184),	// V_FREXP_MANT_F32_e64_si
    UINT64_C(3514040320),	// V_FREXP_MANT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113960448),	// V_FREXP_MANT_F64_e32_si
    UINT64_C(2113954304),	// V_FREXP_MANT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3547987968),	// V_FREXP_MANT_F64_e64_si
    UINT64_C(3513843712),	// V_FREXP_MANT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(3355574272),	// V_INTERP_MOV_F32_si
    UINT64_C(3556900864),	// V_INTERP_MOV_F32_vi
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3355443200),	// V_INTERP_P1_F32_16bank_si
    UINT64_C(3556769792),	// V_INTERP_P1_F32_16bank_vi
    UINT64_C(3355443200),	// V_INTERP_P1_F32_si
    UINT64_C(3556769792),	// V_INTERP_P1_F32_vi
    UINT64_C(0),
    UINT64_C(3355508736),	// V_INTERP_P2_F32_si
    UINT64_C(3556835328),	// V_INTERP_P2_F32_vi
    UINT64_C(0),
    UINT64_C(0),	// V_LDEXP_F16_e32_si
    UINT64_C(1711276032),	// V_LDEXP_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_LDEXP_F16_e64_si
    UINT64_C(3509780480),	// V_LDEXP_F16_e64_vi
    UINT64_C(0),
    UINT64_C(1442840576),	// V_LDEXP_F32_e32_si
    UINT64_C(0),
    UINT64_C(3528851456),	// V_LDEXP_F32_e64_si
    UINT64_C(3532128256),	// V_LDEXP_F32_e64_vi
    UINT64_C(0),
    UINT64_C(3536846848),	// V_LDEXP_F64_si
    UINT64_C(3531866112),	// V_LDEXP_F64_vi
    UINT64_C(0),
    UINT64_C(2113948672),	// V_LOG_CLAMP_F32_e32_si
    UINT64_C(0),
    UINT64_C(3544973312),	// V_LOG_CLAMP_F32_e64_si
    UINT64_C(0),
    UINT64_C(2113929216),	// V_LOG_F16_e32_si
    UINT64_C(2113961984),	// V_LOG_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_LOG_F16_e64_si
    UINT64_C(3514826752),	// V_LOG_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113949184),	// V_LOG_F32_e32_si
    UINT64_C(2113946112),	// V_LOG_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3545104384),	// V_LOG_F32_e64_si
    UINT64_C(3512795136),	// V_LOG_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113964544),	// V_LOG_LEGACY_F32_e32_si
    UINT64_C(2113968128),	// V_LOG_LEGACY_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3549036544),	// V_LOG_LEGACY_F32_e64_si
    UINT64_C(3515613184),	// V_LOG_LEGACY_F32_e64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_LSHLREV_B16_e32_si
    UINT64_C(1409286144),	// V_LSHLREV_B16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_LSHLREV_B16_e64_si
    UINT64_C(3509190656),	// V_LSHLREV_B16_e64_vi
    UINT64_C(0),
    UINT64_C(872415232),	// V_LSHLREV_B32_e32_si
    UINT64_C(603979776),	// V_LSHLREV_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3526623232),	// V_LSHLREV_B32_e64_si
    UINT64_C(3507617792),	// V_LSHLREV_B32_e64_vi
    UINT64_C(0),
    UINT64_C(3489660928),	// V_LSHLREV_B64_si
    UINT64_C(3532587008),	// V_LSHLREV_B64_vi
    UINT64_C(0),
    UINT64_C(838860800),	// V_LSHL_B32_e32_si
    UINT64_C(0),
    UINT64_C(3526492160),	// V_LSHL_B32_e64_si
    UINT64_C(0),
    UINT64_C(3535929344),	// V_LSHL_B64_si
    UINT64_C(3512795136),	// V_LSHL_B64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_LSHRREV_B16_e32_si
    UINT64_C(1442840576),	// V_LSHRREV_B16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_LSHRREV_B16_e64_si
    UINT64_C(3509256192),	// V_LSHRREV_B16_e64_vi
    UINT64_C(0),
    UINT64_C(738197504),	// V_LSHRREV_B32_e32_si
    UINT64_C(536870912),	// V_LSHRREV_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3526098944),	// V_LSHRREV_B32_e64_si
    UINT64_C(3507486720),	// V_LSHRREV_B32_e64_vi
    UINT64_C(0),
    UINT64_C(3489660928),	// V_LSHRREV_B64_si
    UINT64_C(3532652544),	// V_LSHRREV_B64_vi
    UINT64_C(0),
    UINT64_C(704643072),	// V_LSHR_B32_e32_si
    UINT64_C(0),
    UINT64_C(3525967872),	// V_LSHR_B32_e64_si
    UINT64_C(0),
    UINT64_C(3536060416),	// V_LSHR_B64_si
    UINT64_C(3512860672),	// V_LSHR_B64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_MAC_F16_e32_si
    UINT64_C(1174405120),	// V_MAC_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_MAC_F16_e64_si
    UINT64_C(3508731904),	// V_MAC_F16_e64_vi
    UINT64_C(0),
    UINT64_C(1040187392),	// V_MAC_F32_e32_si
    UINT64_C(738197504),	// V_MAC_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3527278592),	// V_MAC_F32_e64_si
    UINT64_C(3507879936),	// V_MAC_F32_e64_vi
    UINT64_C(0),
    UINT64_C(201326592),	// V_MAC_LEGACY_F32_e32_si
    UINT64_C(0),
    UINT64_C(3524001792),	// V_MAC_LEGACY_F32_e64_si
    UINT64_C(3532521472),	// V_MAC_LEGACY_F32_e64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_MADAK_F16_si
    UINT64_C(1241513984),	// V_MADAK_F16_vi
    UINT64_C(0),
    UINT64_C(1107296256),	// V_MADAK_F32_si
    UINT64_C(805306368),	// V_MADAK_F32_vi
    UINT64_C(0),
    UINT64_C(0),	// V_MADMK_F16_si
    UINT64_C(1207959552),	// V_MADMK_F16_vi
    UINT64_C(0),
    UINT64_C(1073741824),	// V_MADMK_F32_si
    UINT64_C(771751936),	// V_MADMK_F32_vi
    UINT64_C(0),
    UINT64_C(3531735040),	// V_MAD_F32_si
    UINT64_C(3519086592),	// V_MAD_F32_vi
    UINT64_C(0),
    UINT64_C(3531866112),	// V_MAD_I32_I24_si
    UINT64_C(3519152128),	// V_MAD_I32_I24_vi
    UINT64_C(0),
    UINT64_C(3538812928),	// V_MAD_I64_I32_si
    UINT64_C(3514236928),	// V_MAD_I64_I32_vi
    UINT64_C(0),
    UINT64_C(3531603968),	// V_MAD_LEGACY_F32_si
    UINT64_C(3519021056),	// V_MAD_LEGACY_F32_vi
    UINT64_C(0),
    UINT64_C(3531997184),	// V_MAD_U32_U24_si
    UINT64_C(3519217664),	// V_MAD_U32_U24_vi
    UINT64_C(0),
    UINT64_C(3538681856),	// V_MAD_U64_U32_si
    UINT64_C(3514171392),	// V_MAD_U64_U32_vi
    UINT64_C(0),
    UINT64_C(3534225408),	// V_MAX3_F32_si
    UINT64_C(3520266240),	// V_MAX3_F32_vi
    UINT64_C(0),
    UINT64_C(3534356480),	// V_MAX3_I32_si
    UINT64_C(3520331776),	// V_MAX3_I32_vi
    UINT64_C(0),
    UINT64_C(3534487552),	// V_MAX3_U32_si
    UINT64_C(3520397312),	// V_MAX3_U32_vi
    UINT64_C(0),
    UINT64_C(0),	// V_MAX_F16_e32_si
    UINT64_C(1509949440),	// V_MAX_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_MAX_F16_e64_si
    UINT64_C(3509387264),	// V_MAX_F16_e64_vi
    UINT64_C(0),
    UINT64_C(536870912),	// V_MAX_F32_e32_si
    UINT64_C(369098752),	// V_MAX_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3525312512),	// V_MAX_F32_e64_si
    UINT64_C(3507159040),	// V_MAX_F32_e64_vi
    UINT64_C(0),
    UINT64_C(3536715776),	// V_MAX_F64_si
    UINT64_C(3531800576),	// V_MAX_F64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_MAX_I16_e32_si
    UINT64_C(1610612736),	// V_MAX_I16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_MAX_I16_e64_si
    UINT64_C(3509583872),	// V_MAX_I16_e64_vi
    UINT64_C(0),
    UINT64_C(603979776),	// V_MAX_I32_e32_si
    UINT64_C(436207616),	// V_MAX_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3525574656),	// V_MAX_I32_e64_si
    UINT64_C(3507290112),	// V_MAX_I32_e64_vi
    UINT64_C(0),
    UINT64_C(469762048),	// V_MAX_LEGACY_F32_e32_si
    UINT64_C(0),
    UINT64_C(3525050368),	// V_MAX_LEGACY_F32_e64_si
    UINT64_C(0),
    UINT64_C(0),	// V_MAX_U16_e32_si
    UINT64_C(1577058304),	// V_MAX_U16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_MAX_U16_e64_si
    UINT64_C(3509518336),	// V_MAX_U16_e64_vi
    UINT64_C(0),
    UINT64_C(671088640),	// V_MAX_U32_e32_si
    UINT64_C(503316480),	// V_MAX_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3525836800),	// V_MAX_U32_e64_si
    UINT64_C(3507421184),	// V_MAX_U32_e64_vi
    UINT64_C(0),
    UINT64_C(1207959552),	// V_MBCNT_HI_U32_B32_e32_si
    UINT64_C(0),
    UINT64_C(3527933952),	// V_MBCNT_HI_U32_B32_e64_si
    UINT64_C(3532455936),	// V_MBCNT_HI_U32_B32_e64_vi
    UINT64_C(0),
    UINT64_C(1174405120),	// V_MBCNT_LO_U32_B32_e32_si
    UINT64_C(0),
    UINT64_C(3527802880),	// V_MBCNT_LO_U32_B32_e64_si
    UINT64_C(3532390400),	// V_MBCNT_LO_U32_B32_e64_vi
    UINT64_C(0),
    UINT64_C(3534618624),	// V_MED3_F32_si
    UINT64_C(3520462848),	// V_MED3_F32_vi
    UINT64_C(0),
    UINT64_C(3534749696),	// V_MED3_I32_si
    UINT64_C(3520528384),	// V_MED3_I32_vi
    UINT64_C(0),
    UINT64_C(3534880768),	// V_MED3_U32_si
    UINT64_C(3520593920),	// V_MED3_U32_vi
    UINT64_C(0),
    UINT64_C(3533832192),	// V_MIN3_F32_si
    UINT64_C(3520069632),	// V_MIN3_F32_vi
    UINT64_C(0),
    UINT64_C(3533963264),	// V_MIN3_I32_si
    UINT64_C(3520135168),	// V_MIN3_I32_vi
    UINT64_C(0),
    UINT64_C(3534094336),	// V_MIN3_U32_si
    UINT64_C(3520200704),	// V_MIN3_U32_vi
    UINT64_C(0),
    UINT64_C(0),	// V_MIN_F16_e32_si
    UINT64_C(1543503872),	// V_MIN_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_MIN_F16_e64_si
    UINT64_C(3509452800),	// V_MIN_F16_e64_vi
    UINT64_C(0),
    UINT64_C(503316480),	// V_MIN_F32_e32_si
    UINT64_C(335544320),	// V_MIN_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3525181440),	// V_MIN_F32_e64_si
    UINT64_C(3507093504),	// V_MIN_F32_e64_vi
    UINT64_C(0),
    UINT64_C(3536584704),	// V_MIN_F64_si
    UINT64_C(3531735040),	// V_MIN_F64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_MIN_I16_e32_si
    UINT64_C(1677721600),	// V_MIN_I16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_MIN_I16_e64_si
    UINT64_C(3509714944),	// V_MIN_I16_e64_vi
    UINT64_C(0),
    UINT64_C(570425344),	// V_MIN_I32_e32_si
    UINT64_C(402653184),	// V_MIN_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3525443584),	// V_MIN_I32_e64_si
    UINT64_C(3507224576),	// V_MIN_I32_e64_vi
    UINT64_C(0),
    UINT64_C(436207616),	// V_MIN_LEGACY_F32_e32_si
    UINT64_C(0),
    UINT64_C(3524919296),	// V_MIN_LEGACY_F32_e64_si
    UINT64_C(0),
    UINT64_C(0),	// V_MIN_U16_e32_si
    UINT64_C(1644167168),	// V_MIN_U16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_MIN_U16_e64_si
    UINT64_C(3509649408),	// V_MIN_U16_e64_vi
    UINT64_C(0),
    UINT64_C(637534208),	// V_MIN_U32_e32_si
    UINT64_C(469762048),	// V_MIN_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3525705728),	// V_MIN_U32_e64_si
    UINT64_C(3507355648),	// V_MIN_U32_e64_vi
    UINT64_C(0),
    UINT64_C(2113963008),	// V_MOVRELD_B32_e32_si
    UINT64_C(2113956864),	// V_MOVRELD_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3548643328),	// V_MOVRELD_B32_e64_si
    UINT64_C(3514171392),	// V_MOVRELD_B32_e64_vi
    UINT64_C(0),
    UINT64_C(2113964032),	// V_MOVRELSD_B32_e32_si
    UINT64_C(2113957888),	// V_MOVRELSD_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3548905472),	// V_MOVRELSD_B32_e64_si
    UINT64_C(3514302464),	// V_MOVRELSD_B32_e64_vi
    UINT64_C(0),
    UINT64_C(2113963520),	// V_MOVRELS_B32_e32_si
    UINT64_C(2113957376),	// V_MOVRELS_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3548774400),	// V_MOVRELS_B32_e64_si
    UINT64_C(3514236928),	// V_MOVRELS_B32_e64_vi
    UINT64_C(0),
    UINT64_C(2113929728),	// V_MOV_B32_e32_si
    UINT64_C(2113929728),	// V_MOV_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3540123648),	// V_MOV_B32_e64_si
    UINT64_C(3510697984),	// V_MOV_B32_e64_vi
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2113933824),	// V_MOV_FED_B32_e32_si
    UINT64_C(0),
    UINT64_C(3541172224),	// V_MOV_FED_B32_e64_si
    UINT64_C(0),
    UINT64_C(3538157568),	// V_MQSAD_U16_U8_si
    UINT64_C(3513909248),	// V_MQSAD_U16_U8_vi
    UINT64_C(0),
    UINT64_C(3538550784),	// V_MQSAD_U32_U8_si
    UINT64_C(3514105856),	// V_MQSAD_U32_U8_vi
    UINT64_C(0),
    UINT64_C(3533701120),	// V_MULLIT_F32_si
    UINT64_C(3511681024),	// V_MULLIT_F32_vi
    UINT64_C(0),
    UINT64_C(0),	// V_MUL_F16_e32_si
    UINT64_C(1140850688),	// V_MUL_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_MUL_F16_e64_si
    UINT64_C(3508666368),	// V_MUL_F16_e64_vi
    UINT64_C(0),
    UINT64_C(268435456),	// V_MUL_F32_e32_si
    UINT64_C(167772160),	// V_MUL_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3524263936),	// V_MUL_F32_e64_si
    UINT64_C(3506765824),	// V_MUL_F32_e64_vi
    UINT64_C(0),
    UINT64_C(3536453632),	// V_MUL_F64_si
    UINT64_C(3531669504),	// V_MUL_F64_vi
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(335544320),	// V_MUL_HI_I32_I24_e32_si
    UINT64_C(234881024),	// V_MUL_HI_I32_I24_e32_vi
    UINT64_C(0),
    UINT64_C(3524526080),	// V_MUL_HI_I32_I24_e64_si
    UINT64_C(3506896896),	// V_MUL_HI_I32_I24_e64_vi
    UINT64_C(3537371136),	// V_MUL_HI_I32_si
    UINT64_C(3532062720),	// V_MUL_HI_I32_vi
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(402653184),	// V_MUL_HI_U32_U24_e32_si
    UINT64_C(301989888),	// V_MUL_HI_U32_U24_e32_vi
    UINT64_C(0),
    UINT64_C(3524788224),	// V_MUL_HI_U32_U24_e64_si
    UINT64_C(3507027968),	// V_MUL_HI_U32_U24_e64_vi
    UINT64_C(3537108992),	// V_MUL_HI_U32_si
    UINT64_C(3531997184),	// V_MUL_HI_U32_vi
    UINT64_C(0),
    UINT64_C(301989888),	// V_MUL_I32_I24_e32_si
    UINT64_C(201326592),	// V_MUL_I32_I24_e32_vi
    UINT64_C(0),
    UINT64_C(3524395008),	// V_MUL_I32_I24_e64_si
    UINT64_C(3506831360),	// V_MUL_I32_I24_e64_vi
    UINT64_C(0),
    UINT64_C(234881024),	// V_MUL_LEGACY_F32_e32_si
    UINT64_C(134217728),	// V_MUL_LEGACY_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3524132864),	// V_MUL_LEGACY_F32_e64_si
    UINT64_C(3506700288),	// V_MUL_LEGACY_F32_e64_vi
    UINT64_C(0),
    UINT64_C(3537240064),	// V_MUL_LO_I32_si
    UINT64_C(3531931648),	// V_MUL_LO_I32_vi
    UINT64_C(0),
    UINT64_C(0),	// V_MUL_LO_U16_e32_si
    UINT64_C(1375731712),	// V_MUL_LO_U16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_MUL_LO_U16_e64_si
    UINT64_C(3509125120),	// V_MUL_LO_U16_e64_vi
    UINT64_C(0),
    UINT64_C(3536977920),	// V_MUL_LO_U32_si
    UINT64_C(3531931648),	// V_MUL_LO_U32_vi
    UINT64_C(0),
    UINT64_C(369098752),	// V_MUL_U32_U24_e32_si
    UINT64_C(268435456),	// V_MUL_U32_U24_e32_vi
    UINT64_C(0),
    UINT64_C(3524657152),	// V_MUL_U32_U24_e64_si
    UINT64_C(3506962432),	// V_MUL_U32_U24_e64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_NOP_si
    UINT64_C(2113929216),	// V_NOP_vi
    UINT64_C(0),
    UINT64_C(2113957376),	// V_NOT_B32_e32_si
    UINT64_C(2113951232),	// V_NOT_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3547201536),	// V_NOT_B32_e64_si
    UINT64_C(3513450496),	// V_NOT_B32_e64_vi
    UINT64_C(0),
    UINT64_C(939524096),	// V_OR_B32_e32_si
    UINT64_C(671088640),	// V_OR_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3526885376),	// V_OR_B32_e64_si
    UINT64_C(3507748864),	// V_OR_B32_e64_vi
    UINT64_C(0),
    UINT64_C(3538288640),	// V_QSAD_PK_U16_U8_si
    UINT64_C(3513974784),	// V_QSAD_PK_U16_U8_vi
    UINT64_C(0),
    UINT64_C(2113949696),	// V_RCP_CLAMP_F32_e32_si
    UINT64_C(0),
    UINT64_C(3545235456),	// V_RCP_CLAMP_F32_e64_si
    UINT64_C(0),
    UINT64_C(2113953792),	// V_RCP_CLAMP_F64_e32_si
    UINT64_C(0),
    UINT64_C(3546284032),	// V_RCP_CLAMP_F64_e64_si
    UINT64_C(0),
    UINT64_C(2113929216),	// V_RCP_F16_e32_si
    UINT64_C(2113960448),	// V_RCP_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_RCP_F16_e64_si
    UINT64_C(3514630144),	// V_RCP_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113950720),	// V_RCP_F32_e32_si
    UINT64_C(2113946624),	// V_RCP_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3545497600),	// V_RCP_F32_e64_si
    UINT64_C(3512860672),	// V_RCP_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113953280),	// V_RCP_F64_e32_si
    UINT64_C(2113948160),	// V_RCP_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3546152960),	// V_RCP_F64_e64_si
    UINT64_C(3513057280),	// V_RCP_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2113951232),	// V_RCP_IFLAG_F32_e32_si
    UINT64_C(2113947136),	// V_RCP_IFLAG_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3545628672),	// V_RCP_IFLAG_F32_e64_si
    UINT64_C(3512926208),	// V_RCP_IFLAG_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113950208),	// V_RCP_LEGACY_F32_e32_si
    UINT64_C(0),
    UINT64_C(3545366528),	// V_RCP_LEGACY_F32_e64_si
    UINT64_C(2113930240),	// V_READFIRSTLANE_B32
    UINT64_C(0),
    UINT64_C(33554432),	// V_READLANE_B32_si
    UINT64_C(3532193792),	// V_READLANE_B32_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_RNDNE_F16_e32_si
    UINT64_C(2113965568),	// V_RNDNE_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_RNDNE_F16_e64_si
    UINT64_C(3515285504),	// V_RNDNE_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113947136),	// V_RNDNE_F32_e32_si
    UINT64_C(2113944576),	// V_RNDNE_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3544580096),	// V_RNDNE_F32_e64_si
    UINT64_C(3512598528),	// V_RNDNE_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113942016),	// V_RNDNE_F64_e32_si
    UINT64_C(2113942016),	// V_RNDNE_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3543269376),	// V_RNDNE_F64_e64_si
    UINT64_C(3512270848),	// V_RNDNE_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2113951744),	// V_RSQ_CLAMP_F32_e32_si
    UINT64_C(0),
    UINT64_C(3545759744),	// V_RSQ_CLAMP_F32_e64_si
    UINT64_C(0),
    UINT64_C(2113954816),	// V_RSQ_CLAMP_F64_e32_si
    UINT64_C(0),
    UINT64_C(3546546176),	// V_RSQ_CLAMP_F64_e64_si
    UINT64_C(0),
    UINT64_C(2113929216),	// V_RSQ_F16_e32_si
    UINT64_C(2113961472),	// V_RSQ_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_RSQ_F16_e64_si
    UINT64_C(3514761216),	// V_RSQ_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113952768),	// V_RSQ_F32_e32_si
    UINT64_C(2113947648),	// V_RSQ_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3546021888),	// V_RSQ_F32_e64_si
    UINT64_C(3512991744),	// V_RSQ_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113954304),	// V_RSQ_F64_e32_si
    UINT64_C(2113948672),	// V_RSQ_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3546415104),	// V_RSQ_F64_e64_si
    UINT64_C(3513122816),	// V_RSQ_F64_e64_vi
    UINT64_C(0),
    UINT64_C(2113952256),	// V_RSQ_LEGACY_F32_e32_si
    UINT64_C(0),
    UINT64_C(3545890816),	// V_RSQ_LEGACY_F32_e64_si
    UINT64_C(0),
    UINT64_C(3535405056),	// V_SAD_U32_si
    UINT64_C(3520856064),	// V_SAD_U32_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_SIN_F16_e32_si
    UINT64_C(2113966592),	// V_SIN_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_SIN_F16_e64_si
    UINT64_C(3515416576),	// V_SIN_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113956352),	// V_SIN_F32_e32_si
    UINT64_C(2113950208),	// V_SIN_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3546939392),	// V_SIN_F32_e64_si
    UINT64_C(3513319424),	// V_SIN_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_SQRT_F16_e32_si
    UINT64_C(2113960960),	// V_SQRT_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_SQRT_F16_e64_si
    UINT64_C(3514695680),	// V_SQRT_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113955328),	// V_SQRT_F32_e32_si
    UINT64_C(2113949184),	// V_SQRT_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3546677248),	// V_SQRT_F32_e64_si
    UINT64_C(3513188352),	// V_SQRT_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113955840),	// V_SQRT_F64_e32_si
    UINT64_C(2113949696),	// V_SQRT_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3546808320),	// V_SQRT_F64_e64_si
    UINT64_C(3513253888),	// V_SQRT_F64_e64_vi
    UINT64_C(0),
    UINT64_C(1409286144),	// V_SUBBREV_U32_e32_si
    UINT64_C(1006632960),	// V_SUBBREV_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3528747520),	// V_SUBBREV_U32_e64_si
    UINT64_C(3508431360),	// V_SUBBREV_U32_e64_vi
    UINT64_C(0),
    UINT64_C(1375731712),	// V_SUBB_U32_e32_si
    UINT64_C(973078528),	// V_SUBB_U32_e32_vi
    UINT64_C(0),
    UINT64_C(3528616448),	// V_SUBB_U32_e64_si
    UINT64_C(3508365824),	// V_SUBB_U32_e64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_SUBREV_F16_e32_si
    UINT64_C(1107296256),	// V_SUBREV_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_SUBREV_F16_e64_si
    UINT64_C(3508600832),	// V_SUBREV_F16_e64_vi
    UINT64_C(0),
    UINT64_C(167772160),	// V_SUBREV_F32_e32_si
    UINT64_C(100663296),	// V_SUBREV_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3523870720),	// V_SUBREV_F32_e64_si
    UINT64_C(3506634752),	// V_SUBREV_F32_e64_vi
    UINT64_C(0),
    UINT64_C(1308622848),	// V_SUBREV_I32_e32_si
    UINT64_C(905969664),	// V_SUBREV_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3528354304),	// V_SUBREV_I32_e64_si
    UINT64_C(3508234752),	// V_SUBREV_I32_e64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_SUBREV_U16_e32_si
    UINT64_C(1342177280),	// V_SUBREV_U16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_SUBREV_U16_e64_si
    UINT64_C(3509059584),	// V_SUBREV_U16_e64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_SUB_F16_e32_si
    UINT64_C(1073741824),	// V_SUB_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_SUB_F16_e64_si
    UINT64_C(3508535296),	// V_SUB_F16_e64_vi
    UINT64_C(0),
    UINT64_C(134217728),	// V_SUB_F32_e32_si
    UINT64_C(67108864),	// V_SUB_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3523739648),	// V_SUB_F32_e64_si
    UINT64_C(3506569216),	// V_SUB_F32_e64_vi
    UINT64_C(0),
    UINT64_C(1275068416),	// V_SUB_I32_e32_si
    UINT64_C(872415232),	// V_SUB_I32_e32_vi
    UINT64_C(0),
    UINT64_C(3528223232),	// V_SUB_I32_e64_si
    UINT64_C(3508169216),	// V_SUB_I32_e64_vi
    UINT64_C(0),
    UINT64_C(0),	// V_SUB_U16_e32_si
    UINT64_C(1308622848),	// V_SUB_U16_e32_vi
    UINT64_C(0),
    UINT64_C(3523215360),	// V_SUB_U16_e64_si
    UINT64_C(3508994048),	// V_SUB_U16_e64_vi
    UINT64_C(0),
    UINT64_C(3538419712),	// V_TRIG_PREOP_F64_si
    UINT64_C(3532783616),	// V_TRIG_PREOP_F64_vi
    UINT64_C(0),
    UINT64_C(2113929216),	// V_TRUNC_F16_e32_si
    UINT64_C(2113965056),	// V_TRUNC_F16_e32_vi
    UINT64_C(0),
    UINT64_C(3539992576),	// V_TRUNC_F16_e64_si
    UINT64_C(3515219968),	// V_TRUNC_F16_e64_vi
    UINT64_C(0),
    UINT64_C(2113946112),	// V_TRUNC_F32_e32_si
    UINT64_C(2113943552),	// V_TRUNC_F32_e32_vi
    UINT64_C(0),
    UINT64_C(3544317952),	// V_TRUNC_F32_e64_si
    UINT64_C(3512467456),	// V_TRUNC_F32_e64_vi
    UINT64_C(0),
    UINT64_C(2113940992),	// V_TRUNC_F64_e32_si
    UINT64_C(2113940992),	// V_TRUNC_F64_e32_vi
    UINT64_C(0),
    UINT64_C(3543007232),	// V_TRUNC_F64_e64_si
    UINT64_C(3512139776),	// V_TRUNC_F64_e64_vi
    UINT64_C(0),
    UINT64_C(67108864),	// V_WRITELANE_B32_si
    UINT64_C(3532259328),	// V_WRITELANE_B32_vi
    UINT64_C(0),
    UINT64_C(973078528),	// V_XOR_B32_e32_si
    UINT64_C(704643072),	// V_XOR_B32_e32_vi
    UINT64_C(0),
    UINT64_C(3527016448),	// V_XOR_B32_e64_si
    UINT64_C(3507814400),	// V_XOR_B32_e64_vi
    UINT64_C(0),
    UINT64_C(9331458427911667712),	// WHILE_LOOP_EG
    UINT64_C(9439544818968559616),	// WHILE_LOOP_R600
    UINT64_C(27487790694400),	// XOR_INT
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case AMDGPU::CF_CALL_FS_EG:
    case AMDGPU::CF_CALL_FS_R600:
    case AMDGPU::CF_END_CM:
    case AMDGPU::CF_END_EG:
    case AMDGPU::CF_END_R600:
    case AMDGPU::GROUP_BARRIER:
    case AMDGPU::INTERP_PAIR_XY:
    case AMDGPU::INTERP_PAIR_ZW:
    case AMDGPU::INTERP_VEC_LOAD:
    case AMDGPU::PAD:
    case AMDGPU::S_BARRIER:
    case AMDGPU::S_ENDPGM:
    case AMDGPU::S_ICACHE_INV:
    case AMDGPU::S_TTRACEDATA:
    case AMDGPU::V_CLREXCP_si:
    case AMDGPU::V_CLREXCP_vi:
    case AMDGPU::V_NOP_si:
    case AMDGPU::V_NOP_vi: {
      break;
    }
    case AMDGPU::CF_CONTINUE_EG:
    case AMDGPU::END_LOOP_EG:
    case AMDGPU::LOOP_BREAK_EG:
    case AMDGPU::WHILE_LOOP_EG: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(16777215);
      break;
    }
    case AMDGPU::CF_TC_EG:
    case AMDGPU::CF_VC_EG: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(16777215);
      // op: COUNT
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(63)) << 42;
      break;
    }
    case AMDGPU::CF_ELSE_EG:
    case AMDGPU::CF_JUMP_EG:
    case AMDGPU::CF_PUSH_EG:
    case AMDGPU::POP_EG: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(16777215);
      // op: POP_COUNT
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 32;
      break;
    }
    case AMDGPU::CF_ALU:
    case AMDGPU::CF_ALU_BREAK:
    case AMDGPU::CF_ALU_CONTINUE:
    case AMDGPU::CF_ALU_ELSE_AFTER:
    case AMDGPU::CF_ALU_POP_AFTER:
    case AMDGPU::CF_ALU_PUSH_BEFORE: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4194303);
      // op: KCACHE_BANK0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 22;
      // op: KCACHE_BANK1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 26;
      // op: KCACHE_MODE0
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 30;
      // op: KCACHE_MODE1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 32;
      // op: KCACHE_ADDR0
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 34;
      // op: KCACHE_ADDR1
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 42;
      // op: COUNT
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 50;
      break;
    }
    case AMDGPU::CF_CONTINUE_R600:
    case AMDGPU::CF_PUSH_ELSE_R600:
    case AMDGPU::END_LOOP_R600:
    case AMDGPU::LOOP_BREAK_R600:
    case AMDGPU::WHILE_LOOP_R600: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      break;
    }
    case AMDGPU::CF_TC_R600:
    case AMDGPU::CF_VC_R600: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      // op: CNT
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(8)) << 48;
      Value |= (op & UINT64_C(7)) << 42;
      break;
    }
    case AMDGPU::CF_ELSE_R600:
    case AMDGPU::CF_JUMP_R600:
    case AMDGPU::POP_R600: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      // op: POP_COUNT
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 32;
      break;
    }
    case AMDGPU::TEX_GET_GRADIENTS_H:
    case AMDGPU::TEX_GET_GRADIENTS_V:
    case AMDGPU::TEX_GET_TEXTURE_RESINFO:
    case AMDGPU::TEX_LD:
    case AMDGPU::TEX_LDPTR:
    case AMDGPU::TEX_SAMPLE:
    case AMDGPU::TEX_SAMPLE_C:
    case AMDGPU::TEX_SAMPLE_C_G:
    case AMDGPU::TEX_SAMPLE_C_L:
    case AMDGPU::TEX_SAMPLE_C_LB:
    case AMDGPU::TEX_SAMPLE_G:
    case AMDGPU::TEX_SAMPLE_L:
    case AMDGPU::TEX_SAMPLE_LB:
    case AMDGPU::TEX_SET_GRADIENTS_H:
    case AMDGPU::TEX_SET_GRADIENTS_V: {
      // op: RESOURCE_ID
      op = getMachineOpValue(MI, MI.getOperand(13), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      // op: SRC_GPR
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 16;
      // op: DST_GPR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 32;
      // op: DST_SEL_X
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 41;
      // op: DST_SEL_Y
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 44;
      // op: DST_SEL_Z
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 47;
      // op: DST_SEL_W
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 50;
      // op: COORD_TYPE_X
      op = getMachineOpValue(MI, MI.getOperand(15), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 60;
      // op: COORD_TYPE_Y
      op = getMachineOpValue(MI, MI.getOperand(16), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      // op: COORD_TYPE_Z
      op = getMachineOpValue(MI, MI.getOperand(17), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 62;
      // op: COORD_TYPE_W
      op = getMachineOpValue(MI, MI.getOperand(18), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 63;
      break;
    }
    case AMDGPU::DS_GWS_BARRIER_si:
    case AMDGPU::DS_GWS_BARRIER_vi:
    case AMDGPU::DS_GWS_INIT_si:
    case AMDGPU::DS_GWS_INIT_vi:
    case AMDGPU::DS_GWS_SEMA_BR_si:
    case AMDGPU::DS_GWS_SEMA_BR_vi:
    case AMDGPU::DS_GWS_SEMA_P_si:
    case AMDGPU::DS_GWS_SEMA_P_vi:
    case AMDGPU::DS_GWS_SEMA_V_si:
    case AMDGPU::DS_GWS_SEMA_V_vi: {
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      break;
    }
    case AMDGPU::FLAT_ATOMIC_ADD:
    case AMDGPU::FLAT_ATOMIC_ADD_X2:
    case AMDGPU::FLAT_ATOMIC_AND:
    case AMDGPU::FLAT_ATOMIC_AND_X2:
    case AMDGPU::FLAT_ATOMIC_CMPSWAP:
    case AMDGPU::FLAT_ATOMIC_CMPSWAP_X2:
    case AMDGPU::FLAT_ATOMIC_DEC:
    case AMDGPU::FLAT_ATOMIC_DEC_X2:
    case AMDGPU::FLAT_ATOMIC_FCMPSWAP:
    case AMDGPU::FLAT_ATOMIC_FCMPSWAP_X2:
    case AMDGPU::FLAT_ATOMIC_FMAX:
    case AMDGPU::FLAT_ATOMIC_FMAX_X2:
    case AMDGPU::FLAT_ATOMIC_FMIN:
    case AMDGPU::FLAT_ATOMIC_FMIN_X2:
    case AMDGPU::FLAT_ATOMIC_INC:
    case AMDGPU::FLAT_ATOMIC_INC_X2:
    case AMDGPU::FLAT_ATOMIC_OR:
    case AMDGPU::FLAT_ATOMIC_OR_X2:
    case AMDGPU::FLAT_ATOMIC_RSUB:
    case AMDGPU::FLAT_ATOMIC_RSUB_X2:
    case AMDGPU::FLAT_ATOMIC_SMAX:
    case AMDGPU::FLAT_ATOMIC_SMAX_X2:
    case AMDGPU::FLAT_ATOMIC_SMIN:
    case AMDGPU::FLAT_ATOMIC_SMIN_X2:
    case AMDGPU::FLAT_ATOMIC_SUB:
    case AMDGPU::FLAT_ATOMIC_SUB_X2:
    case AMDGPU::FLAT_ATOMIC_SWAP:
    case AMDGPU::FLAT_ATOMIC_SWAP_X2:
    case AMDGPU::FLAT_ATOMIC_UMAX:
    case AMDGPU::FLAT_ATOMIC_UMAX_X2:
    case AMDGPU::FLAT_ATOMIC_UMIN:
    case AMDGPU::FLAT_ATOMIC_UMIN_X2:
    case AMDGPU::FLAT_ATOMIC_XOR:
    case AMDGPU::FLAT_ATOMIC_XOR_X2: {
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      break;
    }
    case AMDGPU::FLAT_STORE_BYTE:
    case AMDGPU::FLAT_STORE_DWORD:
    case AMDGPU::FLAT_STORE_DWORDX2:
    case AMDGPU::FLAT_STORE_DWORDX3:
    case AMDGPU::FLAT_STORE_DWORDX4:
    case AMDGPU::FLAT_STORE_SHORT: {
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      break;
    }
    case AMDGPU::FLAT_ATOMIC_ADD_RTN:
    case AMDGPU::FLAT_ATOMIC_ADD_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_AND_RTN:
    case AMDGPU::FLAT_ATOMIC_AND_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_CMPSWAP_RTN:
    case AMDGPU::FLAT_ATOMIC_CMPSWAP_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_DEC_RTN:
    case AMDGPU::FLAT_ATOMIC_DEC_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_FCMPSWAP_RTN:
    case AMDGPU::FLAT_ATOMIC_FCMPSWAP_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_FMAX_RTN:
    case AMDGPU::FLAT_ATOMIC_FMAX_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_FMIN_RTN:
    case AMDGPU::FLAT_ATOMIC_FMIN_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_INC_RTN:
    case AMDGPU::FLAT_ATOMIC_INC_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_OR_RTN:
    case AMDGPU::FLAT_ATOMIC_OR_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_RSUB_RTN:
    case AMDGPU::FLAT_ATOMIC_RSUB_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_SMAX_RTN:
    case AMDGPU::FLAT_ATOMIC_SMAX_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_SMIN_RTN:
    case AMDGPU::FLAT_ATOMIC_SMIN_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_SUB_RTN:
    case AMDGPU::FLAT_ATOMIC_SUB_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_SWAP_RTN:
    case AMDGPU::FLAT_ATOMIC_SWAP_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_UMAX_RTN:
    case AMDGPU::FLAT_ATOMIC_UMAX_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_UMIN_RTN:
    case AMDGPU::FLAT_ATOMIC_UMIN_X2_RTN:
    case AMDGPU::FLAT_ATOMIC_XOR_RTN:
    case AMDGPU::FLAT_ATOMIC_XOR_X2_RTN: {
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      break;
    }
    case AMDGPU::FLAT_LOAD_DWORD:
    case AMDGPU::FLAT_LOAD_DWORDX2:
    case AMDGPU::FLAT_LOAD_DWORDX3:
    case AMDGPU::FLAT_LOAD_DWORDX4:
    case AMDGPU::FLAT_LOAD_SBYTE:
    case AMDGPU::FLAT_LOAD_SSHORT:
    case AMDGPU::FLAT_LOAD_UBYTE:
    case AMDGPU::FLAT_LOAD_USHORT: {
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      break;
    }
    case AMDGPU::EG_ExportBuf: {
      // op: arraybase
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(8191);
      // op: type
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 13;
      // op: gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 15;
      // op: arraySize
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 32;
      // op: compMask
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 44;
      // op: eop
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 53;
      // op: inst
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 54;
      break;
    }
    case AMDGPU::R600_ExportBuf: {
      // op: arraybase
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(8191);
      // op: type
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 13;
      // op: gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 15;
      // op: arraySize
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 32;
      // op: compMask
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 44;
      // op: eop
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 53;
      // op: inst
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 55;
      break;
    }
    case AMDGPU::EG_ExportSwz: {
      // op: arraybase
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(8191);
      // op: type
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 13;
      // op: gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 15;
      // op: sw_x
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 32;
      // op: sw_y
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 35;
      // op: sw_z
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 38;
      // op: sw_w
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 41;
      // op: eop
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 53;
      // op: inst
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 54;
      break;
    }
    case AMDGPU::R600_ExportSwz: {
      // op: arraybase
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(8191);
      // op: type
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 13;
      // op: gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 15;
      // op: sw_x
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 32;
      // op: sw_y
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 35;
      // op: sw_z
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 38;
      // op: sw_w
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 41;
      // op: eop
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 53;
      // op: inst
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 55;
      break;
    }
    case AMDGPU::TEX_VTX_CONSTBUF:
    case AMDGPU::TEX_VTX_TEXBUF: {
      // op: dst_gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 32;
      // op: src_gpr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 16;
      // op: BUFFER_ID
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::EXP_si:
    case AMDGPU::EXP_vi: {
      // op: en
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: tgt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(63)) << 4;
      // op: compr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 10;
      // op: done
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 11;
      // op: vm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: vsrc0
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vsrc1
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: vsrc2
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 48;
      // op: vsrc3
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::DS_ADD_SRC2_U32_vi:
    case AMDGPU::DS_ADD_SRC2_U64_vi:
    case AMDGPU::DS_AND_SRC2_B32_vi:
    case AMDGPU::DS_AND_SRC2_B64_vi:
    case AMDGPU::DS_DEC_SRC2_U32_vi:
    case AMDGPU::DS_DEC_SRC2_U64_vi:
    case AMDGPU::DS_INC_SRC2_U32_vi:
    case AMDGPU::DS_INC_SRC2_U64_vi:
    case AMDGPU::DS_MAX_SRC2_F32_vi:
    case AMDGPU::DS_MAX_SRC2_F64_vi:
    case AMDGPU::DS_MAX_SRC2_I32_vi:
    case AMDGPU::DS_MAX_SRC2_I64_vi:
    case AMDGPU::DS_MAX_SRC2_U32_vi:
    case AMDGPU::DS_MAX_SRC2_U64_vi:
    case AMDGPU::DS_MIN_SRC2_F32_vi:
    case AMDGPU::DS_MIN_SRC2_F64_vi:
    case AMDGPU::DS_MIN_SRC2_I32_vi:
    case AMDGPU::DS_MIN_SRC2_I64_vi:
    case AMDGPU::DS_MIN_SRC2_U32_vi:
    case AMDGPU::DS_MIN_SRC2_U64_vi:
    case AMDGPU::DS_OR_SRC2_B32_vi:
    case AMDGPU::DS_OR_SRC2_B64_vi:
    case AMDGPU::DS_RSUB_SRC2_U32_vi:
    case AMDGPU::DS_RSUB_SRC2_U64_vi:
    case AMDGPU::DS_SUB_SRC2_U32_vi:
    case AMDGPU::DS_SUB_SRC2_U64_vi:
    case AMDGPU::DS_WRITE_SRC2_B32_vi:
    case AMDGPU::DS_WRITE_SRC2_B64_vi:
    case AMDGPU::DS_XOR_SRC2_B32_vi:
    case AMDGPU::DS_XOR_SRC2_B64_vi: {
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_ADD_SRC2_U32_si:
    case AMDGPU::DS_ADD_SRC2_U64_si:
    case AMDGPU::DS_AND_SRC2_B32_si:
    case AMDGPU::DS_AND_SRC2_B64_si:
    case AMDGPU::DS_DEC_SRC2_U32_si:
    case AMDGPU::DS_DEC_SRC2_U64_si:
    case AMDGPU::DS_INC_SRC2_U32_si:
    case AMDGPU::DS_INC_SRC2_U64_si:
    case AMDGPU::DS_MAX_SRC2_F32_si:
    case AMDGPU::DS_MAX_SRC2_F64_si:
    case AMDGPU::DS_MAX_SRC2_I32_si:
    case AMDGPU::DS_MAX_SRC2_I64_si:
    case AMDGPU::DS_MAX_SRC2_U32_si:
    case AMDGPU::DS_MAX_SRC2_U64_si:
    case AMDGPU::DS_MIN_SRC2_F32_si:
    case AMDGPU::DS_MIN_SRC2_F64_si:
    case AMDGPU::DS_MIN_SRC2_I32_si:
    case AMDGPU::DS_MIN_SRC2_I64_si:
    case AMDGPU::DS_MIN_SRC2_U32_si:
    case AMDGPU::DS_MIN_SRC2_U64_si:
    case AMDGPU::DS_OR_SRC2_B32_si:
    case AMDGPU::DS_OR_SRC2_B64_si:
    case AMDGPU::DS_RSUB_SRC2_U32_si:
    case AMDGPU::DS_RSUB_SRC2_U64_si:
    case AMDGPU::DS_SUB_SRC2_U32_si:
    case AMDGPU::DS_SUB_SRC2_U64_si:
    case AMDGPU::DS_WRITE_SRC2_B32_si:
    case AMDGPU::DS_WRITE_SRC2_B64_si:
    case AMDGPU::DS_XOR_SRC2_B32_si:
    case AMDGPU::DS_XOR_SRC2_B64_si: {
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_ADD_U32_vi:
    case AMDGPU::DS_ADD_U64_vi:
    case AMDGPU::DS_AND_B32_vi:
    case AMDGPU::DS_AND_B64_vi:
    case AMDGPU::DS_DEC_U32_vi:
    case AMDGPU::DS_DEC_U64_vi:
    case AMDGPU::DS_INC_U32_vi:
    case AMDGPU::DS_INC_U64_vi:
    case AMDGPU::DS_MAX_F64_vi:
    case AMDGPU::DS_MAX_I32_vi:
    case AMDGPU::DS_MAX_I64_vi:
    case AMDGPU::DS_MAX_U32_vi:
    case AMDGPU::DS_MAX_U64_vi:
    case AMDGPU::DS_MIN_F64_vi:
    case AMDGPU::DS_MIN_I32_vi:
    case AMDGPU::DS_MIN_I64_vi:
    case AMDGPU::DS_MIN_U32_vi:
    case AMDGPU::DS_MIN_U64_vi:
    case AMDGPU::DS_OR_B32_vi:
    case AMDGPU::DS_OR_B64_vi:
    case AMDGPU::DS_RSUB_U32_vi:
    case AMDGPU::DS_RSUB_U64_vi:
    case AMDGPU::DS_SUB_U32_vi:
    case AMDGPU::DS_SUB_U64_vi:
    case AMDGPU::DS_WRITE_B16_vi:
    case AMDGPU::DS_WRITE_B32_vi:
    case AMDGPU::DS_WRITE_B64_vi:
    case AMDGPU::DS_WRITE_B8_vi:
    case AMDGPU::DS_XOR_B32_vi:
    case AMDGPU::DS_XOR_B64_vi: {
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_ADD_U32_si:
    case AMDGPU::DS_ADD_U64_si:
    case AMDGPU::DS_AND_B32_si:
    case AMDGPU::DS_AND_B64_si:
    case AMDGPU::DS_DEC_U32_si:
    case AMDGPU::DS_DEC_U64_si:
    case AMDGPU::DS_INC_U32_si:
    case AMDGPU::DS_INC_U64_si:
    case AMDGPU::DS_MAX_F64_si:
    case AMDGPU::DS_MAX_I32_si:
    case AMDGPU::DS_MAX_I64_si:
    case AMDGPU::DS_MAX_U32_si:
    case AMDGPU::DS_MAX_U64_si:
    case AMDGPU::DS_MIN_F64_si:
    case AMDGPU::DS_MIN_I32_si:
    case AMDGPU::DS_MIN_I64_si:
    case AMDGPU::DS_MIN_U32_si:
    case AMDGPU::DS_MIN_U64_si:
    case AMDGPU::DS_OR_B32_si:
    case AMDGPU::DS_OR_B64_si:
    case AMDGPU::DS_RSUB_U32_si:
    case AMDGPU::DS_RSUB_U64_si:
    case AMDGPU::DS_SUB_U32_si:
    case AMDGPU::DS_SUB_U64_si:
    case AMDGPU::DS_WRITE_B16_si:
    case AMDGPU::DS_WRITE_B32_si:
    case AMDGPU::DS_WRITE_B64_si:
    case AMDGPU::DS_WRITE_B8_si:
    case AMDGPU::DS_XOR_B32_si:
    case AMDGPU::DS_XOR_B64_si: {
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_CMPST_B32_vi:
    case AMDGPU::DS_CMPST_B64_vi:
    case AMDGPU::DS_CMPST_F32_vi:
    case AMDGPU::DS_CMPST_F64_vi:
    case AMDGPU::DS_MAX_F32_vi:
    case AMDGPU::DS_MIN_F32_vi:
    case AMDGPU::DS_MSKOR_B32_vi:
    case AMDGPU::DS_MSKOR_B64_vi: {
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: data1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 48;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_CMPST_B32_si:
    case AMDGPU::DS_CMPST_B64_si:
    case AMDGPU::DS_CMPST_F32_si:
    case AMDGPU::DS_CMPST_F64_si:
    case AMDGPU::DS_MAX_F32_si:
    case AMDGPU::DS_MIN_F32_si:
    case AMDGPU::DS_MSKOR_B32_si:
    case AMDGPU::DS_MSKOR_B64_si: {
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: data1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 48;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_WRITE2ST64_B32_vi:
    case AMDGPU::DS_WRITE2ST64_B64_vi:
    case AMDGPU::DS_WRITE2_B32_vi:
    case AMDGPU::DS_WRITE2_B64_vi: {
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: data1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 48;
      // op: offset0
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: offset1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::DS_WRITE2ST64_B32_si:
    case AMDGPU::DS_WRITE2ST64_B64_si:
    case AMDGPU::DS_WRITE2_B32_si:
    case AMDGPU::DS_WRITE2_B64_si: {
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: data1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 48;
      // op: offset0
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: offset1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::LITERALS: {
      // op: literal1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      // op: literal2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(4294967295)) << 32;
      break;
    }
    case AMDGPU::ALU_CLAUSE:
    case AMDGPU::FETCH_CLAUSE: {
      // op: num
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      break;
    }
    case AMDGPU::TBUFFER_LOAD_FORMAT_XYZW_vi:
    case AMDGPU::TBUFFER_STORE_FORMAT_XYZW_vi:
    case AMDGPU::TBUFFER_STORE_FORMAT_XYZ_vi:
    case AMDGPU::TBUFFER_STORE_FORMAT_XY_vi:
    case AMDGPU::TBUFFER_STORE_FORMAT_X_vi: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: offen
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: idxen
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 13;
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      // op: dfmt
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 19;
      // op: nfmt
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 23;
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 54;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_LOAD_DWORDX2_OFFSET_vi:
    case AMDGPU::BUFFER_LOAD_DWORDX4_OFFSET_vi:
    case AMDGPU::BUFFER_LOAD_DWORD_OFFSET_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFSET_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFSET_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFSET_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_X_OFFSET_vi:
    case AMDGPU::BUFFER_LOAD_SBYTE_OFFSET_vi:
    case AMDGPU::BUFFER_LOAD_SSHORT_OFFSET_vi:
    case AMDGPU::BUFFER_LOAD_UBYTE_OFFSET_vi:
    case AMDGPU::BUFFER_LOAD_USHORT_OFFSET_vi:
    case AMDGPU::BUFFER_STORE_BYTE_OFFSET_vi:
    case AMDGPU::BUFFER_STORE_DWORDX2_OFFSET_vi:
    case AMDGPU::BUFFER_STORE_DWORDX4_OFFSET_vi:
    case AMDGPU::BUFFER_STORE_DWORD_OFFSET_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFSET_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFSET_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XY_OFFSET_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_X_OFFSET_vi:
    case AMDGPU::BUFFER_STORE_SHORT_OFFSET_vi: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_LOAD_DWORDX2_OFFSET_si:
    case AMDGPU::BUFFER_LOAD_DWORDX4_OFFSET_si:
    case AMDGPU::BUFFER_LOAD_DWORD_OFFSET_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFSET_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFSET_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFSET_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_X_OFFSET_si:
    case AMDGPU::BUFFER_LOAD_SBYTE_OFFSET_si:
    case AMDGPU::BUFFER_LOAD_SSHORT_OFFSET_si:
    case AMDGPU::BUFFER_LOAD_UBYTE_OFFSET_si:
    case AMDGPU::BUFFER_LOAD_USHORT_OFFSET_si:
    case AMDGPU::BUFFER_STORE_BYTE_OFFSET_si:
    case AMDGPU::BUFFER_STORE_DWORDX2_OFFSET_si:
    case AMDGPU::BUFFER_STORE_DWORDX4_OFFSET_si:
    case AMDGPU::BUFFER_STORE_DWORD_OFFSET_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFSET_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFSET_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XY_OFFSET_si:
    case AMDGPU::BUFFER_STORE_FORMAT_X_OFFSET_si:
    case AMDGPU::BUFFER_STORE_SHORT_OFFSET_si: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 54;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_ATOMIC_ADD_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_AND_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_OR_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_SMAX_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_SMIN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_SUB_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_SWAP_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_UMAX_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_UMIN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_XOR_OFFSET_vi: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_ATOMIC_ADD_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_AND_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_OR_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_SMAX_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_SMIN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_SUB_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_SWAP_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_UMAX_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_UMIN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_XOR_OFFSET_si: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 54;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_LOAD_DWORDX2_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_DWORDX2_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_DWORDX2_OFFEN_vi:
    case AMDGPU::BUFFER_LOAD_DWORDX4_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_DWORDX4_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_DWORDX4_OFFEN_vi:
    case AMDGPU::BUFFER_LOAD_DWORD_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_DWORD_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_DWORD_OFFEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZ_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZ_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XY_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XY_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_X_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_X_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_FORMAT_X_OFFEN_vi:
    case AMDGPU::BUFFER_LOAD_SBYTE_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_SBYTE_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_SBYTE_OFFEN_vi:
    case AMDGPU::BUFFER_LOAD_SSHORT_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_SSHORT_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_SSHORT_OFFEN_vi:
    case AMDGPU::BUFFER_LOAD_UBYTE_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_UBYTE_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_UBYTE_OFFEN_vi:
    case AMDGPU::BUFFER_LOAD_USHORT_BOTHEN_vi:
    case AMDGPU::BUFFER_LOAD_USHORT_IDXEN_vi:
    case AMDGPU::BUFFER_LOAD_USHORT_OFFEN_vi:
    case AMDGPU::BUFFER_STORE_BYTE_BOTHEN_vi:
    case AMDGPU::BUFFER_STORE_BYTE_IDXEN_vi:
    case AMDGPU::BUFFER_STORE_BYTE_OFFEN_vi:
    case AMDGPU::BUFFER_STORE_DWORDX2_BOTHEN_vi:
    case AMDGPU::BUFFER_STORE_DWORDX2_IDXEN_vi:
    case AMDGPU::BUFFER_STORE_DWORDX2_OFFEN_vi:
    case AMDGPU::BUFFER_STORE_DWORDX4_BOTHEN_vi:
    case AMDGPU::BUFFER_STORE_DWORDX4_IDXEN_vi:
    case AMDGPU::BUFFER_STORE_DWORDX4_OFFEN_vi:
    case AMDGPU::BUFFER_STORE_DWORD_BOTHEN_vi:
    case AMDGPU::BUFFER_STORE_DWORD_IDXEN_vi:
    case AMDGPU::BUFFER_STORE_DWORD_OFFEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZW_BOTHEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZW_IDXEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZ_BOTHEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZ_IDXEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XY_BOTHEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XY_IDXEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XY_OFFEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_X_BOTHEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_X_IDXEN_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_X_OFFEN_vi:
    case AMDGPU::BUFFER_STORE_SHORT_BOTHEN_vi:
    case AMDGPU::BUFFER_STORE_SHORT_IDXEN_vi:
    case AMDGPU::BUFFER_STORE_SHORT_OFFEN_vi: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_LOAD_DWORDX2_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_DWORDX2_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_DWORDX2_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_DWORDX2_OFFEN_si:
    case AMDGPU::BUFFER_LOAD_DWORDX4_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_DWORDX4_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_DWORDX4_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_DWORDX4_OFFEN_si:
    case AMDGPU::BUFFER_LOAD_DWORD_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_DWORD_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_DWORD_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_DWORD_OFFEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZ_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZ_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZ_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XY_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XY_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XY_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_X_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_X_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_X_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_FORMAT_X_OFFEN_si:
    case AMDGPU::BUFFER_LOAD_SBYTE_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_SBYTE_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_SBYTE_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_SBYTE_OFFEN_si:
    case AMDGPU::BUFFER_LOAD_SSHORT_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_SSHORT_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_SSHORT_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_SSHORT_OFFEN_si:
    case AMDGPU::BUFFER_LOAD_UBYTE_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_UBYTE_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_UBYTE_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_UBYTE_OFFEN_si:
    case AMDGPU::BUFFER_LOAD_USHORT_ADDR64_si:
    case AMDGPU::BUFFER_LOAD_USHORT_BOTHEN_si:
    case AMDGPU::BUFFER_LOAD_USHORT_IDXEN_si:
    case AMDGPU::BUFFER_LOAD_USHORT_OFFEN_si:
    case AMDGPU::BUFFER_STORE_BYTE_ADDR64_si:
    case AMDGPU::BUFFER_STORE_BYTE_BOTHEN_si:
    case AMDGPU::BUFFER_STORE_BYTE_IDXEN_si:
    case AMDGPU::BUFFER_STORE_BYTE_OFFEN_si:
    case AMDGPU::BUFFER_STORE_DWORDX2_ADDR64_si:
    case AMDGPU::BUFFER_STORE_DWORDX2_BOTHEN_si:
    case AMDGPU::BUFFER_STORE_DWORDX2_IDXEN_si:
    case AMDGPU::BUFFER_STORE_DWORDX2_OFFEN_si:
    case AMDGPU::BUFFER_STORE_DWORDX4_ADDR64_si:
    case AMDGPU::BUFFER_STORE_DWORDX4_BOTHEN_si:
    case AMDGPU::BUFFER_STORE_DWORDX4_IDXEN_si:
    case AMDGPU::BUFFER_STORE_DWORDX4_OFFEN_si:
    case AMDGPU::BUFFER_STORE_DWORD_ADDR64_si:
    case AMDGPU::BUFFER_STORE_DWORD_BOTHEN_si:
    case AMDGPU::BUFFER_STORE_DWORD_IDXEN_si:
    case AMDGPU::BUFFER_STORE_DWORD_OFFEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZW_ADDR64_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZW_BOTHEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZW_IDXEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZ_ADDR64_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZ_BOTHEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZ_IDXEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XY_ADDR64_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XY_BOTHEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XY_IDXEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XY_OFFEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_X_ADDR64_si:
    case AMDGPU::BUFFER_STORE_FORMAT_X_BOTHEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_X_IDXEN_si:
    case AMDGPU::BUFFER_STORE_FORMAT_X_OFFEN_si:
    case AMDGPU::BUFFER_STORE_SHORT_ADDR64_si:
    case AMDGPU::BUFFER_STORE_SHORT_BOTHEN_si:
    case AMDGPU::BUFFER_STORE_SHORT_IDXEN_si:
    case AMDGPU::BUFFER_STORE_SHORT_OFFEN_si: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 54;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_STORE_BYTEanonymous_774_vi:
    case AMDGPU::BUFFER_STORE_DWORDX2anonymous_774_vi:
    case AMDGPU::BUFFER_STORE_DWORDX4anonymous_774_vi:
    case AMDGPU::BUFFER_STORE_DWORDanonymous_774_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZWanonymous_774_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZanonymous_774_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_XYanonymous_774_vi:
    case AMDGPU::BUFFER_STORE_FORMAT_Xanonymous_774_vi:
    case AMDGPU::BUFFER_STORE_SHORTanonymous_774_vi: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: offen
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: idxen
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 13;
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_STORE_BYTEanonymous_774_si:
    case AMDGPU::BUFFER_STORE_DWORDX2anonymous_774_si:
    case AMDGPU::BUFFER_STORE_DWORDX4anonymous_774_si:
    case AMDGPU::BUFFER_STORE_DWORDanonymous_774_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZWanonymous_774_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYZanonymous_774_si:
    case AMDGPU::BUFFER_STORE_FORMAT_XYanonymous_774_si:
    case AMDGPU::BUFFER_STORE_FORMAT_Xanonymous_774_si:
    case AMDGPU::BUFFER_STORE_SHORTanonymous_774_si: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: offen
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: idxen
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 13;
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 54;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_ATOMIC_ADD_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_AND_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_OR_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_SMAX_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_SMIN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_SUB_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_SWAP_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_UMAX_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_UMIN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_XOR_ADDR64_si: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 54;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_ATOMIC_ADD_RTN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_AND_RTN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_OR_RTN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_SMAX_RTN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_SMIN_RTN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_SUB_RTN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_SWAP_RTN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_UMAX_RTN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_UMIN_RTN_OFFSET_vi:
    case AMDGPU::BUFFER_ATOMIC_XOR_RTN_OFFSET_vi: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_ATOMIC_ADD_RTN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_AND_RTN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_OR_RTN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_SMAX_RTN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_SMIN_RTN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_SUB_RTN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_SWAP_RTN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_UMAX_RTN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_UMIN_RTN_OFFSET_si:
    case AMDGPU::BUFFER_ATOMIC_XOR_RTN_OFFSET_si: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 54;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::BUFFER_ATOMIC_ADD_RTN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_AND_RTN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_OR_RTN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_SMAX_RTN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_SMIN_RTN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_SUB_RTN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_SWAP_RTN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_UMAX_RTN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_UMIN_RTN_ADDR64_si:
    case AMDGPU::BUFFER_ATOMIC_XOR_RTN_ADDR64_si: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 54;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::RAT_MSKOR:
    case AMDGPU::RAT_STORE_DWORD128:
    case AMDGPU::RAT_STORE_DWORD32:
    case AMDGPU::RAT_STORE_DWORD64: {
      // op: rw_gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 15;
      // op: index_gpr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 23;
      break;
    }
    case AMDGPU::RAT_WRITE_CACHELESS_128_eg:
    case AMDGPU::RAT_WRITE_CACHELESS_32_eg:
    case AMDGPU::RAT_WRITE_CACHELESS_64_eg: {
      // op: rw_gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 15;
      // op: index_gpr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 23;
      // op: eop
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 53;
      break;
    }
    case AMDGPU::S_BUFFER_LOAD_DWORDX16_IMM_vi:
    case AMDGPU::S_BUFFER_LOAD_DWORDX16_SGPR_vi:
    case AMDGPU::S_BUFFER_LOAD_DWORDX2_IMM_vi:
    case AMDGPU::S_BUFFER_LOAD_DWORDX2_SGPR_vi:
    case AMDGPU::S_BUFFER_LOAD_DWORDX4_IMM_vi:
    case AMDGPU::S_BUFFER_LOAD_DWORDX4_SGPR_vi:
    case AMDGPU::S_BUFFER_LOAD_DWORDX8_IMM_vi:
    case AMDGPU::S_BUFFER_LOAD_DWORDX8_SGPR_vi:
    case AMDGPU::S_BUFFER_LOAD_DWORD_IMM_vi:
    case AMDGPU::S_BUFFER_LOAD_DWORD_SGPR_vi:
    case AMDGPU::S_LOAD_DWORDX16_IMM_vi:
    case AMDGPU::S_LOAD_DWORDX16_SGPR_vi:
    case AMDGPU::S_LOAD_DWORDX2_IMM_vi:
    case AMDGPU::S_LOAD_DWORDX2_SGPR_vi:
    case AMDGPU::S_LOAD_DWORDX4_IMM_vi:
    case AMDGPU::S_LOAD_DWORDX4_SGPR_vi:
    case AMDGPU::S_LOAD_DWORDX8_IMM_vi:
    case AMDGPU::S_LOAD_DWORDX8_SGPR_vi:
    case AMDGPU::S_LOAD_DWORD_IMM_vi:
    case AMDGPU::S_LOAD_DWORD_SGPR_vi: {
      // op: sbase
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(126)) >> 1;
      // op: sdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 6;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 32;
      break;
    }
    case AMDGPU::S_BUFFER_LOAD_DWORDX16_IMM_si:
    case AMDGPU::S_BUFFER_LOAD_DWORDX16_SGPR_si:
    case AMDGPU::S_BUFFER_LOAD_DWORDX2_IMM_si:
    case AMDGPU::S_BUFFER_LOAD_DWORDX2_SGPR_si:
    case AMDGPU::S_BUFFER_LOAD_DWORDX4_IMM_si:
    case AMDGPU::S_BUFFER_LOAD_DWORDX4_SGPR_si:
    case AMDGPU::S_BUFFER_LOAD_DWORDX8_IMM_si:
    case AMDGPU::S_BUFFER_LOAD_DWORDX8_SGPR_si:
    case AMDGPU::S_BUFFER_LOAD_DWORD_IMM_si:
    case AMDGPU::S_BUFFER_LOAD_DWORD_SGPR_si:
    case AMDGPU::S_LOAD_DWORDX16_IMM_si:
    case AMDGPU::S_LOAD_DWORDX16_SGPR_si:
    case AMDGPU::S_LOAD_DWORDX2_IMM_si:
    case AMDGPU::S_LOAD_DWORDX2_SGPR_si:
    case AMDGPU::S_LOAD_DWORDX4_IMM_si:
    case AMDGPU::S_LOAD_DWORDX4_SGPR_si:
    case AMDGPU::S_LOAD_DWORDX8_IMM_si:
    case AMDGPU::S_LOAD_DWORDX8_SGPR_si:
    case AMDGPU::S_LOAD_DWORD_IMM_si:
    case AMDGPU::S_LOAD_DWORD_SGPR_si: {
      // op: sdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 15;
      // op: sbase
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(126)) << 8;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(255);
      break;
    }
    case AMDGPU::S_GETPC_B64_si:
    case AMDGPU::S_GETPC_B64_vi: {
      // op: sdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 16;
      break;
    }
    case AMDGPU::S_CBRANCH_I_FORK_si:
    case AMDGPU::S_CBRANCH_I_FORK_vi:
    case AMDGPU::S_CMOVK_I32_si:
    case AMDGPU::S_CMOVK_I32_vi:
    case AMDGPU::S_GETREG_B32_si:
    case AMDGPU::S_GETREG_B32_vi:
    case AMDGPU::S_MOVK_I32_si:
    case AMDGPU::S_MOVK_I32_vi:
    case AMDGPU::S_SETREG_B32_si:
    case AMDGPU::S_SETREG_B32_vi: {
      // op: sdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 16;
      // op: simm16
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::S_ADDK_I32_si:
    case AMDGPU::S_ADDK_I32_vi:
    case AMDGPU::S_MULK_I32_si:
    case AMDGPU::S_MULK_I32_vi: {
      // op: sdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 16;
      // op: simm16
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::S_ABS_I32_si:
    case AMDGPU::S_ABS_I32_vi:
    case AMDGPU::S_ANDN2_SAVEEXEC_B64_si:
    case AMDGPU::S_ANDN2_SAVEEXEC_B64_vi:
    case AMDGPU::S_AND_SAVEEXEC_B64_si:
    case AMDGPU::S_AND_SAVEEXEC_B64_vi:
    case AMDGPU::S_BCNT0_I32_B32_si:
    case AMDGPU::S_BCNT0_I32_B32_vi:
    case AMDGPU::S_BCNT0_I32_B64_si:
    case AMDGPU::S_BCNT0_I32_B64_vi:
    case AMDGPU::S_BCNT1_I32_B32_si:
    case AMDGPU::S_BCNT1_I32_B32_vi:
    case AMDGPU::S_BCNT1_I32_B64_si:
    case AMDGPU::S_BCNT1_I32_B64_vi:
    case AMDGPU::S_BITSET0_B32_si:
    case AMDGPU::S_BITSET0_B32_vi:
    case AMDGPU::S_BITSET0_B64_si:
    case AMDGPU::S_BITSET0_B64_vi:
    case AMDGPU::S_BITSET1_B32_si:
    case AMDGPU::S_BITSET1_B32_vi:
    case AMDGPU::S_BITSET1_B64_si:
    case AMDGPU::S_BITSET1_B64_vi:
    case AMDGPU::S_BREV_B32_si:
    case AMDGPU::S_BREV_B32_vi:
    case AMDGPU::S_BREV_B64_si:
    case AMDGPU::S_BREV_B64_vi:
    case AMDGPU::S_CMOV_B32_si:
    case AMDGPU::S_CMOV_B32_vi:
    case AMDGPU::S_CMOV_B64_si:
    case AMDGPU::S_CMOV_B64_vi:
    case AMDGPU::S_FF0_I32_B32_si:
    case AMDGPU::S_FF0_I32_B32_vi:
    case AMDGPU::S_FF0_I32_B64_si:
    case AMDGPU::S_FF0_I32_B64_vi:
    case AMDGPU::S_FF1_I32_B32_si:
    case AMDGPU::S_FF1_I32_B32_vi:
    case AMDGPU::S_FF1_I32_B64_si:
    case AMDGPU::S_FF1_I32_B64_vi:
    case AMDGPU::S_FLBIT_I32_B32_si:
    case AMDGPU::S_FLBIT_I32_B32_vi:
    case AMDGPU::S_FLBIT_I32_B64_si:
    case AMDGPU::S_FLBIT_I32_B64_vi:
    case AMDGPU::S_FLBIT_I32_I64_si:
    case AMDGPU::S_FLBIT_I32_I64_vi:
    case AMDGPU::S_FLBIT_I32_si:
    case AMDGPU::S_FLBIT_I32_vi:
    case AMDGPU::S_MOVRELD_B32_si:
    case AMDGPU::S_MOVRELD_B32_vi:
    case AMDGPU::S_MOVRELD_B64_si:
    case AMDGPU::S_MOVRELD_B64_vi:
    case AMDGPU::S_MOVRELS_B32_si:
    case AMDGPU::S_MOVRELS_B32_vi:
    case AMDGPU::S_MOVRELS_B64_si:
    case AMDGPU::S_MOVRELS_B64_vi:
    case AMDGPU::S_MOV_B32_si:
    case AMDGPU::S_MOV_B32_vi:
    case AMDGPU::S_MOV_B64_si:
    case AMDGPU::S_MOV_B64_vi:
    case AMDGPU::S_MOV_FED_B32_si:
    case AMDGPU::S_MOV_FED_B32_vi:
    case AMDGPU::S_MOV_REGRD_B32_si:
    case AMDGPU::S_MOV_REGRD_B32_vi:
    case AMDGPU::S_NAND_SAVEEXEC_B64_si:
    case AMDGPU::S_NAND_SAVEEXEC_B64_vi:
    case AMDGPU::S_NOR_SAVEEXEC_B64_si:
    case AMDGPU::S_NOR_SAVEEXEC_B64_vi:
    case AMDGPU::S_NOT_B32_si:
    case AMDGPU::S_NOT_B32_vi:
    case AMDGPU::S_NOT_B64_si:
    case AMDGPU::S_NOT_B64_vi:
    case AMDGPU::S_ORN2_SAVEEXEC_B64_si:
    case AMDGPU::S_ORN2_SAVEEXEC_B64_vi:
    case AMDGPU::S_OR_SAVEEXEC_B64_si:
    case AMDGPU::S_OR_SAVEEXEC_B64_vi:
    case AMDGPU::S_QUADMASK_B32_si:
    case AMDGPU::S_QUADMASK_B32_vi:
    case AMDGPU::S_QUADMASK_B64_si:
    case AMDGPU::S_QUADMASK_B64_vi:
    case AMDGPU::S_RFE_B64_si:
    case AMDGPU::S_RFE_B64_vi:
    case AMDGPU::S_SETPC_B64_si:
    case AMDGPU::S_SETPC_B64_vi:
    case AMDGPU::S_SEXT_I32_I16_si:
    case AMDGPU::S_SEXT_I32_I16_vi:
    case AMDGPU::S_SEXT_I32_I8_si:
    case AMDGPU::S_SEXT_I32_I8_vi:
    case AMDGPU::S_SWAPPC_B64_si:
    case AMDGPU::S_SWAPPC_B64_vi:
    case AMDGPU::S_WQM_B32_si:
    case AMDGPU::S_WQM_B32_vi:
    case AMDGPU::S_WQM_B64_si:
    case AMDGPU::S_WQM_B64_vi:
    case AMDGPU::S_XNOR_SAVEEXEC_B64_si:
    case AMDGPU::S_XNOR_SAVEEXEC_B64_vi:
    case AMDGPU::S_XOR_SAVEEXEC_B64_si:
    case AMDGPU::S_XOR_SAVEEXEC_B64_vi: {
      // op: sdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 16;
      // op: ssrc0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(255);
      break;
    }
    case AMDGPU::S_ABSDIFF_I32_si:
    case AMDGPU::S_ABSDIFF_I32_vi:
    case AMDGPU::S_ADDC_U32_si:
    case AMDGPU::S_ADDC_U32_vi:
    case AMDGPU::S_ADD_I32_si:
    case AMDGPU::S_ADD_I32_vi:
    case AMDGPU::S_ADD_U32_si:
    case AMDGPU::S_ADD_U32_vi:
    case AMDGPU::S_ANDN2_B32_si:
    case AMDGPU::S_ANDN2_B32_vi:
    case AMDGPU::S_ANDN2_B64_si:
    case AMDGPU::S_ANDN2_B64_vi:
    case AMDGPU::S_AND_B32_si:
    case AMDGPU::S_AND_B32_vi:
    case AMDGPU::S_AND_B64_si:
    case AMDGPU::S_AND_B64_vi:
    case AMDGPU::S_ASHR_I32_si:
    case AMDGPU::S_ASHR_I32_vi:
    case AMDGPU::S_ASHR_I64_si:
    case AMDGPU::S_ASHR_I64_vi:
    case AMDGPU::S_BFE_I32_si:
    case AMDGPU::S_BFE_I32_vi:
    case AMDGPU::S_BFE_I64_si:
    case AMDGPU::S_BFE_I64_vi:
    case AMDGPU::S_BFE_U32_si:
    case AMDGPU::S_BFE_U32_vi:
    case AMDGPU::S_BFE_U64_si:
    case AMDGPU::S_BFE_U64_vi:
    case AMDGPU::S_BFM_B32_si:
    case AMDGPU::S_BFM_B32_vi:
    case AMDGPU::S_BFM_B64_si:
    case AMDGPU::S_BFM_B64_vi:
    case AMDGPU::S_CSELECT_B32_si:
    case AMDGPU::S_CSELECT_B32_vi:
    case AMDGPU::S_CSELECT_B64_si:
    case AMDGPU::S_CSELECT_B64_vi:
    case AMDGPU::S_LSHL_B32_si:
    case AMDGPU::S_LSHL_B32_vi:
    case AMDGPU::S_LSHL_B64_si:
    case AMDGPU::S_LSHL_B64_vi:
    case AMDGPU::S_LSHR_B32_si:
    case AMDGPU::S_LSHR_B32_vi:
    case AMDGPU::S_LSHR_B64_si:
    case AMDGPU::S_LSHR_B64_vi:
    case AMDGPU::S_MAX_I32_si:
    case AMDGPU::S_MAX_I32_vi:
    case AMDGPU::S_MAX_U32_si:
    case AMDGPU::S_MAX_U32_vi:
    case AMDGPU::S_MIN_I32_si:
    case AMDGPU::S_MIN_I32_vi:
    case AMDGPU::S_MIN_U32_si:
    case AMDGPU::S_MIN_U32_vi:
    case AMDGPU::S_MUL_I32_si:
    case AMDGPU::S_MUL_I32_vi:
    case AMDGPU::S_NAND_B32_si:
    case AMDGPU::S_NAND_B32_vi:
    case AMDGPU::S_NAND_B64_si:
    case AMDGPU::S_NAND_B64_vi:
    case AMDGPU::S_NOR_B32_si:
    case AMDGPU::S_NOR_B32_vi:
    case AMDGPU::S_NOR_B64_si:
    case AMDGPU::S_NOR_B64_vi:
    case AMDGPU::S_ORN2_B32_si:
    case AMDGPU::S_ORN2_B32_vi:
    case AMDGPU::S_ORN2_B64_si:
    case AMDGPU::S_ORN2_B64_vi:
    case AMDGPU::S_OR_B32_si:
    case AMDGPU::S_OR_B32_vi:
    case AMDGPU::S_OR_B64_si:
    case AMDGPU::S_OR_B64_vi:
    case AMDGPU::S_SUBB_U32_si:
    case AMDGPU::S_SUBB_U32_vi:
    case AMDGPU::S_SUB_I32_si:
    case AMDGPU::S_SUB_I32_vi:
    case AMDGPU::S_SUB_U32_si:
    case AMDGPU::S_SUB_U32_vi:
    case AMDGPU::S_XNOR_B32_si:
    case AMDGPU::S_XNOR_B32_vi:
    case AMDGPU::S_XNOR_B64_si:
    case AMDGPU::S_XNOR_B64_vi:
    case AMDGPU::S_XOR_B32_si:
    case AMDGPU::S_XOR_B32_vi:
    case AMDGPU::S_XOR_B64_si:
    case AMDGPU::S_XOR_B64_vi: {
      // op: sdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 16;
      // op: ssrc0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: ssrc1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::S_CMPK_EQ_I32_si:
    case AMDGPU::S_CMPK_EQ_I32_vi:
    case AMDGPU::S_CMPK_EQ_U32_si:
    case AMDGPU::S_CMPK_EQ_U32_vi:
    case AMDGPU::S_CMPK_GE_I32_si:
    case AMDGPU::S_CMPK_GE_I32_vi:
    case AMDGPU::S_CMPK_GE_U32_si:
    case AMDGPU::S_CMPK_GE_U32_vi:
    case AMDGPU::S_CMPK_GT_I32_si:
    case AMDGPU::S_CMPK_GT_I32_vi:
    case AMDGPU::S_CMPK_GT_U32_si:
    case AMDGPU::S_CMPK_GT_U32_vi:
    case AMDGPU::S_CMPK_LE_I32_si:
    case AMDGPU::S_CMPK_LE_I32_vi:
    case AMDGPU::S_CMPK_LE_U32_si:
    case AMDGPU::S_CMPK_LE_U32_vi:
    case AMDGPU::S_CMPK_LG_I32_si:
    case AMDGPU::S_CMPK_LG_I32_vi:
    case AMDGPU::S_CMPK_LG_U32_si:
    case AMDGPU::S_CMPK_LG_U32_vi:
    case AMDGPU::S_CMPK_LT_I32_si:
    case AMDGPU::S_CMPK_LT_I32_vi:
    case AMDGPU::S_CMPK_LT_U32_si:
    case AMDGPU::S_CMPK_LT_U32_vi: {
      // op: sdst
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 16;
      // op: simm16
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::S_DECPERFLEVEL:
    case AMDGPU::S_INCPERFLEVEL:
    case AMDGPU::S_NOP:
    case AMDGPU::S_SENDMSG:
    case AMDGPU::S_SENDMSGHALT:
    case AMDGPU::S_SETHALT:
    case AMDGPU::S_SETPRIO:
    case AMDGPU::S_SLEEP:
    case AMDGPU::S_TRAP:
    case AMDGPU::S_WAITCNT: {
      // op: simm16
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::S_SETREG_IMM32_B32_si:
    case AMDGPU::S_SETREG_IMM32_B32_vi: {
      // op: simm16
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(4294967295)) << 32;
      break;
    }
    case AMDGPU::S_BRANCH:
    case AMDGPU::S_CBRANCH_EXECNZ:
    case AMDGPU::S_CBRANCH_EXECZ:
    case AMDGPU::S_CBRANCH_SCC0:
    case AMDGPU::S_CBRANCH_SCC1:
    case AMDGPU::S_CBRANCH_VCCNZ:
    case AMDGPU::S_CBRANCH_VCCZ: {
      // op: simm16
      op = getSOPPBrEncoding(MI, 0, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::LDS_CMPST: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 31;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 33;
      Value |= (op & UINT64_C(511)) << 32;
      // op: src2_rel
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 41;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 50;
      break;
    }
    case AMDGPU::LDS_ADD:
    case AMDGPU::LDS_AND:
    case AMDGPU::LDS_BYTE_WRITE:
    case AMDGPU::LDS_MAX_INT:
    case AMDGPU::LDS_MAX_UINT:
    case AMDGPU::LDS_MIN_INT:
    case AMDGPU::LDS_MIN_UINT:
    case AMDGPU::LDS_OR:
    case AMDGPU::LDS_SHORT_WRITE:
    case AMDGPU::LDS_SUB:
    case AMDGPU::LDS_WRITE:
    case AMDGPU::LDS_WRXCHG:
    case AMDGPU::LDS_XOR: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 31;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 50;
      break;
    }
    case AMDGPU::LDS_BYTE_READ_RET:
    case AMDGPU::LDS_READ_RET:
    case AMDGPU::LDS_SHORT_READ_RET:
    case AMDGPU::LDS_UBYTE_READ_RET:
    case AMDGPU::LDS_USHORT_READ_RET: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 9;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 31;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 50;
      break;
    }
    case AMDGPU::LDS_CMPST_RET: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 31;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 33;
      Value |= (op & UINT64_C(511)) << 32;
      // op: src2_rel
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 41;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 50;
      break;
    }
    case AMDGPU::LDS_ADD_RET:
    case AMDGPU::LDS_AND_RET:
    case AMDGPU::LDS_MAX_INT_RET:
    case AMDGPU::LDS_MAX_UINT_RET:
    case AMDGPU::LDS_MIN_INT_RET:
    case AMDGPU::LDS_MIN_UINT_RET:
    case AMDGPU::LDS_OR_RET:
    case AMDGPU::LDS_SUB_RET:
    case AMDGPU::LDS_WRXCHG_RET:
    case AMDGPU::LDS_XOR_RET: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 31;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 50;
      break;
    }
    case AMDGPU::V_CMPSX_EQ_F32_e32_si:
    case AMDGPU::V_CMPSX_EQ_F32_e32_vi:
    case AMDGPU::V_CMPSX_EQ_F64_e32_si:
    case AMDGPU::V_CMPSX_EQ_F64_e32_vi:
    case AMDGPU::V_CMPSX_F_F32_e32_si:
    case AMDGPU::V_CMPSX_F_F32_e32_vi:
    case AMDGPU::V_CMPSX_F_F64_e32_si:
    case AMDGPU::V_CMPSX_F_F64_e32_vi:
    case AMDGPU::V_CMPSX_GE_F32_e32_si:
    case AMDGPU::V_CMPSX_GE_F32_e32_vi:
    case AMDGPU::V_CMPSX_GE_F64_e32_si:
    case AMDGPU::V_CMPSX_GE_F64_e32_vi:
    case AMDGPU::V_CMPSX_GT_F32_e32_si:
    case AMDGPU::V_CMPSX_GT_F32_e32_vi:
    case AMDGPU::V_CMPSX_GT_F64_e32_si:
    case AMDGPU::V_CMPSX_GT_F64_e32_vi:
    case AMDGPU::V_CMPSX_LE_F32_e32_si:
    case AMDGPU::V_CMPSX_LE_F32_e32_vi:
    case AMDGPU::V_CMPSX_LE_F64_e32_si:
    case AMDGPU::V_CMPSX_LE_F64_e32_vi:
    case AMDGPU::V_CMPSX_LG_F32_e32_si:
    case AMDGPU::V_CMPSX_LG_F32_e32_vi:
    case AMDGPU::V_CMPSX_LG_F64_e32_si:
    case AMDGPU::V_CMPSX_LG_F64_e32_vi:
    case AMDGPU::V_CMPSX_LT_F32_e32_si:
    case AMDGPU::V_CMPSX_LT_F32_e32_vi:
    case AMDGPU::V_CMPSX_LT_F64_e32_si:
    case AMDGPU::V_CMPSX_LT_F64_e32_vi:
    case AMDGPU::V_CMPSX_NEQ_F32_e32_si:
    case AMDGPU::V_CMPSX_NEQ_F32_e32_vi:
    case AMDGPU::V_CMPSX_NEQ_F64_e32_si:
    case AMDGPU::V_CMPSX_NEQ_F64_e32_vi:
    case AMDGPU::V_CMPSX_NGE_F32_e32_si:
    case AMDGPU::V_CMPSX_NGE_F32_e32_vi:
    case AMDGPU::V_CMPSX_NGE_F64_e32_si:
    case AMDGPU::V_CMPSX_NGE_F64_e32_vi:
    case AMDGPU::V_CMPSX_NGT_F32_e32_si:
    case AMDGPU::V_CMPSX_NGT_F32_e32_vi:
    case AMDGPU::V_CMPSX_NGT_F64_e32_si:
    case AMDGPU::V_CMPSX_NGT_F64_e32_vi:
    case AMDGPU::V_CMPSX_NLE_F32_e32_si:
    case AMDGPU::V_CMPSX_NLE_F32_e32_vi:
    case AMDGPU::V_CMPSX_NLE_F64_e32_si:
    case AMDGPU::V_CMPSX_NLE_F64_e32_vi:
    case AMDGPU::V_CMPSX_NLG_F32_e32_si:
    case AMDGPU::V_CMPSX_NLG_F32_e32_vi:
    case AMDGPU::V_CMPSX_NLG_F64_e32_si:
    case AMDGPU::V_CMPSX_NLG_F64_e32_vi:
    case AMDGPU::V_CMPSX_NLT_F32_e32_si:
    case AMDGPU::V_CMPSX_NLT_F32_e32_vi:
    case AMDGPU::V_CMPSX_NLT_F64_e32_si:
    case AMDGPU::V_CMPSX_NLT_F64_e32_vi:
    case AMDGPU::V_CMPSX_O_F32_e32_si:
    case AMDGPU::V_CMPSX_O_F32_e32_vi:
    case AMDGPU::V_CMPSX_O_F64_e32_si:
    case AMDGPU::V_CMPSX_O_F64_e32_vi:
    case AMDGPU::V_CMPSX_TRU_F32_e32_si:
    case AMDGPU::V_CMPSX_TRU_F32_e32_vi:
    case AMDGPU::V_CMPSX_TRU_F64_e32_si:
    case AMDGPU::V_CMPSX_TRU_F64_e32_vi:
    case AMDGPU::V_CMPSX_U_F32_e32_si:
    case AMDGPU::V_CMPSX_U_F32_e32_vi:
    case AMDGPU::V_CMPSX_U_F64_e32_si:
    case AMDGPU::V_CMPSX_U_F64_e32_vi:
    case AMDGPU::V_CMPS_EQ_F32_e32_si:
    case AMDGPU::V_CMPS_EQ_F32_e32_vi:
    case AMDGPU::V_CMPS_EQ_F64_e32_si:
    case AMDGPU::V_CMPS_EQ_F64_e32_vi:
    case AMDGPU::V_CMPS_F_F32_e32_si:
    case AMDGPU::V_CMPS_F_F32_e32_vi:
    case AMDGPU::V_CMPS_F_F64_e32_si:
    case AMDGPU::V_CMPS_F_F64_e32_vi:
    case AMDGPU::V_CMPS_GE_F32_e32_si:
    case AMDGPU::V_CMPS_GE_F32_e32_vi:
    case AMDGPU::V_CMPS_GE_F64_e32_si:
    case AMDGPU::V_CMPS_GE_F64_e32_vi:
    case AMDGPU::V_CMPS_GT_F32_e32_si:
    case AMDGPU::V_CMPS_GT_F32_e32_vi:
    case AMDGPU::V_CMPS_GT_F64_e32_si:
    case AMDGPU::V_CMPS_GT_F64_e32_vi:
    case AMDGPU::V_CMPS_LE_F32_e32_si:
    case AMDGPU::V_CMPS_LE_F32_e32_vi:
    case AMDGPU::V_CMPS_LE_F64_e32_si:
    case AMDGPU::V_CMPS_LE_F64_e32_vi:
    case AMDGPU::V_CMPS_LG_F32_e32_si:
    case AMDGPU::V_CMPS_LG_F32_e32_vi:
    case AMDGPU::V_CMPS_LG_F64_e32_si:
    case AMDGPU::V_CMPS_LG_F64_e32_vi:
    case AMDGPU::V_CMPS_LT_F32_e32_si:
    case AMDGPU::V_CMPS_LT_F32_e32_vi:
    case AMDGPU::V_CMPS_LT_F64_e32_si:
    case AMDGPU::V_CMPS_LT_F64_e32_vi:
    case AMDGPU::V_CMPS_NEQ_F32_e32_si:
    case AMDGPU::V_CMPS_NEQ_F32_e32_vi:
    case AMDGPU::V_CMPS_NEQ_F64_e32_si:
    case AMDGPU::V_CMPS_NEQ_F64_e32_vi:
    case AMDGPU::V_CMPS_NGE_F32_e32_si:
    case AMDGPU::V_CMPS_NGE_F32_e32_vi:
    case AMDGPU::V_CMPS_NGE_F64_e32_si:
    case AMDGPU::V_CMPS_NGE_F64_e32_vi:
    case AMDGPU::V_CMPS_NGT_F32_e32_si:
    case AMDGPU::V_CMPS_NGT_F32_e32_vi:
    case AMDGPU::V_CMPS_NGT_F64_e32_si:
    case AMDGPU::V_CMPS_NGT_F64_e32_vi:
    case AMDGPU::V_CMPS_NLE_F32_e32_si:
    case AMDGPU::V_CMPS_NLE_F32_e32_vi:
    case AMDGPU::V_CMPS_NLE_F64_e32_si:
    case AMDGPU::V_CMPS_NLE_F64_e32_vi:
    case AMDGPU::V_CMPS_NLG_F32_e32_si:
    case AMDGPU::V_CMPS_NLG_F32_e32_vi:
    case AMDGPU::V_CMPS_NLG_F64_e32_si:
    case AMDGPU::V_CMPS_NLG_F64_e32_vi:
    case AMDGPU::V_CMPS_NLT_F32_e32_si:
    case AMDGPU::V_CMPS_NLT_F32_e32_vi:
    case AMDGPU::V_CMPS_NLT_F64_e32_si:
    case AMDGPU::V_CMPS_NLT_F64_e32_vi:
    case AMDGPU::V_CMPS_O_F32_e32_si:
    case AMDGPU::V_CMPS_O_F32_e32_vi:
    case AMDGPU::V_CMPS_O_F64_e32_si:
    case AMDGPU::V_CMPS_O_F64_e32_vi:
    case AMDGPU::V_CMPS_TRU_F32_e32_si:
    case AMDGPU::V_CMPS_TRU_F32_e32_vi:
    case AMDGPU::V_CMPS_TRU_F64_e32_si:
    case AMDGPU::V_CMPS_TRU_F64_e32_vi:
    case AMDGPU::V_CMPS_U_F32_e32_si:
    case AMDGPU::V_CMPS_U_F32_e32_vi:
    case AMDGPU::V_CMPS_U_F64_e32_si:
    case AMDGPU::V_CMPS_U_F64_e32_vi:
    case AMDGPU::V_CMPX_CLASS_F32_e32_si:
    case AMDGPU::V_CMPX_CLASS_F32_e32_vi:
    case AMDGPU::V_CMPX_CLASS_F64_e32_si:
    case AMDGPU::V_CMPX_CLASS_F64_e32_vi:
    case AMDGPU::V_CMPX_EQ_F32_e32_si:
    case AMDGPU::V_CMPX_EQ_F32_e32_vi:
    case AMDGPU::V_CMPX_EQ_F64_e32_si:
    case AMDGPU::V_CMPX_EQ_F64_e32_vi:
    case AMDGPU::V_CMPX_EQ_I32_e32_si:
    case AMDGPU::V_CMPX_EQ_I32_e32_vi:
    case AMDGPU::V_CMPX_EQ_I64_e32_si:
    case AMDGPU::V_CMPX_EQ_I64_e32_vi:
    case AMDGPU::V_CMPX_EQ_U32_e32_si:
    case AMDGPU::V_CMPX_EQ_U32_e32_vi:
    case AMDGPU::V_CMPX_EQ_U64_e32_si:
    case AMDGPU::V_CMPX_EQ_U64_e32_vi:
    case AMDGPU::V_CMPX_F_F32_e32_si:
    case AMDGPU::V_CMPX_F_F32_e32_vi:
    case AMDGPU::V_CMPX_F_F64_e32_si:
    case AMDGPU::V_CMPX_F_F64_e32_vi:
    case AMDGPU::V_CMPX_F_I32_e32_si:
    case AMDGPU::V_CMPX_F_I32_e32_vi:
    case AMDGPU::V_CMPX_F_I64_e32_si:
    case AMDGPU::V_CMPX_F_I64_e32_vi:
    case AMDGPU::V_CMPX_F_U32_e32_si:
    case AMDGPU::V_CMPX_F_U32_e32_vi:
    case AMDGPU::V_CMPX_F_U64_e32_si:
    case AMDGPU::V_CMPX_F_U64_e32_vi:
    case AMDGPU::V_CMPX_GE_F32_e32_si:
    case AMDGPU::V_CMPX_GE_F32_e32_vi:
    case AMDGPU::V_CMPX_GE_F64_e32_si:
    case AMDGPU::V_CMPX_GE_F64_e32_vi:
    case AMDGPU::V_CMPX_GE_I32_e32_si:
    case AMDGPU::V_CMPX_GE_I32_e32_vi:
    case AMDGPU::V_CMPX_GE_I64_e32_si:
    case AMDGPU::V_CMPX_GE_I64_e32_vi:
    case AMDGPU::V_CMPX_GE_U32_e32_si:
    case AMDGPU::V_CMPX_GE_U32_e32_vi:
    case AMDGPU::V_CMPX_GE_U64_e32_si:
    case AMDGPU::V_CMPX_GE_U64_e32_vi:
    case AMDGPU::V_CMPX_GT_F32_e32_si:
    case AMDGPU::V_CMPX_GT_F32_e32_vi:
    case AMDGPU::V_CMPX_GT_F64_e32_si:
    case AMDGPU::V_CMPX_GT_F64_e32_vi:
    case AMDGPU::V_CMPX_GT_I32_e32_si:
    case AMDGPU::V_CMPX_GT_I32_e32_vi:
    case AMDGPU::V_CMPX_GT_I64_e32_si:
    case AMDGPU::V_CMPX_GT_I64_e32_vi:
    case AMDGPU::V_CMPX_GT_U32_e32_si:
    case AMDGPU::V_CMPX_GT_U32_e32_vi:
    case AMDGPU::V_CMPX_GT_U64_e32_si:
    case AMDGPU::V_CMPX_GT_U64_e32_vi:
    case AMDGPU::V_CMPX_LE_F32_e32_si:
    case AMDGPU::V_CMPX_LE_F32_e32_vi:
    case AMDGPU::V_CMPX_LE_F64_e32_si:
    case AMDGPU::V_CMPX_LE_F64_e32_vi:
    case AMDGPU::V_CMPX_LE_I32_e32_si:
    case AMDGPU::V_CMPX_LE_I32_e32_vi:
    case AMDGPU::V_CMPX_LE_I64_e32_si:
    case AMDGPU::V_CMPX_LE_I64_e32_vi:
    case AMDGPU::V_CMPX_LE_U32_e32_si:
    case AMDGPU::V_CMPX_LE_U32_e32_vi:
    case AMDGPU::V_CMPX_LE_U64_e32_si:
    case AMDGPU::V_CMPX_LE_U64_e32_vi:
    case AMDGPU::V_CMPX_LG_F32_e32_si:
    case AMDGPU::V_CMPX_LG_F32_e32_vi:
    case AMDGPU::V_CMPX_LG_F64_e32_si:
    case AMDGPU::V_CMPX_LG_F64_e32_vi:
    case AMDGPU::V_CMPX_LT_F32_e32_si:
    case AMDGPU::V_CMPX_LT_F32_e32_vi:
    case AMDGPU::V_CMPX_LT_F64_e32_si:
    case AMDGPU::V_CMPX_LT_F64_e32_vi:
    case AMDGPU::V_CMPX_LT_I32_e32_si:
    case AMDGPU::V_CMPX_LT_I32_e32_vi:
    case AMDGPU::V_CMPX_LT_I64_e32_si:
    case AMDGPU::V_CMPX_LT_I64_e32_vi:
    case AMDGPU::V_CMPX_LT_U32_e32_si:
    case AMDGPU::V_CMPX_LT_U32_e32_vi:
    case AMDGPU::V_CMPX_LT_U64_e32_si:
    case AMDGPU::V_CMPX_LT_U64_e32_vi:
    case AMDGPU::V_CMPX_NEQ_F32_e32_si:
    case AMDGPU::V_CMPX_NEQ_F32_e32_vi:
    case AMDGPU::V_CMPX_NEQ_F64_e32_si:
    case AMDGPU::V_CMPX_NEQ_F64_e32_vi:
    case AMDGPU::V_CMPX_NE_I32_e32_si:
    case AMDGPU::V_CMPX_NE_I32_e32_vi:
    case AMDGPU::V_CMPX_NE_I64_e32_si:
    case AMDGPU::V_CMPX_NE_I64_e32_vi:
    case AMDGPU::V_CMPX_NE_U32_e32_si:
    case AMDGPU::V_CMPX_NE_U32_e32_vi:
    case AMDGPU::V_CMPX_NE_U64_e32_si:
    case AMDGPU::V_CMPX_NE_U64_e32_vi:
    case AMDGPU::V_CMPX_NGE_F32_e32_si:
    case AMDGPU::V_CMPX_NGE_F32_e32_vi:
    case AMDGPU::V_CMPX_NGE_F64_e32_si:
    case AMDGPU::V_CMPX_NGE_F64_e32_vi:
    case AMDGPU::V_CMPX_NGT_F32_e32_si:
    case AMDGPU::V_CMPX_NGT_F32_e32_vi:
    case AMDGPU::V_CMPX_NGT_F64_e32_si:
    case AMDGPU::V_CMPX_NGT_F64_e32_vi:
    case AMDGPU::V_CMPX_NLE_F32_e32_si:
    case AMDGPU::V_CMPX_NLE_F32_e32_vi:
    case AMDGPU::V_CMPX_NLE_F64_e32_si:
    case AMDGPU::V_CMPX_NLE_F64_e32_vi:
    case AMDGPU::V_CMPX_NLG_F32_e32_si:
    case AMDGPU::V_CMPX_NLG_F32_e32_vi:
    case AMDGPU::V_CMPX_NLG_F64_e32_si:
    case AMDGPU::V_CMPX_NLG_F64_e32_vi:
    case AMDGPU::V_CMPX_NLT_F32_e32_si:
    case AMDGPU::V_CMPX_NLT_F32_e32_vi:
    case AMDGPU::V_CMPX_NLT_F64_e32_si:
    case AMDGPU::V_CMPX_NLT_F64_e32_vi:
    case AMDGPU::V_CMPX_O_F32_e32_si:
    case AMDGPU::V_CMPX_O_F32_e32_vi:
    case AMDGPU::V_CMPX_O_F64_e32_si:
    case AMDGPU::V_CMPX_O_F64_e32_vi:
    case AMDGPU::V_CMPX_TRU_F32_e32_si:
    case AMDGPU::V_CMPX_TRU_F32_e32_vi:
    case AMDGPU::V_CMPX_TRU_F64_e32_si:
    case AMDGPU::V_CMPX_TRU_F64_e32_vi:
    case AMDGPU::V_CMPX_T_I32_e32_si:
    case AMDGPU::V_CMPX_T_I32_e32_vi:
    case AMDGPU::V_CMPX_T_I64_e32_si:
    case AMDGPU::V_CMPX_T_I64_e32_vi:
    case AMDGPU::V_CMPX_T_U32_e32_si:
    case AMDGPU::V_CMPX_T_U32_e32_vi:
    case AMDGPU::V_CMPX_T_U64_e32_si:
    case AMDGPU::V_CMPX_T_U64_e32_vi:
    case AMDGPU::V_CMPX_U_F32_e32_si:
    case AMDGPU::V_CMPX_U_F32_e32_vi:
    case AMDGPU::V_CMPX_U_F64_e32_si:
    case AMDGPU::V_CMPX_U_F64_e32_vi:
    case AMDGPU::V_CMP_CLASS_F32_e32_si:
    case AMDGPU::V_CMP_CLASS_F32_e32_vi:
    case AMDGPU::V_CMP_CLASS_F64_e32_si:
    case AMDGPU::V_CMP_CLASS_F64_e32_vi:
    case AMDGPU::V_CMP_EQ_F32_e32_si:
    case AMDGPU::V_CMP_EQ_F32_e32_vi:
    case AMDGPU::V_CMP_EQ_F64_e32_si:
    case AMDGPU::V_CMP_EQ_F64_e32_vi:
    case AMDGPU::V_CMP_EQ_I32_e32_si:
    case AMDGPU::V_CMP_EQ_I32_e32_vi:
    case AMDGPU::V_CMP_EQ_I64_e32_si:
    case AMDGPU::V_CMP_EQ_I64_e32_vi:
    case AMDGPU::V_CMP_EQ_U32_e32_si:
    case AMDGPU::V_CMP_EQ_U32_e32_vi:
    case AMDGPU::V_CMP_EQ_U64_e32_si:
    case AMDGPU::V_CMP_EQ_U64_e32_vi:
    case AMDGPU::V_CMP_F_F32_e32_si:
    case AMDGPU::V_CMP_F_F32_e32_vi:
    case AMDGPU::V_CMP_F_F64_e32_si:
    case AMDGPU::V_CMP_F_F64_e32_vi:
    case AMDGPU::V_CMP_F_I32_e32_si:
    case AMDGPU::V_CMP_F_I32_e32_vi:
    case AMDGPU::V_CMP_F_I64_e32_si:
    case AMDGPU::V_CMP_F_I64_e32_vi:
    case AMDGPU::V_CMP_F_U32_e32_si:
    case AMDGPU::V_CMP_F_U32_e32_vi:
    case AMDGPU::V_CMP_F_U64_e32_si:
    case AMDGPU::V_CMP_F_U64_e32_vi:
    case AMDGPU::V_CMP_GE_F32_e32_si:
    case AMDGPU::V_CMP_GE_F32_e32_vi:
    case AMDGPU::V_CMP_GE_F64_e32_si:
    case AMDGPU::V_CMP_GE_F64_e32_vi:
    case AMDGPU::V_CMP_GE_I32_e32_si:
    case AMDGPU::V_CMP_GE_I32_e32_vi:
    case AMDGPU::V_CMP_GE_I64_e32_si:
    case AMDGPU::V_CMP_GE_I64_e32_vi:
    case AMDGPU::V_CMP_GE_U32_e32_si:
    case AMDGPU::V_CMP_GE_U32_e32_vi:
    case AMDGPU::V_CMP_GE_U64_e32_si:
    case AMDGPU::V_CMP_GE_U64_e32_vi:
    case AMDGPU::V_CMP_GT_F32_e32_si:
    case AMDGPU::V_CMP_GT_F32_e32_vi:
    case AMDGPU::V_CMP_GT_F64_e32_si:
    case AMDGPU::V_CMP_GT_F64_e32_vi:
    case AMDGPU::V_CMP_GT_I32_e32_si:
    case AMDGPU::V_CMP_GT_I32_e32_vi:
    case AMDGPU::V_CMP_GT_I64_e32_si:
    case AMDGPU::V_CMP_GT_I64_e32_vi:
    case AMDGPU::V_CMP_GT_U32_e32_si:
    case AMDGPU::V_CMP_GT_U32_e32_vi:
    case AMDGPU::V_CMP_GT_U64_e32_si:
    case AMDGPU::V_CMP_GT_U64_e32_vi:
    case AMDGPU::V_CMP_LE_F32_e32_si:
    case AMDGPU::V_CMP_LE_F32_e32_vi:
    case AMDGPU::V_CMP_LE_F64_e32_si:
    case AMDGPU::V_CMP_LE_F64_e32_vi:
    case AMDGPU::V_CMP_LE_I32_e32_si:
    case AMDGPU::V_CMP_LE_I32_e32_vi:
    case AMDGPU::V_CMP_LE_I64_e32_si:
    case AMDGPU::V_CMP_LE_I64_e32_vi:
    case AMDGPU::V_CMP_LE_U32_e32_si:
    case AMDGPU::V_CMP_LE_U32_e32_vi:
    case AMDGPU::V_CMP_LE_U64_e32_si:
    case AMDGPU::V_CMP_LE_U64_e32_vi:
    case AMDGPU::V_CMP_LG_F32_e32_si:
    case AMDGPU::V_CMP_LG_F32_e32_vi:
    case AMDGPU::V_CMP_LG_F64_e32_si:
    case AMDGPU::V_CMP_LG_F64_e32_vi:
    case AMDGPU::V_CMP_LT_F32_e32_si:
    case AMDGPU::V_CMP_LT_F32_e32_vi:
    case AMDGPU::V_CMP_LT_F64_e32_si:
    case AMDGPU::V_CMP_LT_F64_e32_vi:
    case AMDGPU::V_CMP_LT_I32_e32_si:
    case AMDGPU::V_CMP_LT_I32_e32_vi:
    case AMDGPU::V_CMP_LT_I64_e32_si:
    case AMDGPU::V_CMP_LT_I64_e32_vi:
    case AMDGPU::V_CMP_LT_U32_e32_si:
    case AMDGPU::V_CMP_LT_U32_e32_vi:
    case AMDGPU::V_CMP_LT_U64_e32_si:
    case AMDGPU::V_CMP_LT_U64_e32_vi:
    case AMDGPU::V_CMP_NEQ_F32_e32_si:
    case AMDGPU::V_CMP_NEQ_F32_e32_vi:
    case AMDGPU::V_CMP_NEQ_F64_e32_si:
    case AMDGPU::V_CMP_NEQ_F64_e32_vi:
    case AMDGPU::V_CMP_NE_I32_e32_si:
    case AMDGPU::V_CMP_NE_I32_e32_vi:
    case AMDGPU::V_CMP_NE_I64_e32_si:
    case AMDGPU::V_CMP_NE_I64_e32_vi:
    case AMDGPU::V_CMP_NE_U32_e32_si:
    case AMDGPU::V_CMP_NE_U32_e32_vi:
    case AMDGPU::V_CMP_NE_U64_e32_si:
    case AMDGPU::V_CMP_NE_U64_e32_vi:
    case AMDGPU::V_CMP_NGE_F32_e32_si:
    case AMDGPU::V_CMP_NGE_F32_e32_vi:
    case AMDGPU::V_CMP_NGE_F64_e32_si:
    case AMDGPU::V_CMP_NGE_F64_e32_vi:
    case AMDGPU::V_CMP_NGT_F32_e32_si:
    case AMDGPU::V_CMP_NGT_F32_e32_vi:
    case AMDGPU::V_CMP_NGT_F64_e32_si:
    case AMDGPU::V_CMP_NGT_F64_e32_vi:
    case AMDGPU::V_CMP_NLE_F32_e32_si:
    case AMDGPU::V_CMP_NLE_F32_e32_vi:
    case AMDGPU::V_CMP_NLE_F64_e32_si:
    case AMDGPU::V_CMP_NLE_F64_e32_vi:
    case AMDGPU::V_CMP_NLG_F32_e32_si:
    case AMDGPU::V_CMP_NLG_F32_e32_vi:
    case AMDGPU::V_CMP_NLG_F64_e32_si:
    case AMDGPU::V_CMP_NLG_F64_e32_vi:
    case AMDGPU::V_CMP_NLT_F32_e32_si:
    case AMDGPU::V_CMP_NLT_F32_e32_vi:
    case AMDGPU::V_CMP_NLT_F64_e32_si:
    case AMDGPU::V_CMP_NLT_F64_e32_vi:
    case AMDGPU::V_CMP_O_F32_e32_si:
    case AMDGPU::V_CMP_O_F32_e32_vi:
    case AMDGPU::V_CMP_O_F64_e32_si:
    case AMDGPU::V_CMP_O_F64_e32_vi:
    case AMDGPU::V_CMP_TRU_F32_e32_si:
    case AMDGPU::V_CMP_TRU_F32_e32_vi:
    case AMDGPU::V_CMP_TRU_F64_e32_si:
    case AMDGPU::V_CMP_TRU_F64_e32_vi:
    case AMDGPU::V_CMP_T_I32_e32_si:
    case AMDGPU::V_CMP_T_I32_e32_vi:
    case AMDGPU::V_CMP_T_I64_e32_si:
    case AMDGPU::V_CMP_T_I64_e32_vi:
    case AMDGPU::V_CMP_T_U32_e32_si:
    case AMDGPU::V_CMP_T_U32_e32_vi:
    case AMDGPU::V_CMP_T_U64_e32_si:
    case AMDGPU::V_CMP_T_U64_e32_vi:
    case AMDGPU::V_CMP_U_F32_e32_si:
    case AMDGPU::V_CMP_U_F32_e32_vi:
    case AMDGPU::V_CMP_U_F64_e32_si:
    case AMDGPU::V_CMP_U_F64_e32_vi: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(511);
      // op: vsrc1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 9;
      break;
    }
    case AMDGPU::BFE_INT_eg:
    case AMDGPU::BFE_UINT_eg:
    case AMDGPU::BFI_INT_eg:
    case AMDGPU::BIT_ALIGN_INT_eg:
    case AMDGPU::CNDE_INT:
    case AMDGPU::CNDE_eg:
    case AMDGPU::CNDE_r600:
    case AMDGPU::CNDGE_INT:
    case AMDGPU::CNDGE_eg:
    case AMDGPU::CNDGE_r600:
    case AMDGPU::CNDGT_INT:
    case AMDGPU::CNDGT_eg:
    case AMDGPU::CNDGT_r600:
    case AMDGPU::FMA_eg:
    case AMDGPU::MULADD_IEEE_eg:
    case AMDGPU::MULADD_IEEE_r600:
    case AMDGPU::MULADD_INT24_cm:
    case AMDGPU::MULADD_UINT24_eg:
    case AMDGPU::MULADD_eg:
    case AMDGPU::MULADD_r600:
    case AMDGPU::MUL_LIT_eg:
    case AMDGPU::MUL_LIT_r600: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(16), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(15), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 31;
      // op: src0_neg
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: src1_neg
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 25;
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 52;
      Value |= (op & UINT64_C(127)) << 53;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(18), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 50;
      // op: dst_rel
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 60;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 63;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 33;
      Value |= (op & UINT64_C(511)) << 32;
      // op: src2_rel
      op = getMachineOpValue(MI, MI.getOperand(13), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 41;
      // op: src2_neg
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 44;
      break;
    }
    case AMDGPU::BCNT_INT:
    case AMDGPU::CEIL:
    case AMDGPU::COS_cm:
    case AMDGPU::COS_eg:
    case AMDGPU::COS_r600:
    case AMDGPU::COS_r700:
    case AMDGPU::EXP_IEEE_cm:
    case AMDGPU::EXP_IEEE_eg:
    case AMDGPU::EXP_IEEE_r600:
    case AMDGPU::FFBH_UINT:
    case AMDGPU::FFBL_INT:
    case AMDGPU::FLOOR:
    case AMDGPU::FLT_TO_INT_eg:
    case AMDGPU::FLT_TO_INT_r600:
    case AMDGPU::FLT_TO_UINT_eg:
    case AMDGPU::FLT_TO_UINT_r600:
    case AMDGPU::FRACT:
    case AMDGPU::INTERP_LOAD_P0:
    case AMDGPU::INT_TO_FLT_eg:
    case AMDGPU::INT_TO_FLT_r600:
    case AMDGPU::LOG_CLAMPED_eg:
    case AMDGPU::LOG_CLAMPED_r600:
    case AMDGPU::LOG_IEEE_cm:
    case AMDGPU::LOG_IEEE_eg:
    case AMDGPU::LOG_IEEE_r600:
    case AMDGPU::MOV:
    case AMDGPU::MOVA_INT_eg:
    case AMDGPU::NOT_INT:
    case AMDGPU::RECIPSQRT_CLAMPED_cm:
    case AMDGPU::RECIPSQRT_CLAMPED_eg:
    case AMDGPU::RECIPSQRT_CLAMPED_r600:
    case AMDGPU::RECIPSQRT_IEEE_cm:
    case AMDGPU::RECIPSQRT_IEEE_eg:
    case AMDGPU::RECIPSQRT_IEEE_r600:
    case AMDGPU::RECIP_CLAMPED_cm:
    case AMDGPU::RECIP_CLAMPED_eg:
    case AMDGPU::RECIP_CLAMPED_r600:
    case AMDGPU::RECIP_IEEE_cm:
    case AMDGPU::RECIP_IEEE_eg:
    case AMDGPU::RECIP_IEEE_r600:
    case AMDGPU::RECIP_UINT_eg:
    case AMDGPU::RECIP_UINT_r600:
    case AMDGPU::RNDNE:
    case AMDGPU::SIN_cm:
    case AMDGPU::SIN_eg:
    case AMDGPU::SIN_r600:
    case AMDGPU::SIN_r700:
    case AMDGPU::TRUNC:
    case AMDGPU::UINT_TO_FLT_eg:
    case AMDGPU::UINT_TO_FLT_r600: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 9;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 31;
      // op: src0_neg
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 52;
      Value |= (op & UINT64_C(127)) << 53;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(13), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 50;
      // op: dst_rel
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 60;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 63;
      // op: src0_abs
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 32;
      // op: write
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 36;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 37;
      break;
    }
    case AMDGPU::ADD:
    case AMDGPU::ADDC_UINT:
    case AMDGPU::ADD_INT:
    case AMDGPU::AND_INT:
    case AMDGPU::ASHR_eg:
    case AMDGPU::ASHR_r600:
    case AMDGPU::BFM_INT_eg:
    case AMDGPU::CUBE_eg_real:
    case AMDGPU::CUBE_r600_real:
    case AMDGPU::DOT4_eg:
    case AMDGPU::DOT4_r600:
    case AMDGPU::KILLGT:
    case AMDGPU::LSHL_eg:
    case AMDGPU::LSHL_r600:
    case AMDGPU::LSHR_eg:
    case AMDGPU::LSHR_r600:
    case AMDGPU::MAX:
    case AMDGPU::MAX_DX10:
    case AMDGPU::MAX_INT:
    case AMDGPU::MAX_UINT:
    case AMDGPU::MIN:
    case AMDGPU::MIN_DX10:
    case AMDGPU::MIN_INT:
    case AMDGPU::MIN_UINT:
    case AMDGPU::MUL:
    case AMDGPU::MULHI_INT_cm:
    case AMDGPU::MULHI_INT_eg:
    case AMDGPU::MULHI_INT_r600:
    case AMDGPU::MULHI_UINT_cm:
    case AMDGPU::MULHI_UINT_eg:
    case AMDGPU::MULHI_UINT_r600:
    case AMDGPU::MULLO_INT_cm:
    case AMDGPU::MULLO_INT_eg:
    case AMDGPU::MULLO_INT_r600:
    case AMDGPU::MULLO_UINT_cm:
    case AMDGPU::MULLO_UINT_eg:
    case AMDGPU::MULLO_UINT_r600:
    case AMDGPU::MUL_IEEE:
    case AMDGPU::MUL_INT24_cm:
    case AMDGPU::MUL_UINT24_eg:
    case AMDGPU::OR_INT:
    case AMDGPU::PRED_SETE:
    case AMDGPU::PRED_SETE_INT:
    case AMDGPU::PRED_SETGE:
    case AMDGPU::PRED_SETGE_INT:
    case AMDGPU::PRED_SETGT:
    case AMDGPU::PRED_SETGT_INT:
    case AMDGPU::PRED_SETNE:
    case AMDGPU::PRED_SETNE_INT:
    case AMDGPU::SETE:
    case AMDGPU::SETE_DX10:
    case AMDGPU::SETE_INT:
    case AMDGPU::SETGE_DX10:
    case AMDGPU::SETGE_INT:
    case AMDGPU::SETGE_UINT:
    case AMDGPU::SETGT_DX10:
    case AMDGPU::SETGT_INT:
    case AMDGPU::SETGT_UINT:
    case AMDGPU::SETNE_DX10:
    case AMDGPU::SETNE_INT:
    case AMDGPU::SGE:
    case AMDGPU::SGT:
    case AMDGPU::SNE:
    case AMDGPU::SUBB_UINT:
    case AMDGPU::SUB_INT:
    case AMDGPU::XOR_INT: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(14), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(18), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(17), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 31;
      // op: src0_neg
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: src1_neg
      op = getMachineOpValue(MI, MI.getOperand(13), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 25;
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 52;
      Value |= (op & UINT64_C(127)) << 53;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(20), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 50;
      // op: dst_rel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 60;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 63;
      // op: src0_abs
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 32;
      // op: src1_abs
      op = getMachineOpValue(MI, MI.getOperand(15), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 33;
      // op: update_exec_mask
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 34;
      // op: update_pred
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 35;
      // op: write
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 36;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 37;
      break;
    }
    case AMDGPU::INTERP_XY:
    case AMDGPU::INTERP_ZW: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(14), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(18), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(17), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 31;
      // op: src0_neg
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: src1_neg
      op = getMachineOpValue(MI, MI.getOperand(13), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 25;
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(1536)) << 52;
      Value |= (op & UINT64_C(127)) << 53;
      // op: dst_rel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 60;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 63;
      // op: src0_abs
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 32;
      // op: src1_abs
      op = getMachineOpValue(MI, MI.getOperand(15), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 33;
      // op: update_exec_mask
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 34;
      // op: update_pred
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 35;
      // op: write
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 36;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 37;
      break;
    }
    case AMDGPU::VTX_READ_GLOBAL_128_cm:
    case AMDGPU::VTX_READ_GLOBAL_128_eg:
    case AMDGPU::VTX_READ_GLOBAL_16_cm:
    case AMDGPU::VTX_READ_GLOBAL_16_eg:
    case AMDGPU::VTX_READ_GLOBAL_32_cm:
    case AMDGPU::VTX_READ_GLOBAL_32_eg:
    case AMDGPU::VTX_READ_GLOBAL_64_cm:
    case AMDGPU::VTX_READ_GLOBAL_64_eg:
    case AMDGPU::VTX_READ_GLOBAL_8_cm:
    case AMDGPU::VTX_READ_GLOBAL_8_eg:
    case AMDGPU::VTX_READ_PARAM_128_cm:
    case AMDGPU::VTX_READ_PARAM_128_eg:
    case AMDGPU::VTX_READ_PARAM_16_cm:
    case AMDGPU::VTX_READ_PARAM_16_eg:
    case AMDGPU::VTX_READ_PARAM_32_cm:
    case AMDGPU::VTX_READ_PARAM_32_eg:
    case AMDGPU::VTX_READ_PARAM_64_cm:
    case AMDGPU::VTX_READ_PARAM_64_eg:
    case AMDGPU::VTX_READ_PARAM_8_cm:
    case AMDGPU::VTX_READ_PARAM_8_eg: {
      // op: src_gpr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 16;
      // op: dst_gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 32;
      break;
    }
    case AMDGPU::S_CBRANCH_JOIN_si:
    case AMDGPU::S_CBRANCH_JOIN_vi: {
      // op: ssrc0
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      break;
    }
    case AMDGPU::S_CBRANCH_G_FORK_si:
    case AMDGPU::S_CBRANCH_G_FORK_vi: {
      // op: ssrc0
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: ssrc1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::S_CMP_EQ_I32:
    case AMDGPU::S_CMP_EQ_U32:
    case AMDGPU::S_CMP_GE_I32:
    case AMDGPU::S_CMP_GE_U32:
    case AMDGPU::S_CMP_GT_I32:
    case AMDGPU::S_CMP_GT_U32:
    case AMDGPU::S_CMP_LE_I32:
    case AMDGPU::S_CMP_LE_U32:
    case AMDGPU::S_CMP_LG_I32:
    case AMDGPU::S_CMP_LG_U32:
    case AMDGPU::S_CMP_LT_I32:
    case AMDGPU::S_CMP_LT_U32: {
      // op: ssrc0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: ssrc1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::IMAGE_GET_RESINFO_V1_V1:
    case AMDGPU::IMAGE_GET_RESINFO_V1_V2:
    case AMDGPU::IMAGE_GET_RESINFO_V1_V4:
    case AMDGPU::IMAGE_GET_RESINFO_V2_V1:
    case AMDGPU::IMAGE_GET_RESINFO_V2_V2:
    case AMDGPU::IMAGE_GET_RESINFO_V2_V4:
    case AMDGPU::IMAGE_GET_RESINFO_V3_V1:
    case AMDGPU::IMAGE_GET_RESINFO_V3_V2:
    case AMDGPU::IMAGE_GET_RESINFO_V3_V4:
    case AMDGPU::IMAGE_GET_RESINFO_V4_V1:
    case AMDGPU::IMAGE_GET_RESINFO_V4_V2:
    case AMDGPU::IMAGE_GET_RESINFO_V4_V4:
    case AMDGPU::IMAGE_LOAD_MIP_V1_V1:
    case AMDGPU::IMAGE_LOAD_MIP_V1_V2:
    case AMDGPU::IMAGE_LOAD_MIP_V1_V4:
    case AMDGPU::IMAGE_LOAD_MIP_V2_V1:
    case AMDGPU::IMAGE_LOAD_MIP_V2_V2:
    case AMDGPU::IMAGE_LOAD_MIP_V2_V4:
    case AMDGPU::IMAGE_LOAD_MIP_V3_V1:
    case AMDGPU::IMAGE_LOAD_MIP_V3_V2:
    case AMDGPU::IMAGE_LOAD_MIP_V3_V4:
    case AMDGPU::IMAGE_LOAD_MIP_V4_V1:
    case AMDGPU::IMAGE_LOAD_MIP_V4_V2:
    case AMDGPU::IMAGE_LOAD_MIP_V4_V4:
    case AMDGPU::IMAGE_LOAD_V1_V1:
    case AMDGPU::IMAGE_LOAD_V1_V2:
    case AMDGPU::IMAGE_LOAD_V1_V4:
    case AMDGPU::IMAGE_LOAD_V2_V1:
    case AMDGPU::IMAGE_LOAD_V2_V2:
    case AMDGPU::IMAGE_LOAD_V2_V4:
    case AMDGPU::IMAGE_LOAD_V3_V1:
    case AMDGPU::IMAGE_LOAD_V3_V2:
    case AMDGPU::IMAGE_LOAD_V3_V4:
    case AMDGPU::IMAGE_LOAD_V4_V1:
    case AMDGPU::IMAGE_LOAD_V4_V2:
    case AMDGPU::IMAGE_LOAD_V4_V4: {
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: dmask
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 8;
      // op: unorm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 13;
      // op: da
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      // op: r128
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 15;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: lwe
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 25;
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      break;
    }
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_B_CL_V1_V1:
    case AMDGPU::IMAGE_GATHER4_B_CL_V1_V16:
    case AMDGPU::IMAGE_GATHER4_B_CL_V1_V2:
    case AMDGPU::IMAGE_GATHER4_B_CL_V1_V4:
    case AMDGPU::IMAGE_GATHER4_B_CL_V1_V8:
    case AMDGPU::IMAGE_GATHER4_B_CL_V2_V1:
    case AMDGPU::IMAGE_GATHER4_B_CL_V2_V16:
    case AMDGPU::IMAGE_GATHER4_B_CL_V2_V2:
    case AMDGPU::IMAGE_GATHER4_B_CL_V2_V4:
    case AMDGPU::IMAGE_GATHER4_B_CL_V2_V8:
    case AMDGPU::IMAGE_GATHER4_B_CL_V3_V1:
    case AMDGPU::IMAGE_GATHER4_B_CL_V3_V16:
    case AMDGPU::IMAGE_GATHER4_B_CL_V3_V2:
    case AMDGPU::IMAGE_GATHER4_B_CL_V3_V4:
    case AMDGPU::IMAGE_GATHER4_B_CL_V3_V8:
    case AMDGPU::IMAGE_GATHER4_B_CL_V4_V1:
    case AMDGPU::IMAGE_GATHER4_B_CL_V4_V16:
    case AMDGPU::IMAGE_GATHER4_B_CL_V4_V2:
    case AMDGPU::IMAGE_GATHER4_B_CL_V4_V4:
    case AMDGPU::IMAGE_GATHER4_B_CL_V4_V8:
    case AMDGPU::IMAGE_GATHER4_B_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_B_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_B_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_B_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_B_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_B_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_B_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_B_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_B_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_B_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_B_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_B_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_B_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_B_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_B_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_B_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_B_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_B_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_B_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_B_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_B_V1_V1:
    case AMDGPU::IMAGE_GATHER4_B_V1_V16:
    case AMDGPU::IMAGE_GATHER4_B_V1_V2:
    case AMDGPU::IMAGE_GATHER4_B_V1_V4:
    case AMDGPU::IMAGE_GATHER4_B_V1_V8:
    case AMDGPU::IMAGE_GATHER4_B_V2_V1:
    case AMDGPU::IMAGE_GATHER4_B_V2_V16:
    case AMDGPU::IMAGE_GATHER4_B_V2_V2:
    case AMDGPU::IMAGE_GATHER4_B_V2_V4:
    case AMDGPU::IMAGE_GATHER4_B_V2_V8:
    case AMDGPU::IMAGE_GATHER4_B_V3_V1:
    case AMDGPU::IMAGE_GATHER4_B_V3_V16:
    case AMDGPU::IMAGE_GATHER4_B_V3_V2:
    case AMDGPU::IMAGE_GATHER4_B_V3_V4:
    case AMDGPU::IMAGE_GATHER4_B_V3_V8:
    case AMDGPU::IMAGE_GATHER4_B_V4_V1:
    case AMDGPU::IMAGE_GATHER4_B_V4_V16:
    case AMDGPU::IMAGE_GATHER4_B_V4_V2:
    case AMDGPU::IMAGE_GATHER4_B_V4_V4:
    case AMDGPU::IMAGE_GATHER4_B_V4_V8:
    case AMDGPU::IMAGE_GATHER4_CL_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_CL_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_CL_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_CL_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_CL_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_CL_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_CL_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_CL_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_CL_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_CL_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_CL_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_CL_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_CL_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_CL_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_CL_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_CL_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_CL_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_CL_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_CL_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_CL_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_CL_V1_V1:
    case AMDGPU::IMAGE_GATHER4_CL_V1_V16:
    case AMDGPU::IMAGE_GATHER4_CL_V1_V2:
    case AMDGPU::IMAGE_GATHER4_CL_V1_V4:
    case AMDGPU::IMAGE_GATHER4_CL_V1_V8:
    case AMDGPU::IMAGE_GATHER4_CL_V2_V1:
    case AMDGPU::IMAGE_GATHER4_CL_V2_V16:
    case AMDGPU::IMAGE_GATHER4_CL_V2_V2:
    case AMDGPU::IMAGE_GATHER4_CL_V2_V4:
    case AMDGPU::IMAGE_GATHER4_CL_V2_V8:
    case AMDGPU::IMAGE_GATHER4_CL_V3_V1:
    case AMDGPU::IMAGE_GATHER4_CL_V3_V16:
    case AMDGPU::IMAGE_GATHER4_CL_V3_V2:
    case AMDGPU::IMAGE_GATHER4_CL_V3_V4:
    case AMDGPU::IMAGE_GATHER4_CL_V3_V8:
    case AMDGPU::IMAGE_GATHER4_CL_V4_V1:
    case AMDGPU::IMAGE_GATHER4_CL_V4_V16:
    case AMDGPU::IMAGE_GATHER4_CL_V4_V2:
    case AMDGPU::IMAGE_GATHER4_CL_V4_V4:
    case AMDGPU::IMAGE_GATHER4_CL_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_B_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_B_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_B_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_B_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_B_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_CL_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_CL_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_CL_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_CL_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_CL_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_CL_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_CL_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_CL_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_CL_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_CL_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_CL_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_CL_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_CL_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_CL_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_CL_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_CL_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_CL_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_CL_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_CL_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_CL_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_LZ_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_L_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_L_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_L_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_L_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_L_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_L_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_L_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_L_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_L_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_L_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_L_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_L_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_L_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_L_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_L_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_L_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_L_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_L_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_L_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_L_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_L_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_C_V1_V1:
    case AMDGPU::IMAGE_GATHER4_C_V1_V16:
    case AMDGPU::IMAGE_GATHER4_C_V1_V2:
    case AMDGPU::IMAGE_GATHER4_C_V1_V4:
    case AMDGPU::IMAGE_GATHER4_C_V1_V8:
    case AMDGPU::IMAGE_GATHER4_C_V2_V1:
    case AMDGPU::IMAGE_GATHER4_C_V2_V16:
    case AMDGPU::IMAGE_GATHER4_C_V2_V2:
    case AMDGPU::IMAGE_GATHER4_C_V2_V4:
    case AMDGPU::IMAGE_GATHER4_C_V2_V8:
    case AMDGPU::IMAGE_GATHER4_C_V3_V1:
    case AMDGPU::IMAGE_GATHER4_C_V3_V16:
    case AMDGPU::IMAGE_GATHER4_C_V3_V2:
    case AMDGPU::IMAGE_GATHER4_C_V3_V4:
    case AMDGPU::IMAGE_GATHER4_C_V3_V8:
    case AMDGPU::IMAGE_GATHER4_C_V4_V1:
    case AMDGPU::IMAGE_GATHER4_C_V4_V16:
    case AMDGPU::IMAGE_GATHER4_C_V4_V2:
    case AMDGPU::IMAGE_GATHER4_C_V4_V4:
    case AMDGPU::IMAGE_GATHER4_C_V4_V8:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_LZ_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_LZ_V1_V1:
    case AMDGPU::IMAGE_GATHER4_LZ_V1_V16:
    case AMDGPU::IMAGE_GATHER4_LZ_V1_V2:
    case AMDGPU::IMAGE_GATHER4_LZ_V1_V4:
    case AMDGPU::IMAGE_GATHER4_LZ_V1_V8:
    case AMDGPU::IMAGE_GATHER4_LZ_V2_V1:
    case AMDGPU::IMAGE_GATHER4_LZ_V2_V16:
    case AMDGPU::IMAGE_GATHER4_LZ_V2_V2:
    case AMDGPU::IMAGE_GATHER4_LZ_V2_V4:
    case AMDGPU::IMAGE_GATHER4_LZ_V2_V8:
    case AMDGPU::IMAGE_GATHER4_LZ_V3_V1:
    case AMDGPU::IMAGE_GATHER4_LZ_V3_V16:
    case AMDGPU::IMAGE_GATHER4_LZ_V3_V2:
    case AMDGPU::IMAGE_GATHER4_LZ_V3_V4:
    case AMDGPU::IMAGE_GATHER4_LZ_V3_V8:
    case AMDGPU::IMAGE_GATHER4_LZ_V4_V1:
    case AMDGPU::IMAGE_GATHER4_LZ_V4_V16:
    case AMDGPU::IMAGE_GATHER4_LZ_V4_V2:
    case AMDGPU::IMAGE_GATHER4_LZ_V4_V4:
    case AMDGPU::IMAGE_GATHER4_LZ_V4_V8:
    case AMDGPU::IMAGE_GATHER4_L_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_L_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_L_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_L_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_L_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_L_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_L_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_L_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_L_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_L_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_L_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_L_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_L_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_L_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_L_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_L_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_L_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_L_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_L_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_L_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_L_V1_V1:
    case AMDGPU::IMAGE_GATHER4_L_V1_V16:
    case AMDGPU::IMAGE_GATHER4_L_V1_V2:
    case AMDGPU::IMAGE_GATHER4_L_V1_V4:
    case AMDGPU::IMAGE_GATHER4_L_V1_V8:
    case AMDGPU::IMAGE_GATHER4_L_V2_V1:
    case AMDGPU::IMAGE_GATHER4_L_V2_V16:
    case AMDGPU::IMAGE_GATHER4_L_V2_V2:
    case AMDGPU::IMAGE_GATHER4_L_V2_V4:
    case AMDGPU::IMAGE_GATHER4_L_V2_V8:
    case AMDGPU::IMAGE_GATHER4_L_V3_V1:
    case AMDGPU::IMAGE_GATHER4_L_V3_V16:
    case AMDGPU::IMAGE_GATHER4_L_V3_V2:
    case AMDGPU::IMAGE_GATHER4_L_V3_V4:
    case AMDGPU::IMAGE_GATHER4_L_V3_V8:
    case AMDGPU::IMAGE_GATHER4_L_V4_V1:
    case AMDGPU::IMAGE_GATHER4_L_V4_V16:
    case AMDGPU::IMAGE_GATHER4_L_V4_V2:
    case AMDGPU::IMAGE_GATHER4_L_V4_V4:
    case AMDGPU::IMAGE_GATHER4_L_V4_V8:
    case AMDGPU::IMAGE_GATHER4_O_V1_V1:
    case AMDGPU::IMAGE_GATHER4_O_V1_V16:
    case AMDGPU::IMAGE_GATHER4_O_V1_V2:
    case AMDGPU::IMAGE_GATHER4_O_V1_V4:
    case AMDGPU::IMAGE_GATHER4_O_V1_V8:
    case AMDGPU::IMAGE_GATHER4_O_V2_V1:
    case AMDGPU::IMAGE_GATHER4_O_V2_V16:
    case AMDGPU::IMAGE_GATHER4_O_V2_V2:
    case AMDGPU::IMAGE_GATHER4_O_V2_V4:
    case AMDGPU::IMAGE_GATHER4_O_V2_V8:
    case AMDGPU::IMAGE_GATHER4_O_V3_V1:
    case AMDGPU::IMAGE_GATHER4_O_V3_V16:
    case AMDGPU::IMAGE_GATHER4_O_V3_V2:
    case AMDGPU::IMAGE_GATHER4_O_V3_V4:
    case AMDGPU::IMAGE_GATHER4_O_V3_V8:
    case AMDGPU::IMAGE_GATHER4_O_V4_V1:
    case AMDGPU::IMAGE_GATHER4_O_V4_V16:
    case AMDGPU::IMAGE_GATHER4_O_V4_V2:
    case AMDGPU::IMAGE_GATHER4_O_V4_V4:
    case AMDGPU::IMAGE_GATHER4_O_V4_V8:
    case AMDGPU::IMAGE_GATHER4_V1_V1:
    case AMDGPU::IMAGE_GATHER4_V1_V16:
    case AMDGPU::IMAGE_GATHER4_V1_V2:
    case AMDGPU::IMAGE_GATHER4_V1_V4:
    case AMDGPU::IMAGE_GATHER4_V1_V8:
    case AMDGPU::IMAGE_GATHER4_V2_V1:
    case AMDGPU::IMAGE_GATHER4_V2_V16:
    case AMDGPU::IMAGE_GATHER4_V2_V2:
    case AMDGPU::IMAGE_GATHER4_V2_V4:
    case AMDGPU::IMAGE_GATHER4_V2_V8:
    case AMDGPU::IMAGE_GATHER4_V3_V1:
    case AMDGPU::IMAGE_GATHER4_V3_V16:
    case AMDGPU::IMAGE_GATHER4_V3_V2:
    case AMDGPU::IMAGE_GATHER4_V3_V4:
    case AMDGPU::IMAGE_GATHER4_V3_V8:
    case AMDGPU::IMAGE_GATHER4_V4_V1:
    case AMDGPU::IMAGE_GATHER4_V4_V16:
    case AMDGPU::IMAGE_GATHER4_V4_V2:
    case AMDGPU::IMAGE_GATHER4_V4_V4:
    case AMDGPU::IMAGE_GATHER4_V4_V8:
    case AMDGPU::IMAGE_GET_LOD_V1_V1:
    case AMDGPU::IMAGE_GET_LOD_V1_V16:
    case AMDGPU::IMAGE_GET_LOD_V1_V2:
    case AMDGPU::IMAGE_GET_LOD_V1_V4:
    case AMDGPU::IMAGE_GET_LOD_V1_V8:
    case AMDGPU::IMAGE_GET_LOD_V2_V1:
    case AMDGPU::IMAGE_GET_LOD_V2_V16:
    case AMDGPU::IMAGE_GET_LOD_V2_V2:
    case AMDGPU::IMAGE_GET_LOD_V2_V4:
    case AMDGPU::IMAGE_GET_LOD_V2_V8:
    case AMDGPU::IMAGE_GET_LOD_V3_V1:
    case AMDGPU::IMAGE_GET_LOD_V3_V16:
    case AMDGPU::IMAGE_GET_LOD_V3_V2:
    case AMDGPU::IMAGE_GET_LOD_V3_V4:
    case AMDGPU::IMAGE_GET_LOD_V3_V8:
    case AMDGPU::IMAGE_GET_LOD_V4_V1:
    case AMDGPU::IMAGE_GET_LOD_V4_V16:
    case AMDGPU::IMAGE_GET_LOD_V4_V2:
    case AMDGPU::IMAGE_GET_LOD_V4_V4:
    case AMDGPU::IMAGE_GET_LOD_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_B_CL_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_B_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_B_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_B_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_B_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_B_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_B_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_B_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_B_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_B_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_B_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_B_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_B_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_B_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_B_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_B_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_B_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_B_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_B_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_B_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_B_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_B_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_B_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_B_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_B_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_B_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_B_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_B_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_B_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_B_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_B_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_B_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_B_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_B_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_B_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_B_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_B_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_B_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_B_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_B_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_B_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_CD_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_CD_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_CD_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_CD_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_CD_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_CL_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_CL_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_CL_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_CL_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_CL_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_CL_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_CL_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_CL_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_CL_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_CL_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_CL_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_CL_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_CL_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_CL_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_CL_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_CL_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_CL_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_CL_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_CL_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_CL_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_CL_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CD_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_CL_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_D_CL_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_D_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_D_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_D_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_D_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_D_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_D_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_D_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_D_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_D_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_D_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_D_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_D_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_D_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_D_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_D_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_D_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_D_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_D_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_D_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_D_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_D_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_D_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_D_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_D_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_D_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_D_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_D_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_D_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_D_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_D_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_D_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_D_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_D_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_D_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_D_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_D_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_D_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_D_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_D_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_D_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_LZ_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_LZ_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_LZ_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_LZ_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_LZ_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_LZ_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_LZ_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_LZ_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_LZ_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_LZ_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_LZ_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_LZ_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_LZ_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_LZ_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_LZ_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_LZ_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_LZ_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_LZ_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_LZ_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_LZ_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_L_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_L_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_L_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_L_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_L_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_L_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_L_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_L_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_L_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_L_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_L_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_L_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_L_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_L_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_L_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_L_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_L_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_L_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_L_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_L_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_L_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_L_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_L_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_L_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_L_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_L_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_L_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_L_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_L_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_L_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_L_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_L_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_L_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_L_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_L_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_L_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_L_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_L_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_L_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_L_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_O_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_O_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_O_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_O_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_O_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_O_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_O_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_O_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_O_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_O_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_O_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_O_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_O_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_O_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_O_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_O_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_O_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_O_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_O_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_O_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_V4_V8: {
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: dmask
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 8;
      // op: unorm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 13;
      // op: da
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      // op: r128
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 15;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: lwe
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 25;
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: ssamp
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 51;
      break;
    }
    case AMDGPU::TBUFFER_LOAD_FORMAT_XYZW_si:
    case AMDGPU::TBUFFER_STORE_FORMAT_XYZW_si:
    case AMDGPU::TBUFFER_STORE_FORMAT_XYZ_si:
    case AMDGPU::TBUFFER_STORE_FORMAT_XY_si:
    case AMDGPU::TBUFFER_STORE_FORMAT_X_si: {
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(4095);
      // op: offen
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      // op: idxen
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 13;
      // op: glc
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      // op: addr64
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 15;
      // op: dfmt
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 19;
      // op: nfmt
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 23;
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(124)) << 46;
      // op: slc
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 54;
      // op: tfe
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 55;
      // op: soffset
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::V_BFREV_B32_e32_si:
    case AMDGPU::V_BFREV_B32_e32_vi:
    case AMDGPU::V_CEIL_F16_e32_si:
    case AMDGPU::V_CEIL_F16_e32_vi:
    case AMDGPU::V_CEIL_F32_e32_si:
    case AMDGPU::V_CEIL_F32_e32_vi:
    case AMDGPU::V_CEIL_F64_e32_si:
    case AMDGPU::V_CEIL_F64_e32_vi:
    case AMDGPU::V_COS_F16_e32_si:
    case AMDGPU::V_COS_F16_e32_vi:
    case AMDGPU::V_COS_F32_e32_si:
    case AMDGPU::V_COS_F32_e32_vi:
    case AMDGPU::V_CVT_F16_F32_e32_si:
    case AMDGPU::V_CVT_F16_F32_e32_vi:
    case AMDGPU::V_CVT_F16_I16_e32_si:
    case AMDGPU::V_CVT_F16_I16_e32_vi:
    case AMDGPU::V_CVT_F16_U16_e32_si:
    case AMDGPU::V_CVT_F16_U16_e32_vi:
    case AMDGPU::V_CVT_F32_F16_e32_si:
    case AMDGPU::V_CVT_F32_F16_e32_vi:
    case AMDGPU::V_CVT_F32_F64_e32_si:
    case AMDGPU::V_CVT_F32_F64_e32_vi:
    case AMDGPU::V_CVT_F32_I32_e32_si:
    case AMDGPU::V_CVT_F32_I32_e32_vi:
    case AMDGPU::V_CVT_F32_U32_e32_si:
    case AMDGPU::V_CVT_F32_U32_e32_vi:
    case AMDGPU::V_CVT_F32_UBYTE0_e32_si:
    case AMDGPU::V_CVT_F32_UBYTE0_e32_vi:
    case AMDGPU::V_CVT_F32_UBYTE1_e32_si:
    case AMDGPU::V_CVT_F32_UBYTE1_e32_vi:
    case AMDGPU::V_CVT_F32_UBYTE2_e32_si:
    case AMDGPU::V_CVT_F32_UBYTE2_e32_vi:
    case AMDGPU::V_CVT_F32_UBYTE3_e32_si:
    case AMDGPU::V_CVT_F32_UBYTE3_e32_vi:
    case AMDGPU::V_CVT_F64_F32_e32_si:
    case AMDGPU::V_CVT_F64_F32_e32_vi:
    case AMDGPU::V_CVT_F64_I32_e32_si:
    case AMDGPU::V_CVT_F64_I32_e32_vi:
    case AMDGPU::V_CVT_F64_U32_e32_si:
    case AMDGPU::V_CVT_F64_U32_e32_vi:
    case AMDGPU::V_CVT_FLR_I32_F32_e32_si:
    case AMDGPU::V_CVT_FLR_I32_F32_e32_vi:
    case AMDGPU::V_CVT_I16_F16_e32_si:
    case AMDGPU::V_CVT_I16_F16_e32_vi:
    case AMDGPU::V_CVT_I32_F32_e32_si:
    case AMDGPU::V_CVT_I32_F32_e32_vi:
    case AMDGPU::V_CVT_I32_F64_e32_si:
    case AMDGPU::V_CVT_I32_F64_e32_vi:
    case AMDGPU::V_CVT_OFF_F32_I4_e32_si:
    case AMDGPU::V_CVT_OFF_F32_I4_e32_vi:
    case AMDGPU::V_CVT_RPI_I32_F32_e32_si:
    case AMDGPU::V_CVT_RPI_I32_F32_e32_vi:
    case AMDGPU::V_CVT_U16_F16_e32_si:
    case AMDGPU::V_CVT_U16_F16_e32_vi:
    case AMDGPU::V_CVT_U32_F32_e32_si:
    case AMDGPU::V_CVT_U32_F32_e32_vi:
    case AMDGPU::V_CVT_U32_F64_e32_si:
    case AMDGPU::V_CVT_U32_F64_e32_vi:
    case AMDGPU::V_EXP_F16_e32_si:
    case AMDGPU::V_EXP_F16_e32_vi:
    case AMDGPU::V_EXP_F32_e32_si:
    case AMDGPU::V_EXP_F32_e32_vi:
    case AMDGPU::V_EXP_LEGACY_F32_e32_si:
    case AMDGPU::V_EXP_LEGACY_F32_e32_vi:
    case AMDGPU::V_FFBH_I32_e32_si:
    case AMDGPU::V_FFBH_I32_e32_vi:
    case AMDGPU::V_FFBH_U32_e32_si:
    case AMDGPU::V_FFBH_U32_e32_vi:
    case AMDGPU::V_FFBL_B32_e32_si:
    case AMDGPU::V_FFBL_B32_e32_vi:
    case AMDGPU::V_FLOOR_F16_e32_si:
    case AMDGPU::V_FLOOR_F16_e32_vi:
    case AMDGPU::V_FLOOR_F32_e32_si:
    case AMDGPU::V_FLOOR_F32_e32_vi:
    case AMDGPU::V_FLOOR_F64_e32_si:
    case AMDGPU::V_FLOOR_F64_e32_vi:
    case AMDGPU::V_FRACT_F16_e32_si:
    case AMDGPU::V_FRACT_F16_e32_vi:
    case AMDGPU::V_FRACT_F32_e32_si:
    case AMDGPU::V_FRACT_F32_e32_vi:
    case AMDGPU::V_FRACT_F64_e32_si:
    case AMDGPU::V_FRACT_F64_e32_vi:
    case AMDGPU::V_FREXP_EXP_I16_F16_e32_si:
    case AMDGPU::V_FREXP_EXP_I16_F16_e32_vi:
    case AMDGPU::V_FREXP_EXP_I32_F32_e32_si:
    case AMDGPU::V_FREXP_EXP_I32_F32_e32_vi:
    case AMDGPU::V_FREXP_EXP_I32_F64_e32_si:
    case AMDGPU::V_FREXP_EXP_I32_F64_e32_vi:
    case AMDGPU::V_FREXP_MANT_F16_e32_si:
    case AMDGPU::V_FREXP_MANT_F16_e32_vi:
    case AMDGPU::V_FREXP_MANT_F32_e32_si:
    case AMDGPU::V_FREXP_MANT_F32_e32_vi:
    case AMDGPU::V_FREXP_MANT_F64_e32_si:
    case AMDGPU::V_FREXP_MANT_F64_e32_vi:
    case AMDGPU::V_LOG_CLAMP_F32_e32_si:
    case AMDGPU::V_LOG_F16_e32_si:
    case AMDGPU::V_LOG_F16_e32_vi:
    case AMDGPU::V_LOG_F32_e32_si:
    case AMDGPU::V_LOG_F32_e32_vi:
    case AMDGPU::V_LOG_LEGACY_F32_e32_si:
    case AMDGPU::V_LOG_LEGACY_F32_e32_vi:
    case AMDGPU::V_MOVRELD_B32_e32_si:
    case AMDGPU::V_MOVRELD_B32_e32_vi:
    case AMDGPU::V_MOVRELSD_B32_e32_si:
    case AMDGPU::V_MOVRELSD_B32_e32_vi:
    case AMDGPU::V_MOVRELS_B32_e32_si:
    case AMDGPU::V_MOVRELS_B32_e32_vi:
    case AMDGPU::V_MOV_B32_e32_si:
    case AMDGPU::V_MOV_B32_e32_vi:
    case AMDGPU::V_MOV_FED_B32_e32_si:
    case AMDGPU::V_NOT_B32_e32_si:
    case AMDGPU::V_NOT_B32_e32_vi:
    case AMDGPU::V_RCP_CLAMP_F32_e32_si:
    case AMDGPU::V_RCP_CLAMP_F64_e32_si:
    case AMDGPU::V_RCP_F16_e32_si:
    case AMDGPU::V_RCP_F16_e32_vi:
    case AMDGPU::V_RCP_F32_e32_si:
    case AMDGPU::V_RCP_F32_e32_vi:
    case AMDGPU::V_RCP_F64_e32_si:
    case AMDGPU::V_RCP_F64_e32_vi:
    case AMDGPU::V_RCP_IFLAG_F32_e32_si:
    case AMDGPU::V_RCP_IFLAG_F32_e32_vi:
    case AMDGPU::V_RCP_LEGACY_F32_e32_si:
    case AMDGPU::V_READFIRSTLANE_B32:
    case AMDGPU::V_RNDNE_F16_e32_si:
    case AMDGPU::V_RNDNE_F16_e32_vi:
    case AMDGPU::V_RNDNE_F32_e32_si:
    case AMDGPU::V_RNDNE_F32_e32_vi:
    case AMDGPU::V_RNDNE_F64_e32_si:
    case AMDGPU::V_RNDNE_F64_e32_vi:
    case AMDGPU::V_RSQ_CLAMP_F32_e32_si:
    case AMDGPU::V_RSQ_CLAMP_F64_e32_si:
    case AMDGPU::V_RSQ_F16_e32_si:
    case AMDGPU::V_RSQ_F16_e32_vi:
    case AMDGPU::V_RSQ_F32_e32_si:
    case AMDGPU::V_RSQ_F32_e32_vi:
    case AMDGPU::V_RSQ_F64_e32_si:
    case AMDGPU::V_RSQ_F64_e32_vi:
    case AMDGPU::V_RSQ_LEGACY_F32_e32_si:
    case AMDGPU::V_SIN_F16_e32_si:
    case AMDGPU::V_SIN_F16_e32_vi:
    case AMDGPU::V_SIN_F32_e32_si:
    case AMDGPU::V_SIN_F32_e32_vi:
    case AMDGPU::V_SQRT_F16_e32_si:
    case AMDGPU::V_SQRT_F16_e32_vi:
    case AMDGPU::V_SQRT_F32_e32_si:
    case AMDGPU::V_SQRT_F32_e32_vi:
    case AMDGPU::V_SQRT_F64_e32_si:
    case AMDGPU::V_SQRT_F64_e32_vi:
    case AMDGPU::V_TRUNC_F16_e32_si:
    case AMDGPU::V_TRUNC_F16_e32_vi:
    case AMDGPU::V_TRUNC_F32_e32_si:
    case AMDGPU::V_TRUNC_F32_e32_vi:
    case AMDGPU::V_TRUNC_F64_e32_si:
    case AMDGPU::V_TRUNC_F64_e32_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 17;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(511);
      break;
    }
    case AMDGPU::V_ADDC_U32_e32_si:
    case AMDGPU::V_ADDC_U32_e32_vi:
    case AMDGPU::V_ADD_F16_e32_si:
    case AMDGPU::V_ADD_F16_e32_vi:
    case AMDGPU::V_ADD_F32_e32_si:
    case AMDGPU::V_ADD_F32_e32_vi:
    case AMDGPU::V_ADD_I32_e32_si:
    case AMDGPU::V_ADD_I32_e32_vi:
    case AMDGPU::V_ADD_U16_e32_si:
    case AMDGPU::V_ADD_U16_e32_vi:
    case AMDGPU::V_AND_B32_e32_si:
    case AMDGPU::V_AND_B32_e32_vi:
    case AMDGPU::V_ASHRREV_B16_e32_si:
    case AMDGPU::V_ASHRREV_B16_e32_vi:
    case AMDGPU::V_ASHRREV_I32_e32_si:
    case AMDGPU::V_ASHRREV_I32_e32_vi:
    case AMDGPU::V_ASHR_I32_e32_si:
    case AMDGPU::V_BCNT_U32_B32_e32_si:
    case AMDGPU::V_BFM_B32_e32_si:
    case AMDGPU::V_CNDMASK_B32_e32_si:
    case AMDGPU::V_CNDMASK_B32_e32_vi:
    case AMDGPU::V_CVT_PKACCUM_U8_F32_e32_si:
    case AMDGPU::V_CVT_PKNORM_I16_F32_e32_si:
    case AMDGPU::V_CVT_PKNORM_U16_F32_e32_si:
    case AMDGPU::V_CVT_PKRTZ_F16_F32_e32_si:
    case AMDGPU::V_CVT_PK_I16_I32_e32_si:
    case AMDGPU::V_CVT_PK_U16_U32_e32_si:
    case AMDGPU::V_LDEXP_F16_e32_si:
    case AMDGPU::V_LDEXP_F16_e32_vi:
    case AMDGPU::V_LDEXP_F32_e32_si:
    case AMDGPU::V_LSHLREV_B16_e32_si:
    case AMDGPU::V_LSHLREV_B16_e32_vi:
    case AMDGPU::V_LSHLREV_B32_e32_si:
    case AMDGPU::V_LSHLREV_B32_e32_vi:
    case AMDGPU::V_LSHL_B32_e32_si:
    case AMDGPU::V_LSHRREV_B16_e32_si:
    case AMDGPU::V_LSHRREV_B16_e32_vi:
    case AMDGPU::V_LSHRREV_B32_e32_si:
    case AMDGPU::V_LSHRREV_B32_e32_vi:
    case AMDGPU::V_LSHR_B32_e32_si:
    case AMDGPU::V_MAC_F16_e32_si:
    case AMDGPU::V_MAC_F16_e32_vi:
    case AMDGPU::V_MAC_F32_e32_si:
    case AMDGPU::V_MAC_F32_e32_vi:
    case AMDGPU::V_MAC_LEGACY_F32_e32_si:
    case AMDGPU::V_MAX_F16_e32_si:
    case AMDGPU::V_MAX_F16_e32_vi:
    case AMDGPU::V_MAX_F32_e32_si:
    case AMDGPU::V_MAX_F32_e32_vi:
    case AMDGPU::V_MAX_I16_e32_si:
    case AMDGPU::V_MAX_I16_e32_vi:
    case AMDGPU::V_MAX_I32_e32_si:
    case AMDGPU::V_MAX_I32_e32_vi:
    case AMDGPU::V_MAX_LEGACY_F32_e32_si:
    case AMDGPU::V_MAX_U16_e32_si:
    case AMDGPU::V_MAX_U16_e32_vi:
    case AMDGPU::V_MAX_U32_e32_si:
    case AMDGPU::V_MAX_U32_e32_vi:
    case AMDGPU::V_MBCNT_HI_U32_B32_e32_si:
    case AMDGPU::V_MBCNT_LO_U32_B32_e32_si:
    case AMDGPU::V_MIN_F16_e32_si:
    case AMDGPU::V_MIN_F16_e32_vi:
    case AMDGPU::V_MIN_F32_e32_si:
    case AMDGPU::V_MIN_F32_e32_vi:
    case AMDGPU::V_MIN_I16_e32_si:
    case AMDGPU::V_MIN_I16_e32_vi:
    case AMDGPU::V_MIN_I32_e32_si:
    case AMDGPU::V_MIN_I32_e32_vi:
    case AMDGPU::V_MIN_LEGACY_F32_e32_si:
    case AMDGPU::V_MIN_U16_e32_si:
    case AMDGPU::V_MIN_U16_e32_vi:
    case AMDGPU::V_MIN_U32_e32_si:
    case AMDGPU::V_MIN_U32_e32_vi:
    case AMDGPU::V_MUL_F16_e32_si:
    case AMDGPU::V_MUL_F16_e32_vi:
    case AMDGPU::V_MUL_F32_e32_si:
    case AMDGPU::V_MUL_F32_e32_vi:
    case AMDGPU::V_MUL_HI_I32_I24_e32_si:
    case AMDGPU::V_MUL_HI_I32_I24_e32_vi:
    case AMDGPU::V_MUL_HI_U32_U24_e32_si:
    case AMDGPU::V_MUL_HI_U32_U24_e32_vi:
    case AMDGPU::V_MUL_I32_I24_e32_si:
    case AMDGPU::V_MUL_I32_I24_e32_vi:
    case AMDGPU::V_MUL_LEGACY_F32_e32_si:
    case AMDGPU::V_MUL_LEGACY_F32_e32_vi:
    case AMDGPU::V_MUL_LO_U16_e32_si:
    case AMDGPU::V_MUL_LO_U16_e32_vi:
    case AMDGPU::V_MUL_U32_U24_e32_si:
    case AMDGPU::V_MUL_U32_U24_e32_vi:
    case AMDGPU::V_OR_B32_e32_si:
    case AMDGPU::V_OR_B32_e32_vi:
    case AMDGPU::V_READLANE_B32_si:
    case AMDGPU::V_SUBBREV_U32_e32_si:
    case AMDGPU::V_SUBBREV_U32_e32_vi:
    case AMDGPU::V_SUBB_U32_e32_si:
    case AMDGPU::V_SUBB_U32_e32_vi:
    case AMDGPU::V_SUBREV_F16_e32_si:
    case AMDGPU::V_SUBREV_F16_e32_vi:
    case AMDGPU::V_SUBREV_F32_e32_si:
    case AMDGPU::V_SUBREV_F32_e32_vi:
    case AMDGPU::V_SUBREV_I32_e32_si:
    case AMDGPU::V_SUBREV_I32_e32_vi:
    case AMDGPU::V_SUBREV_U16_e32_si:
    case AMDGPU::V_SUBREV_U16_e32_vi:
    case AMDGPU::V_SUB_F16_e32_si:
    case AMDGPU::V_SUB_F16_e32_vi:
    case AMDGPU::V_SUB_F32_e32_si:
    case AMDGPU::V_SUB_F32_e32_vi:
    case AMDGPU::V_SUB_I32_e32_si:
    case AMDGPU::V_SUB_I32_e32_vi:
    case AMDGPU::V_SUB_U16_e32_si:
    case AMDGPU::V_SUB_U16_e32_vi:
    case AMDGPU::V_WRITELANE_B32_si:
    case AMDGPU::V_XOR_B32_e32_si:
    case AMDGPU::V_XOR_B32_e32_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 17;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(511);
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 9;
      break;
    }
    case AMDGPU::V_MADAK_F16_si:
    case AMDGPU::V_MADAK_F16_vi:
    case AMDGPU::V_MADAK_F32_si:
    case AMDGPU::V_MADAK_F32_vi:
    case AMDGPU::V_MADMK_F16_si:
    case AMDGPU::V_MADMK_F16_vi:
    case AMDGPU::V_MADMK_F32_si:
    case AMDGPU::V_MADMK_F32_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 17;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(511);
      // op: vsrc1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 9;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(4294967295)) << 32;
      break;
    }
    case AMDGPU::V_INTERP_MOV_F32_si:
    case AMDGPU::V_INTERP_MOV_F32_vi:
    case AMDGPU::V_INTERP_P1_F32_16bank_si:
    case AMDGPU::V_INTERP_P1_F32_16bank_vi:
    case AMDGPU::V_INTERP_P1_F32_si:
    case AMDGPU::V_INTERP_P1_F32_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 18;
      // op: vsrc
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: attrchan
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 8;
      // op: attr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AMDGPU::V_INTERP_P2_F32_si:
    case AMDGPU::V_INTERP_P2_F32_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 18;
      // op: vsrc
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: attrchan
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 8;
      // op: attr
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AMDGPU::DS_ORDERED_COUNT_si:
    case AMDGPU::DS_ORDERED_COUNT_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_APPEND_vi:
    case AMDGPU::DS_CONSUME_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_APPEND_si:
    case AMDGPU::DS_CONSUME_si: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_READ_B32_vi:
    case AMDGPU::DS_READ_B64_vi:
    case AMDGPU::DS_READ_I16_vi:
    case AMDGPU::DS_READ_I8_vi:
    case AMDGPU::DS_READ_U16_vi:
    case AMDGPU::DS_READ_U8_vi:
    case AMDGPU::DS_SWIZZLE_B32_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_READ_B32_si:
    case AMDGPU::DS_READ_B64_si:
    case AMDGPU::DS_READ_I16_si:
    case AMDGPU::DS_READ_I8_si:
    case AMDGPU::DS_READ_U16_si:
    case AMDGPU::DS_READ_U8_si:
    case AMDGPU::DS_SWIZZLE_B32_si: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_ADD_RTN_U32_vi:
    case AMDGPU::DS_ADD_RTN_U64_vi:
    case AMDGPU::DS_AND_RTN_B32_vi:
    case AMDGPU::DS_AND_RTN_B64_vi:
    case AMDGPU::DS_DEC_RTN_U32_vi:
    case AMDGPU::DS_DEC_RTN_U64_vi:
    case AMDGPU::DS_INC_RTN_U32_vi:
    case AMDGPU::DS_INC_RTN_U64_vi:
    case AMDGPU::DS_MAX_RTN_F64_vi:
    case AMDGPU::DS_MAX_RTN_I32_vi:
    case AMDGPU::DS_MAX_RTN_I64_vi:
    case AMDGPU::DS_MAX_RTN_U32_vi:
    case AMDGPU::DS_MAX_RTN_U64_vi:
    case AMDGPU::DS_MIN_RTN_F64_vi:
    case AMDGPU::DS_MIN_RTN_I32_vi:
    case AMDGPU::DS_MIN_RTN_I64_vi:
    case AMDGPU::DS_MIN_RTN_U32_vi:
    case AMDGPU::DS_MIN_RTN_U64_vi:
    case AMDGPU::DS_OR_RTN_B32_vi:
    case AMDGPU::DS_OR_RTN_B64_vi:
    case AMDGPU::DS_RSUB_RTN_U32_vi:
    case AMDGPU::DS_RSUB_RTN_U64_vi:
    case AMDGPU::DS_SUB_RTN_U32_vi:
    case AMDGPU::DS_SUB_RTN_U64_vi:
    case AMDGPU::DS_WRAP_RTN_F32_vi:
    case AMDGPU::DS_WRXCHG_RTN_B32_vi:
    case AMDGPU::DS_WRXCHG_RTN_B64_vi:
    case AMDGPU::DS_XOR_RTN_B32_vi:
    case AMDGPU::DS_XOR_RTN_B64_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_READ2ST64_B32_vi:
    case AMDGPU::DS_READ2ST64_B64_vi:
    case AMDGPU::DS_READ2_B32_vi:
    case AMDGPU::DS_READ2_B64_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: offset0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: offset1
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::DS_ADD_RTN_U32_si:
    case AMDGPU::DS_ADD_RTN_U64_si:
    case AMDGPU::DS_AND_RTN_B32_si:
    case AMDGPU::DS_AND_RTN_B64_si:
    case AMDGPU::DS_DEC_RTN_U32_si:
    case AMDGPU::DS_DEC_RTN_U64_si:
    case AMDGPU::DS_INC_RTN_U32_si:
    case AMDGPU::DS_INC_RTN_U64_si:
    case AMDGPU::DS_MAX_RTN_F64_si:
    case AMDGPU::DS_MAX_RTN_I32_si:
    case AMDGPU::DS_MAX_RTN_I64_si:
    case AMDGPU::DS_MAX_RTN_U32_si:
    case AMDGPU::DS_MAX_RTN_U64_si:
    case AMDGPU::DS_MIN_RTN_F64_si:
    case AMDGPU::DS_MIN_RTN_I32_si:
    case AMDGPU::DS_MIN_RTN_I64_si:
    case AMDGPU::DS_MIN_RTN_U32_si:
    case AMDGPU::DS_MIN_RTN_U64_si:
    case AMDGPU::DS_OR_RTN_B32_si:
    case AMDGPU::DS_OR_RTN_B64_si:
    case AMDGPU::DS_RSUB_RTN_U32_si:
    case AMDGPU::DS_RSUB_RTN_U64_si:
    case AMDGPU::DS_SUB_RTN_U32_si:
    case AMDGPU::DS_SUB_RTN_U64_si:
    case AMDGPU::DS_WRAP_RTN_F32_si:
    case AMDGPU::DS_WRXCHG_RTN_B32_si:
    case AMDGPU::DS_WRXCHG_RTN_B64_si:
    case AMDGPU::DS_XOR_RTN_B32_si:
    case AMDGPU::DS_XOR_RTN_B64_si: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_READ2ST64_B32_si:
    case AMDGPU::DS_READ2ST64_B64_si:
    case AMDGPU::DS_READ2_B32_si:
    case AMDGPU::DS_READ2_B64_si: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: offset0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: offset1
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::DS_CMPST_RTN_B32_vi:
    case AMDGPU::DS_CMPST_RTN_B64_vi:
    case AMDGPU::DS_CMPST_RTN_F32_vi:
    case AMDGPU::DS_CMPST_RTN_F64_vi:
    case AMDGPU::DS_MAX_RTN_F32_vi:
    case AMDGPU::DS_MIN_RTN_F32_vi:
    case AMDGPU::DS_MSKOR_RTN_B32_vi:
    case AMDGPU::DS_MSKOR_RTN_B64_vi:
    case AMDGPU::DS_WRXCHG2ST64_RTN_B32_vi:
    case AMDGPU::DS_WRXCHG2ST64_RTN_B64_vi:
    case AMDGPU::DS_WRXCHG2_RTN_B32_vi:
    case AMDGPU::DS_WRXCHG2_RTN_B64_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 16;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: data1
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 48;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::DS_CMPST_RTN_B32_si:
    case AMDGPU::DS_CMPST_RTN_B64_si:
    case AMDGPU::DS_CMPST_RTN_F32_si:
    case AMDGPU::DS_CMPST_RTN_F64_si:
    case AMDGPU::DS_MAX_RTN_F32_si:
    case AMDGPU::DS_MIN_RTN_F32_si:
    case AMDGPU::DS_MSKOR_RTN_B32_si:
    case AMDGPU::DS_MSKOR_RTN_B64_si:
    case AMDGPU::DS_WRXCHG2ST64_RTN_B32_si:
    case AMDGPU::DS_WRXCHG2ST64_RTN_B64_si:
    case AMDGPU::DS_WRXCHG2_RTN_B32_si:
    case AMDGPU::DS_WRXCHG2_RTN_B64_si: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 40;
      // op: data1
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 48;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::V_BFREV_B32_e64_si:
    case AMDGPU::V_BFREV_B32_e64_vi:
    case AMDGPU::V_CVT_F16_I16_e64_si:
    case AMDGPU::V_CVT_F16_I16_e64_vi:
    case AMDGPU::V_CVT_F16_U16_e64_si:
    case AMDGPU::V_CVT_F16_U16_e64_vi:
    case AMDGPU::V_CVT_F32_F16_e64_si:
    case AMDGPU::V_CVT_F32_F16_e64_vi:
    case AMDGPU::V_CVT_F32_I32_e64_si:
    case AMDGPU::V_CVT_F32_I32_e64_vi:
    case AMDGPU::V_CVT_F32_U32_e64_si:
    case AMDGPU::V_CVT_F32_U32_e64_vi:
    case AMDGPU::V_CVT_F32_UBYTE0_e64_si:
    case AMDGPU::V_CVT_F32_UBYTE0_e64_vi:
    case AMDGPU::V_CVT_F32_UBYTE1_e64_si:
    case AMDGPU::V_CVT_F32_UBYTE1_e64_vi:
    case AMDGPU::V_CVT_F32_UBYTE2_e64_si:
    case AMDGPU::V_CVT_F32_UBYTE2_e64_vi:
    case AMDGPU::V_CVT_F32_UBYTE3_e64_si:
    case AMDGPU::V_CVT_F32_UBYTE3_e64_vi:
    case AMDGPU::V_CVT_F64_I32_e64_si:
    case AMDGPU::V_CVT_F64_I32_e64_vi:
    case AMDGPU::V_CVT_F64_U32_e64_si:
    case AMDGPU::V_CVT_F64_U32_e64_vi:
    case AMDGPU::V_CVT_OFF_F32_I4_e64_si:
    case AMDGPU::V_CVT_OFF_F32_I4_e64_vi:
    case AMDGPU::V_FFBH_I32_e64_si:
    case AMDGPU::V_FFBH_I32_e64_vi:
    case AMDGPU::V_FFBH_U32_e64_si:
    case AMDGPU::V_FFBH_U32_e64_vi:
    case AMDGPU::V_FFBL_B32_e64_si:
    case AMDGPU::V_FFBL_B32_e64_vi:
    case AMDGPU::V_MOVRELD_B32_e64_si:
    case AMDGPU::V_MOVRELD_B32_e64_vi:
    case AMDGPU::V_MOVRELSD_B32_e64_si:
    case AMDGPU::V_MOVRELSD_B32_e64_vi:
    case AMDGPU::V_MOVRELS_B32_e64_si:
    case AMDGPU::V_MOVRELS_B32_e64_vi:
    case AMDGPU::V_MOV_B32_e64_si:
    case AMDGPU::V_MOV_B32_e64_vi:
    case AMDGPU::V_MOV_FED_B32_e64_si:
    case AMDGPU::V_NOT_B32_e64_si:
    case AMDGPU::V_NOT_B32_e64_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      break;
    }
    case AMDGPU::V_ADDC_U32_e64_si:
    case AMDGPU::V_ADDC_U32_e64_vi:
    case AMDGPU::V_ADD_I32_e64_si:
    case AMDGPU::V_ADD_I32_e64_vi:
    case AMDGPU::V_ADD_U16_e64_si:
    case AMDGPU::V_ADD_U16_e64_vi:
    case AMDGPU::V_AND_B32_e64_si:
    case AMDGPU::V_AND_B32_e64_vi:
    case AMDGPU::V_ASHRREV_B16_e64_si:
    case AMDGPU::V_ASHRREV_B16_e64_vi:
    case AMDGPU::V_ASHRREV_I32_e64_si:
    case AMDGPU::V_ASHRREV_I32_e64_vi:
    case AMDGPU::V_ASHRREV_I64_si:
    case AMDGPU::V_ASHRREV_I64_vi:
    case AMDGPU::V_ASHR_I32_e64_si:
    case AMDGPU::V_ASHR_I64_si:
    case AMDGPU::V_ASHR_I64_vi:
    case AMDGPU::V_BCNT_U32_B32_e64_si:
    case AMDGPU::V_BCNT_U32_B32_e64_vi:
    case AMDGPU::V_BFM_B32_e64_si:
    case AMDGPU::V_BFM_B32_e64_vi:
    case AMDGPU::V_CMPX_EQ_I32_e64_si:
    case AMDGPU::V_CMPX_EQ_I32_e64_vi:
    case AMDGPU::V_CMPX_EQ_I64_e64_si:
    case AMDGPU::V_CMPX_EQ_I64_e64_vi:
    case AMDGPU::V_CMPX_EQ_U32_e64_si:
    case AMDGPU::V_CMPX_EQ_U32_e64_vi:
    case AMDGPU::V_CMPX_EQ_U64_e64_si:
    case AMDGPU::V_CMPX_EQ_U64_e64_vi:
    case AMDGPU::V_CMPX_F_I32_e64_si:
    case AMDGPU::V_CMPX_F_I32_e64_vi:
    case AMDGPU::V_CMPX_F_I64_e64_si:
    case AMDGPU::V_CMPX_F_I64_e64_vi:
    case AMDGPU::V_CMPX_F_U32_e64_si:
    case AMDGPU::V_CMPX_F_U32_e64_vi:
    case AMDGPU::V_CMPX_F_U64_e64_si:
    case AMDGPU::V_CMPX_F_U64_e64_vi:
    case AMDGPU::V_CMPX_GE_I32_e64_si:
    case AMDGPU::V_CMPX_GE_I32_e64_vi:
    case AMDGPU::V_CMPX_GE_I64_e64_si:
    case AMDGPU::V_CMPX_GE_I64_e64_vi:
    case AMDGPU::V_CMPX_GE_U32_e64_si:
    case AMDGPU::V_CMPX_GE_U32_e64_vi:
    case AMDGPU::V_CMPX_GE_U64_e64_si:
    case AMDGPU::V_CMPX_GE_U64_e64_vi:
    case AMDGPU::V_CMPX_GT_I32_e64_si:
    case AMDGPU::V_CMPX_GT_I32_e64_vi:
    case AMDGPU::V_CMPX_GT_I64_e64_si:
    case AMDGPU::V_CMPX_GT_I64_e64_vi:
    case AMDGPU::V_CMPX_GT_U32_e64_si:
    case AMDGPU::V_CMPX_GT_U32_e64_vi:
    case AMDGPU::V_CMPX_GT_U64_e64_si:
    case AMDGPU::V_CMPX_GT_U64_e64_vi:
    case AMDGPU::V_CMPX_LE_I32_e64_si:
    case AMDGPU::V_CMPX_LE_I32_e64_vi:
    case AMDGPU::V_CMPX_LE_I64_e64_si:
    case AMDGPU::V_CMPX_LE_I64_e64_vi:
    case AMDGPU::V_CMPX_LE_U32_e64_si:
    case AMDGPU::V_CMPX_LE_U32_e64_vi:
    case AMDGPU::V_CMPX_LE_U64_e64_si:
    case AMDGPU::V_CMPX_LE_U64_e64_vi:
    case AMDGPU::V_CMPX_LT_I32_e64_si:
    case AMDGPU::V_CMPX_LT_I32_e64_vi:
    case AMDGPU::V_CMPX_LT_I64_e64_si:
    case AMDGPU::V_CMPX_LT_I64_e64_vi:
    case AMDGPU::V_CMPX_LT_U32_e64_si:
    case AMDGPU::V_CMPX_LT_U32_e64_vi:
    case AMDGPU::V_CMPX_LT_U64_e64_si:
    case AMDGPU::V_CMPX_LT_U64_e64_vi:
    case AMDGPU::V_CMPX_NE_I32_e64_si:
    case AMDGPU::V_CMPX_NE_I32_e64_vi:
    case AMDGPU::V_CMPX_NE_I64_e64_si:
    case AMDGPU::V_CMPX_NE_I64_e64_vi:
    case AMDGPU::V_CMPX_NE_U32_e64_si:
    case AMDGPU::V_CMPX_NE_U32_e64_vi:
    case AMDGPU::V_CMPX_NE_U64_e64_si:
    case AMDGPU::V_CMPX_NE_U64_e64_vi:
    case AMDGPU::V_CMPX_T_I32_e64_si:
    case AMDGPU::V_CMPX_T_I32_e64_vi:
    case AMDGPU::V_CMPX_T_I64_e64_si:
    case AMDGPU::V_CMPX_T_I64_e64_vi:
    case AMDGPU::V_CMPX_T_U32_e64_si:
    case AMDGPU::V_CMPX_T_U32_e64_vi:
    case AMDGPU::V_CMPX_T_U64_e64_si:
    case AMDGPU::V_CMPX_T_U64_e64_vi:
    case AMDGPU::V_CMP_EQ_I32_e64_si:
    case AMDGPU::V_CMP_EQ_I32_e64_vi:
    case AMDGPU::V_CMP_EQ_I64_e64_si:
    case AMDGPU::V_CMP_EQ_I64_e64_vi:
    case AMDGPU::V_CMP_EQ_U32_e64_si:
    case AMDGPU::V_CMP_EQ_U32_e64_vi:
    case AMDGPU::V_CMP_EQ_U64_e64_si:
    case AMDGPU::V_CMP_EQ_U64_e64_vi:
    case AMDGPU::V_CMP_F_I32_e64_si:
    case AMDGPU::V_CMP_F_I32_e64_vi:
    case AMDGPU::V_CMP_F_I64_e64_si:
    case AMDGPU::V_CMP_F_I64_e64_vi:
    case AMDGPU::V_CMP_F_U32_e64_si:
    case AMDGPU::V_CMP_F_U32_e64_vi:
    case AMDGPU::V_CMP_F_U64_e64_si:
    case AMDGPU::V_CMP_F_U64_e64_vi:
    case AMDGPU::V_CMP_GE_I32_e64_si:
    case AMDGPU::V_CMP_GE_I32_e64_vi:
    case AMDGPU::V_CMP_GE_I64_e64_si:
    case AMDGPU::V_CMP_GE_I64_e64_vi:
    case AMDGPU::V_CMP_GE_U32_e64_si:
    case AMDGPU::V_CMP_GE_U32_e64_vi:
    case AMDGPU::V_CMP_GE_U64_e64_si:
    case AMDGPU::V_CMP_GE_U64_e64_vi:
    case AMDGPU::V_CMP_GT_I32_e64_si:
    case AMDGPU::V_CMP_GT_I32_e64_vi:
    case AMDGPU::V_CMP_GT_I64_e64_si:
    case AMDGPU::V_CMP_GT_I64_e64_vi:
    case AMDGPU::V_CMP_GT_U32_e64_si:
    case AMDGPU::V_CMP_GT_U32_e64_vi:
    case AMDGPU::V_CMP_GT_U64_e64_si:
    case AMDGPU::V_CMP_GT_U64_e64_vi:
    case AMDGPU::V_CMP_LE_I32_e64_si:
    case AMDGPU::V_CMP_LE_I32_e64_vi:
    case AMDGPU::V_CMP_LE_I64_e64_si:
    case AMDGPU::V_CMP_LE_I64_e64_vi:
    case AMDGPU::V_CMP_LE_U32_e64_si:
    case AMDGPU::V_CMP_LE_U32_e64_vi:
    case AMDGPU::V_CMP_LE_U64_e64_si:
    case AMDGPU::V_CMP_LE_U64_e64_vi:
    case AMDGPU::V_CMP_LT_I32_e64_si:
    case AMDGPU::V_CMP_LT_I32_e64_vi:
    case AMDGPU::V_CMP_LT_I64_e64_si:
    case AMDGPU::V_CMP_LT_I64_e64_vi:
    case AMDGPU::V_CMP_LT_U32_e64_si:
    case AMDGPU::V_CMP_LT_U32_e64_vi:
    case AMDGPU::V_CMP_LT_U64_e64_si:
    case AMDGPU::V_CMP_LT_U64_e64_vi:
    case AMDGPU::V_CMP_NE_I32_e64_si:
    case AMDGPU::V_CMP_NE_I32_e64_vi:
    case AMDGPU::V_CMP_NE_I64_e64_si:
    case AMDGPU::V_CMP_NE_I64_e64_vi:
    case AMDGPU::V_CMP_NE_U32_e64_si:
    case AMDGPU::V_CMP_NE_U32_e64_vi:
    case AMDGPU::V_CMP_NE_U64_e64_si:
    case AMDGPU::V_CMP_NE_U64_e64_vi:
    case AMDGPU::V_CMP_T_I32_e64_si:
    case AMDGPU::V_CMP_T_I32_e64_vi:
    case AMDGPU::V_CMP_T_I64_e64_si:
    case AMDGPU::V_CMP_T_I64_e64_vi:
    case AMDGPU::V_CMP_T_U32_e64_si:
    case AMDGPU::V_CMP_T_U32_e64_vi:
    case AMDGPU::V_CMP_T_U64_e64_si:
    case AMDGPU::V_CMP_T_U64_e64_vi:
    case AMDGPU::V_CVT_PK_I16_I32_e64_si:
    case AMDGPU::V_CVT_PK_I16_I32_e64_vi:
    case AMDGPU::V_CVT_PK_U16_U32_e64_si:
    case AMDGPU::V_CVT_PK_U16_U32_e64_vi:
    case AMDGPU::V_LSHLREV_B16_e64_si:
    case AMDGPU::V_LSHLREV_B16_e64_vi:
    case AMDGPU::V_LSHLREV_B32_e64_si:
    case AMDGPU::V_LSHLREV_B32_e64_vi:
    case AMDGPU::V_LSHLREV_B64_si:
    case AMDGPU::V_LSHLREV_B64_vi:
    case AMDGPU::V_LSHL_B32_e64_si:
    case AMDGPU::V_LSHL_B64_si:
    case AMDGPU::V_LSHL_B64_vi:
    case AMDGPU::V_LSHRREV_B16_e64_si:
    case AMDGPU::V_LSHRREV_B16_e64_vi:
    case AMDGPU::V_LSHRREV_B32_e64_si:
    case AMDGPU::V_LSHRREV_B32_e64_vi:
    case AMDGPU::V_LSHRREV_B64_si:
    case AMDGPU::V_LSHRREV_B64_vi:
    case AMDGPU::V_LSHR_B32_e64_si:
    case AMDGPU::V_LSHR_B64_si:
    case AMDGPU::V_LSHR_B64_vi:
    case AMDGPU::V_MAX_I16_e64_si:
    case AMDGPU::V_MAX_I16_e64_vi:
    case AMDGPU::V_MAX_I32_e64_si:
    case AMDGPU::V_MAX_I32_e64_vi:
    case AMDGPU::V_MAX_U16_e64_si:
    case AMDGPU::V_MAX_U16_e64_vi:
    case AMDGPU::V_MAX_U32_e64_si:
    case AMDGPU::V_MAX_U32_e64_vi:
    case AMDGPU::V_MBCNT_HI_U32_B32_e64_si:
    case AMDGPU::V_MBCNT_HI_U32_B32_e64_vi:
    case AMDGPU::V_MBCNT_LO_U32_B32_e64_si:
    case AMDGPU::V_MBCNT_LO_U32_B32_e64_vi:
    case AMDGPU::V_MIN_I16_e64_si:
    case AMDGPU::V_MIN_I16_e64_vi:
    case AMDGPU::V_MIN_I32_e64_si:
    case AMDGPU::V_MIN_I32_e64_vi:
    case AMDGPU::V_MIN_U16_e64_si:
    case AMDGPU::V_MIN_U16_e64_vi:
    case AMDGPU::V_MIN_U32_e64_si:
    case AMDGPU::V_MIN_U32_e64_vi:
    case AMDGPU::V_MQSAD_U16_U8_si:
    case AMDGPU::V_MQSAD_U16_U8_vi:
    case AMDGPU::V_MQSAD_U32_U8_si:
    case AMDGPU::V_MQSAD_U32_U8_vi:
    case AMDGPU::V_MUL_HI_I32_I24_e64_si:
    case AMDGPU::V_MUL_HI_I32_I24_e64_vi:
    case AMDGPU::V_MUL_HI_I32_si:
    case AMDGPU::V_MUL_HI_I32_vi:
    case AMDGPU::V_MUL_HI_U32_U24_e64_si:
    case AMDGPU::V_MUL_HI_U32_U24_e64_vi:
    case AMDGPU::V_MUL_HI_U32_si:
    case AMDGPU::V_MUL_HI_U32_vi:
    case AMDGPU::V_MUL_I32_I24_e64_si:
    case AMDGPU::V_MUL_I32_I24_e64_vi:
    case AMDGPU::V_MUL_LO_I32_si:
    case AMDGPU::V_MUL_LO_I32_vi:
    case AMDGPU::V_MUL_LO_U16_e64_si:
    case AMDGPU::V_MUL_LO_U16_e64_vi:
    case AMDGPU::V_MUL_LO_U32_si:
    case AMDGPU::V_MUL_LO_U32_vi:
    case AMDGPU::V_MUL_U32_U24_e64_si:
    case AMDGPU::V_MUL_U32_U24_e64_vi:
    case AMDGPU::V_OR_B32_e64_si:
    case AMDGPU::V_OR_B32_e64_vi:
    case AMDGPU::V_QSAD_PK_U16_U8_si:
    case AMDGPU::V_QSAD_PK_U16_U8_vi:
    case AMDGPU::V_READLANE_B32_vi:
    case AMDGPU::V_SUBBREV_U32_e64_si:
    case AMDGPU::V_SUBBREV_U32_e64_vi:
    case AMDGPU::V_SUBB_U32_e64_si:
    case AMDGPU::V_SUBB_U32_e64_vi:
    case AMDGPU::V_SUBREV_I32_e64_si:
    case AMDGPU::V_SUBREV_I32_e64_vi:
    case AMDGPU::V_SUBREV_U16_e64_si:
    case AMDGPU::V_SUBREV_U16_e64_vi:
    case AMDGPU::V_SUB_I32_e64_si:
    case AMDGPU::V_SUB_I32_e64_vi:
    case AMDGPU::V_SUB_U16_e64_si:
    case AMDGPU::V_SUB_U16_e64_vi:
    case AMDGPU::V_WRITELANE_B32_vi:
    case AMDGPU::V_XOR_B32_e64_si:
    case AMDGPU::V_XOR_B32_e64_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      break;
    }
    case AMDGPU::V_ALIGNBIT_B32_si:
    case AMDGPU::V_ALIGNBIT_B32_vi:
    case AMDGPU::V_ALIGNBYTE_B32_si:
    case AMDGPU::V_ALIGNBYTE_B32_vi:
    case AMDGPU::V_BFE_I32_si:
    case AMDGPU::V_BFE_I32_vi:
    case AMDGPU::V_BFE_U32_si:
    case AMDGPU::V_BFE_U32_vi:
    case AMDGPU::V_BFI_B32_si:
    case AMDGPU::V_BFI_B32_vi:
    case AMDGPU::V_CNDMASK_B32_e64_si:
    case AMDGPU::V_CNDMASK_B32_e64_vi:
    case AMDGPU::V_MAD_I32_I24_si:
    case AMDGPU::V_MAD_I32_I24_vi:
    case AMDGPU::V_MAD_I64_I32_si:
    case AMDGPU::V_MAD_I64_I32_vi:
    case AMDGPU::V_MAD_U32_U24_si:
    case AMDGPU::V_MAD_U32_U24_vi:
    case AMDGPU::V_MAD_U64_U32_si:
    case AMDGPU::V_MAD_U64_U32_vi:
    case AMDGPU::V_MAX3_I32_si:
    case AMDGPU::V_MAX3_I32_vi:
    case AMDGPU::V_MAX3_U32_si:
    case AMDGPU::V_MAX3_U32_vi:
    case AMDGPU::V_MED3_I32_si:
    case AMDGPU::V_MED3_I32_vi:
    case AMDGPU::V_MED3_U32_si:
    case AMDGPU::V_MED3_U32_vi:
    case AMDGPU::V_MIN3_I32_si:
    case AMDGPU::V_MIN3_I32_vi:
    case AMDGPU::V_MIN3_U32_si:
    case AMDGPU::V_MIN3_U32_vi:
    case AMDGPU::V_SAD_U32_si:
    case AMDGPU::V_SAD_U32_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 50;
      break;
    }
    case AMDGPU::V_CEIL_F16_e64_si:
    case AMDGPU::V_CEIL_F32_e64_si:
    case AMDGPU::V_CEIL_F64_e64_si:
    case AMDGPU::V_COS_F16_e64_si:
    case AMDGPU::V_COS_F32_e64_si:
    case AMDGPU::V_CVT_F16_F32_e64_si:
    case AMDGPU::V_CVT_F32_F64_e64_si:
    case AMDGPU::V_CVT_F64_F32_e64_si:
    case AMDGPU::V_CVT_FLR_I32_F32_e64_si:
    case AMDGPU::V_CVT_I16_F16_e64_si:
    case AMDGPU::V_CVT_I32_F32_e64_si:
    case AMDGPU::V_CVT_I32_F64_e64_si:
    case AMDGPU::V_CVT_RPI_I32_F32_e64_si:
    case AMDGPU::V_CVT_U16_F16_e64_si:
    case AMDGPU::V_CVT_U32_F32_e64_si:
    case AMDGPU::V_CVT_U32_F64_e64_si:
    case AMDGPU::V_EXP_F16_e64_si:
    case AMDGPU::V_EXP_F32_e64_si:
    case AMDGPU::V_EXP_LEGACY_F32_e64_si:
    case AMDGPU::V_FLOOR_F16_e64_si:
    case AMDGPU::V_FLOOR_F32_e64_si:
    case AMDGPU::V_FLOOR_F64_e64_si:
    case AMDGPU::V_FRACT_F16_e64_si:
    case AMDGPU::V_FRACT_F32_e64_si:
    case AMDGPU::V_FRACT_F64_e64_si:
    case AMDGPU::V_FREXP_EXP_I16_F16_e64_si:
    case AMDGPU::V_FREXP_EXP_I32_F32_e64_si:
    case AMDGPU::V_FREXP_EXP_I32_F64_e64_si:
    case AMDGPU::V_FREXP_MANT_F16_e64_si:
    case AMDGPU::V_FREXP_MANT_F32_e64_si:
    case AMDGPU::V_FREXP_MANT_F64_e64_si:
    case AMDGPU::V_LOG_CLAMP_F32_e64_si:
    case AMDGPU::V_LOG_F16_e64_si:
    case AMDGPU::V_LOG_F32_e64_si:
    case AMDGPU::V_LOG_LEGACY_F32_e64_si:
    case AMDGPU::V_RCP_CLAMP_F32_e64_si:
    case AMDGPU::V_RCP_CLAMP_F64_e64_si:
    case AMDGPU::V_RCP_F16_e64_si:
    case AMDGPU::V_RCP_F32_e64_si:
    case AMDGPU::V_RCP_F64_e64_si:
    case AMDGPU::V_RCP_IFLAG_F32_e64_si:
    case AMDGPU::V_RCP_LEGACY_F32_e64_si:
    case AMDGPU::V_RNDNE_F16_e64_si:
    case AMDGPU::V_RNDNE_F32_e64_si:
    case AMDGPU::V_RNDNE_F64_e64_si:
    case AMDGPU::V_RSQ_CLAMP_F32_e64_si:
    case AMDGPU::V_RSQ_CLAMP_F64_e64_si:
    case AMDGPU::V_RSQ_F16_e64_si:
    case AMDGPU::V_RSQ_F32_e64_si:
    case AMDGPU::V_RSQ_F64_e64_si:
    case AMDGPU::V_RSQ_LEGACY_F32_e64_si:
    case AMDGPU::V_SIN_F16_e64_si:
    case AMDGPU::V_SIN_F32_e64_si:
    case AMDGPU::V_SQRT_F16_e64_si:
    case AMDGPU::V_SQRT_F32_e64_si:
    case AMDGPU::V_SQRT_F64_e64_si:
    case AMDGPU::V_TRUNC_F16_e64_si:
    case AMDGPU::V_TRUNC_F32_e64_si:
    case AMDGPU::V_TRUNC_F64_e64_si: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      Value |= (op & UINT64_C(2)) << 7;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 11;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 59;
      break;
    }
    case AMDGPU::V_CEIL_F16_e64_vi:
    case AMDGPU::V_CEIL_F32_e64_vi:
    case AMDGPU::V_CEIL_F64_e64_vi:
    case AMDGPU::V_COS_F16_e64_vi:
    case AMDGPU::V_COS_F32_e64_vi:
    case AMDGPU::V_CVT_F16_F32_e64_vi:
    case AMDGPU::V_CVT_F32_F64_e64_vi:
    case AMDGPU::V_CVT_F64_F32_e64_vi:
    case AMDGPU::V_CVT_FLR_I32_F32_e64_vi:
    case AMDGPU::V_CVT_I16_F16_e64_vi:
    case AMDGPU::V_CVT_I32_F32_e64_vi:
    case AMDGPU::V_CVT_I32_F64_e64_vi:
    case AMDGPU::V_CVT_RPI_I32_F32_e64_vi:
    case AMDGPU::V_CVT_U16_F16_e64_vi:
    case AMDGPU::V_CVT_U32_F32_e64_vi:
    case AMDGPU::V_CVT_U32_F64_e64_vi:
    case AMDGPU::V_EXP_F16_e64_vi:
    case AMDGPU::V_EXP_F32_e64_vi:
    case AMDGPU::V_EXP_LEGACY_F32_e64_vi:
    case AMDGPU::V_FLOOR_F16_e64_vi:
    case AMDGPU::V_FLOOR_F32_e64_vi:
    case AMDGPU::V_FLOOR_F64_e64_vi:
    case AMDGPU::V_FRACT_F16_e64_vi:
    case AMDGPU::V_FRACT_F32_e64_vi:
    case AMDGPU::V_FRACT_F64_e64_vi:
    case AMDGPU::V_FREXP_EXP_I16_F16_e64_vi:
    case AMDGPU::V_FREXP_EXP_I32_F32_e64_vi:
    case AMDGPU::V_FREXP_EXP_I32_F64_e64_vi:
    case AMDGPU::V_FREXP_MANT_F16_e64_vi:
    case AMDGPU::V_FREXP_MANT_F32_e64_vi:
    case AMDGPU::V_FREXP_MANT_F64_e64_vi:
    case AMDGPU::V_LOG_F16_e64_vi:
    case AMDGPU::V_LOG_F32_e64_vi:
    case AMDGPU::V_LOG_LEGACY_F32_e64_vi:
    case AMDGPU::V_RCP_F16_e64_vi:
    case AMDGPU::V_RCP_F32_e64_vi:
    case AMDGPU::V_RCP_F64_e64_vi:
    case AMDGPU::V_RCP_IFLAG_F32_e64_vi:
    case AMDGPU::V_RNDNE_F16_e64_vi:
    case AMDGPU::V_RNDNE_F32_e64_vi:
    case AMDGPU::V_RNDNE_F64_e64_vi:
    case AMDGPU::V_RSQ_F16_e64_vi:
    case AMDGPU::V_RSQ_F32_e64_vi:
    case AMDGPU::V_RSQ_F64_e64_vi:
    case AMDGPU::V_SIN_F16_e64_vi:
    case AMDGPU::V_SIN_F32_e64_vi:
    case AMDGPU::V_SQRT_F16_e64_vi:
    case AMDGPU::V_SQRT_F32_e64_vi:
    case AMDGPU::V_SQRT_F64_e64_vi:
    case AMDGPU::V_TRUNC_F16_e64_vi:
    case AMDGPU::V_TRUNC_F32_e64_vi:
    case AMDGPU::V_TRUNC_F64_e64_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      Value |= (op & UINT64_C(2)) << 7;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 15;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 59;
      break;
    }
    case AMDGPU::V_CMPX_CLASS_F32_e64_si:
    case AMDGPU::V_CMPX_CLASS_F32_e64_vi:
    case AMDGPU::V_CMPX_CLASS_F64_e64_si:
    case AMDGPU::V_CMPX_CLASS_F64_e64_vi:
    case AMDGPU::V_CMP_CLASS_F32_e64_si:
    case AMDGPU::V_CMP_CLASS_F32_e64_vi:
    case AMDGPU::V_CMP_CLASS_F64_e64_si:
    case AMDGPU::V_CMP_CLASS_F64_e64_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      Value |= (op & UINT64_C(2)) << 7;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      break;
    }
    case AMDGPU::V_ADD_F16_e64_si:
    case AMDGPU::V_ADD_F32_e64_si:
    case AMDGPU::V_ADD_F64_si:
    case AMDGPU::V_CMPSX_EQ_F32_e64_si:
    case AMDGPU::V_CMPSX_EQ_F64_e64_si:
    case AMDGPU::V_CMPSX_F_F32_e64_si:
    case AMDGPU::V_CMPSX_F_F64_e64_si:
    case AMDGPU::V_CMPSX_GE_F32_e64_si:
    case AMDGPU::V_CMPSX_GE_F64_e64_si:
    case AMDGPU::V_CMPSX_GT_F32_e64_si:
    case AMDGPU::V_CMPSX_GT_F64_e64_si:
    case AMDGPU::V_CMPSX_LE_F32_e64_si:
    case AMDGPU::V_CMPSX_LE_F64_e64_si:
    case AMDGPU::V_CMPSX_LG_F32_e64_si:
    case AMDGPU::V_CMPSX_LG_F64_e64_si:
    case AMDGPU::V_CMPSX_LT_F32_e64_si:
    case AMDGPU::V_CMPSX_LT_F64_e64_si:
    case AMDGPU::V_CMPSX_NEQ_F32_e64_si:
    case AMDGPU::V_CMPSX_NEQ_F64_e64_si:
    case AMDGPU::V_CMPSX_NGE_F32_e64_si:
    case AMDGPU::V_CMPSX_NGE_F64_e64_si:
    case AMDGPU::V_CMPSX_NGT_F32_e64_si:
    case AMDGPU::V_CMPSX_NGT_F64_e64_si:
    case AMDGPU::V_CMPSX_NLE_F32_e64_si:
    case AMDGPU::V_CMPSX_NLE_F64_e64_si:
    case AMDGPU::V_CMPSX_NLG_F32_e64_si:
    case AMDGPU::V_CMPSX_NLG_F64_e64_si:
    case AMDGPU::V_CMPSX_NLT_F32_e64_si:
    case AMDGPU::V_CMPSX_NLT_F64_e64_si:
    case AMDGPU::V_CMPSX_O_F32_e64_si:
    case AMDGPU::V_CMPSX_O_F64_e64_si:
    case AMDGPU::V_CMPSX_TRU_F32_e64_si:
    case AMDGPU::V_CMPSX_TRU_F64_e64_si:
    case AMDGPU::V_CMPSX_U_F32_e64_si:
    case AMDGPU::V_CMPSX_U_F64_e64_si:
    case AMDGPU::V_CMPS_EQ_F32_e64_si:
    case AMDGPU::V_CMPS_EQ_F64_e64_si:
    case AMDGPU::V_CMPS_F_F32_e64_si:
    case AMDGPU::V_CMPS_F_F64_e64_si:
    case AMDGPU::V_CMPS_GE_F32_e64_si:
    case AMDGPU::V_CMPS_GE_F64_e64_si:
    case AMDGPU::V_CMPS_GT_F32_e64_si:
    case AMDGPU::V_CMPS_GT_F64_e64_si:
    case AMDGPU::V_CMPS_LE_F32_e64_si:
    case AMDGPU::V_CMPS_LE_F64_e64_si:
    case AMDGPU::V_CMPS_LG_F32_e64_si:
    case AMDGPU::V_CMPS_LG_F64_e64_si:
    case AMDGPU::V_CMPS_LT_F32_e64_si:
    case AMDGPU::V_CMPS_LT_F64_e64_si:
    case AMDGPU::V_CMPS_NEQ_F32_e64_si:
    case AMDGPU::V_CMPS_NEQ_F64_e64_si:
    case AMDGPU::V_CMPS_NGE_F32_e64_si:
    case AMDGPU::V_CMPS_NGE_F64_e64_si:
    case AMDGPU::V_CMPS_NGT_F32_e64_si:
    case AMDGPU::V_CMPS_NGT_F64_e64_si:
    case AMDGPU::V_CMPS_NLE_F32_e64_si:
    case AMDGPU::V_CMPS_NLE_F64_e64_si:
    case AMDGPU::V_CMPS_NLG_F32_e64_si:
    case AMDGPU::V_CMPS_NLG_F64_e64_si:
    case AMDGPU::V_CMPS_NLT_F32_e64_si:
    case AMDGPU::V_CMPS_NLT_F64_e64_si:
    case AMDGPU::V_CMPS_O_F32_e64_si:
    case AMDGPU::V_CMPS_O_F64_e64_si:
    case AMDGPU::V_CMPS_TRU_F32_e64_si:
    case AMDGPU::V_CMPS_TRU_F64_e64_si:
    case AMDGPU::V_CMPS_U_F32_e64_si:
    case AMDGPU::V_CMPS_U_F64_e64_si:
    case AMDGPU::V_CMPX_EQ_F32_e64_si:
    case AMDGPU::V_CMPX_EQ_F64_e64_si:
    case AMDGPU::V_CMPX_F_F32_e64_si:
    case AMDGPU::V_CMPX_F_F64_e64_si:
    case AMDGPU::V_CMPX_GE_F32_e64_si:
    case AMDGPU::V_CMPX_GE_F64_e64_si:
    case AMDGPU::V_CMPX_GT_F32_e64_si:
    case AMDGPU::V_CMPX_GT_F64_e64_si:
    case AMDGPU::V_CMPX_LE_F32_e64_si:
    case AMDGPU::V_CMPX_LE_F64_e64_si:
    case AMDGPU::V_CMPX_LG_F32_e64_si:
    case AMDGPU::V_CMPX_LG_F64_e64_si:
    case AMDGPU::V_CMPX_LT_F32_e64_si:
    case AMDGPU::V_CMPX_LT_F64_e64_si:
    case AMDGPU::V_CMPX_NEQ_F32_e64_si:
    case AMDGPU::V_CMPX_NEQ_F64_e64_si:
    case AMDGPU::V_CMPX_NGE_F32_e64_si:
    case AMDGPU::V_CMPX_NGE_F64_e64_si:
    case AMDGPU::V_CMPX_NGT_F32_e64_si:
    case AMDGPU::V_CMPX_NGT_F64_e64_si:
    case AMDGPU::V_CMPX_NLE_F32_e64_si:
    case AMDGPU::V_CMPX_NLE_F64_e64_si:
    case AMDGPU::V_CMPX_NLG_F32_e64_si:
    case AMDGPU::V_CMPX_NLG_F64_e64_si:
    case AMDGPU::V_CMPX_NLT_F32_e64_si:
    case AMDGPU::V_CMPX_NLT_F64_e64_si:
    case AMDGPU::V_CMPX_O_F32_e64_si:
    case AMDGPU::V_CMPX_O_F64_e64_si:
    case AMDGPU::V_CMPX_TRU_F32_e64_si:
    case AMDGPU::V_CMPX_TRU_F64_e64_si:
    case AMDGPU::V_CMPX_U_F32_e64_si:
    case AMDGPU::V_CMPX_U_F64_e64_si:
    case AMDGPU::V_CMP_EQ_F32_e64_si:
    case AMDGPU::V_CMP_EQ_F64_e64_si:
    case AMDGPU::V_CMP_F_F32_e64_si:
    case AMDGPU::V_CMP_F_F64_e64_si:
    case AMDGPU::V_CMP_GE_F32_e64_si:
    case AMDGPU::V_CMP_GE_F64_e64_si:
    case AMDGPU::V_CMP_GT_F32_e64_si:
    case AMDGPU::V_CMP_GT_F64_e64_si:
    case AMDGPU::V_CMP_LE_F32_e64_si:
    case AMDGPU::V_CMP_LE_F64_e64_si:
    case AMDGPU::V_CMP_LG_F32_e64_si:
    case AMDGPU::V_CMP_LG_F64_e64_si:
    case AMDGPU::V_CMP_LT_F32_e64_si:
    case AMDGPU::V_CMP_LT_F64_e64_si:
    case AMDGPU::V_CMP_NEQ_F32_e64_si:
    case AMDGPU::V_CMP_NEQ_F64_e64_si:
    case AMDGPU::V_CMP_NGE_F32_e64_si:
    case AMDGPU::V_CMP_NGE_F64_e64_si:
    case AMDGPU::V_CMP_NGT_F32_e64_si:
    case AMDGPU::V_CMP_NGT_F64_e64_si:
    case AMDGPU::V_CMP_NLE_F32_e64_si:
    case AMDGPU::V_CMP_NLE_F64_e64_si:
    case AMDGPU::V_CMP_NLG_F32_e64_si:
    case AMDGPU::V_CMP_NLG_F64_e64_si:
    case AMDGPU::V_CMP_NLT_F32_e64_si:
    case AMDGPU::V_CMP_NLT_F64_e64_si:
    case AMDGPU::V_CMP_O_F32_e64_si:
    case AMDGPU::V_CMP_O_F64_e64_si:
    case AMDGPU::V_CMP_TRU_F32_e64_si:
    case AMDGPU::V_CMP_TRU_F64_e64_si:
    case AMDGPU::V_CMP_U_F32_e64_si:
    case AMDGPU::V_CMP_U_F64_e64_si:
    case AMDGPU::V_CVT_PKACCUM_U8_F32_e64_si:
    case AMDGPU::V_CVT_PKNORM_I16_F32_e64_si:
    case AMDGPU::V_CVT_PKNORM_U16_F32_e64_si:
    case AMDGPU::V_CVT_PKRTZ_F16_F32_e64_si:
    case AMDGPU::V_LDEXP_F16_e64_si:
    case AMDGPU::V_LDEXP_F32_e64_si:
    case AMDGPU::V_LDEXP_F64_si:
    case AMDGPU::V_MAC_F16_e64_si:
    case AMDGPU::V_MAC_LEGACY_F32_e64_si:
    case AMDGPU::V_MAX_F16_e64_si:
    case AMDGPU::V_MAX_F32_e64_si:
    case AMDGPU::V_MAX_F64_si:
    case AMDGPU::V_MAX_LEGACY_F32_e64_si:
    case AMDGPU::V_MIN_F16_e64_si:
    case AMDGPU::V_MIN_F32_e64_si:
    case AMDGPU::V_MIN_F64_si:
    case AMDGPU::V_MIN_LEGACY_F32_e64_si:
    case AMDGPU::V_MUL_F16_e64_si:
    case AMDGPU::V_MUL_F32_e64_si:
    case AMDGPU::V_MUL_F64_si:
    case AMDGPU::V_MUL_LEGACY_F32_e64_si:
    case AMDGPU::V_SUBREV_F16_e64_si:
    case AMDGPU::V_SUBREV_F32_e64_si:
    case AMDGPU::V_SUB_F16_e64_si:
    case AMDGPU::V_SUB_F32_e64_si:
    case AMDGPU::V_TRIG_PREOP_F64_si: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      Value |= (op & UINT64_C(2)) << 7;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1_modifiers
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 62;
      Value |= (op & UINT64_C(2)) << 8;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 11;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 59;
      break;
    }
    case AMDGPU::V_ADD_F16_e64_vi:
    case AMDGPU::V_ADD_F32_e64_vi:
    case AMDGPU::V_ADD_F64_vi:
    case AMDGPU::V_CMPSX_EQ_F32_e64_vi:
    case AMDGPU::V_CMPSX_EQ_F64_e64_vi:
    case AMDGPU::V_CMPSX_F_F32_e64_vi:
    case AMDGPU::V_CMPSX_F_F64_e64_vi:
    case AMDGPU::V_CMPSX_GE_F32_e64_vi:
    case AMDGPU::V_CMPSX_GE_F64_e64_vi:
    case AMDGPU::V_CMPSX_GT_F32_e64_vi:
    case AMDGPU::V_CMPSX_GT_F64_e64_vi:
    case AMDGPU::V_CMPSX_LE_F32_e64_vi:
    case AMDGPU::V_CMPSX_LE_F64_e64_vi:
    case AMDGPU::V_CMPSX_LG_F32_e64_vi:
    case AMDGPU::V_CMPSX_LG_F64_e64_vi:
    case AMDGPU::V_CMPSX_LT_F32_e64_vi:
    case AMDGPU::V_CMPSX_LT_F64_e64_vi:
    case AMDGPU::V_CMPSX_NEQ_F32_e64_vi:
    case AMDGPU::V_CMPSX_NEQ_F64_e64_vi:
    case AMDGPU::V_CMPSX_NGE_F32_e64_vi:
    case AMDGPU::V_CMPSX_NGE_F64_e64_vi:
    case AMDGPU::V_CMPSX_NGT_F32_e64_vi:
    case AMDGPU::V_CMPSX_NGT_F64_e64_vi:
    case AMDGPU::V_CMPSX_NLE_F32_e64_vi:
    case AMDGPU::V_CMPSX_NLE_F64_e64_vi:
    case AMDGPU::V_CMPSX_NLG_F32_e64_vi:
    case AMDGPU::V_CMPSX_NLG_F64_e64_vi:
    case AMDGPU::V_CMPSX_NLT_F32_e64_vi:
    case AMDGPU::V_CMPSX_NLT_F64_e64_vi:
    case AMDGPU::V_CMPSX_O_F32_e64_vi:
    case AMDGPU::V_CMPSX_O_F64_e64_vi:
    case AMDGPU::V_CMPSX_TRU_F32_e64_vi:
    case AMDGPU::V_CMPSX_TRU_F64_e64_vi:
    case AMDGPU::V_CMPSX_U_F32_e64_vi:
    case AMDGPU::V_CMPSX_U_F64_e64_vi:
    case AMDGPU::V_CMPS_EQ_F32_e64_vi:
    case AMDGPU::V_CMPS_EQ_F64_e64_vi:
    case AMDGPU::V_CMPS_F_F32_e64_vi:
    case AMDGPU::V_CMPS_F_F64_e64_vi:
    case AMDGPU::V_CMPS_GE_F32_e64_vi:
    case AMDGPU::V_CMPS_GE_F64_e64_vi:
    case AMDGPU::V_CMPS_GT_F32_e64_vi:
    case AMDGPU::V_CMPS_GT_F64_e64_vi:
    case AMDGPU::V_CMPS_LE_F32_e64_vi:
    case AMDGPU::V_CMPS_LE_F64_e64_vi:
    case AMDGPU::V_CMPS_LG_F32_e64_vi:
    case AMDGPU::V_CMPS_LG_F64_e64_vi:
    case AMDGPU::V_CMPS_LT_F32_e64_vi:
    case AMDGPU::V_CMPS_LT_F64_e64_vi:
    case AMDGPU::V_CMPS_NEQ_F32_e64_vi:
    case AMDGPU::V_CMPS_NEQ_F64_e64_vi:
    case AMDGPU::V_CMPS_NGE_F32_e64_vi:
    case AMDGPU::V_CMPS_NGE_F64_e64_vi:
    case AMDGPU::V_CMPS_NGT_F32_e64_vi:
    case AMDGPU::V_CMPS_NGT_F64_e64_vi:
    case AMDGPU::V_CMPS_NLE_F32_e64_vi:
    case AMDGPU::V_CMPS_NLE_F64_e64_vi:
    case AMDGPU::V_CMPS_NLG_F32_e64_vi:
    case AMDGPU::V_CMPS_NLG_F64_e64_vi:
    case AMDGPU::V_CMPS_NLT_F32_e64_vi:
    case AMDGPU::V_CMPS_NLT_F64_e64_vi:
    case AMDGPU::V_CMPS_O_F32_e64_vi:
    case AMDGPU::V_CMPS_O_F64_e64_vi:
    case AMDGPU::V_CMPS_TRU_F32_e64_vi:
    case AMDGPU::V_CMPS_TRU_F64_e64_vi:
    case AMDGPU::V_CMPS_U_F32_e64_vi:
    case AMDGPU::V_CMPS_U_F64_e64_vi:
    case AMDGPU::V_CMPX_EQ_F32_e64_vi:
    case AMDGPU::V_CMPX_EQ_F64_e64_vi:
    case AMDGPU::V_CMPX_F_F32_e64_vi:
    case AMDGPU::V_CMPX_F_F64_e64_vi:
    case AMDGPU::V_CMPX_GE_F32_e64_vi:
    case AMDGPU::V_CMPX_GE_F64_e64_vi:
    case AMDGPU::V_CMPX_GT_F32_e64_vi:
    case AMDGPU::V_CMPX_GT_F64_e64_vi:
    case AMDGPU::V_CMPX_LE_F32_e64_vi:
    case AMDGPU::V_CMPX_LE_F64_e64_vi:
    case AMDGPU::V_CMPX_LG_F32_e64_vi:
    case AMDGPU::V_CMPX_LG_F64_e64_vi:
    case AMDGPU::V_CMPX_LT_F32_e64_vi:
    case AMDGPU::V_CMPX_LT_F64_e64_vi:
    case AMDGPU::V_CMPX_NEQ_F32_e64_vi:
    case AMDGPU::V_CMPX_NEQ_F64_e64_vi:
    case AMDGPU::V_CMPX_NGE_F32_e64_vi:
    case AMDGPU::V_CMPX_NGE_F64_e64_vi:
    case AMDGPU::V_CMPX_NGT_F32_e64_vi:
    case AMDGPU::V_CMPX_NGT_F64_e64_vi:
    case AMDGPU::V_CMPX_NLE_F32_e64_vi:
    case AMDGPU::V_CMPX_NLE_F64_e64_vi:
    case AMDGPU::V_CMPX_NLG_F32_e64_vi:
    case AMDGPU::V_CMPX_NLG_F64_e64_vi:
    case AMDGPU::V_CMPX_NLT_F32_e64_vi:
    case AMDGPU::V_CMPX_NLT_F64_e64_vi:
    case AMDGPU::V_CMPX_O_F32_e64_vi:
    case AMDGPU::V_CMPX_O_F64_e64_vi:
    case AMDGPU::V_CMPX_TRU_F32_e64_vi:
    case AMDGPU::V_CMPX_TRU_F64_e64_vi:
    case AMDGPU::V_CMPX_U_F32_e64_vi:
    case AMDGPU::V_CMPX_U_F64_e64_vi:
    case AMDGPU::V_CMP_EQ_F32_e64_vi:
    case AMDGPU::V_CMP_EQ_F64_e64_vi:
    case AMDGPU::V_CMP_F_F32_e64_vi:
    case AMDGPU::V_CMP_F_F64_e64_vi:
    case AMDGPU::V_CMP_GE_F32_e64_vi:
    case AMDGPU::V_CMP_GE_F64_e64_vi:
    case AMDGPU::V_CMP_GT_F32_e64_vi:
    case AMDGPU::V_CMP_GT_F64_e64_vi:
    case AMDGPU::V_CMP_LE_F32_e64_vi:
    case AMDGPU::V_CMP_LE_F64_e64_vi:
    case AMDGPU::V_CMP_LG_F32_e64_vi:
    case AMDGPU::V_CMP_LG_F64_e64_vi:
    case AMDGPU::V_CMP_LT_F32_e64_vi:
    case AMDGPU::V_CMP_LT_F64_e64_vi:
    case AMDGPU::V_CMP_NEQ_F32_e64_vi:
    case AMDGPU::V_CMP_NEQ_F64_e64_vi:
    case AMDGPU::V_CMP_NGE_F32_e64_vi:
    case AMDGPU::V_CMP_NGE_F64_e64_vi:
    case AMDGPU::V_CMP_NGT_F32_e64_vi:
    case AMDGPU::V_CMP_NGT_F64_e64_vi:
    case AMDGPU::V_CMP_NLE_F32_e64_vi:
    case AMDGPU::V_CMP_NLE_F64_e64_vi:
    case AMDGPU::V_CMP_NLG_F32_e64_vi:
    case AMDGPU::V_CMP_NLG_F64_e64_vi:
    case AMDGPU::V_CMP_NLT_F32_e64_vi:
    case AMDGPU::V_CMP_NLT_F64_e64_vi:
    case AMDGPU::V_CMP_O_F32_e64_vi:
    case AMDGPU::V_CMP_O_F64_e64_vi:
    case AMDGPU::V_CMP_TRU_F32_e64_vi:
    case AMDGPU::V_CMP_TRU_F64_e64_vi:
    case AMDGPU::V_CMP_U_F32_e64_vi:
    case AMDGPU::V_CMP_U_F64_e64_vi:
    case AMDGPU::V_CVT_PKACCUM_U8_F32_e64_vi:
    case AMDGPU::V_CVT_PKNORM_I16_F32_e64_vi:
    case AMDGPU::V_CVT_PKNORM_U16_F32_e64_vi:
    case AMDGPU::V_CVT_PKRTZ_F16_F32_e64_vi:
    case AMDGPU::V_LDEXP_F16_e64_vi:
    case AMDGPU::V_LDEXP_F32_e64_vi:
    case AMDGPU::V_LDEXP_F64_vi:
    case AMDGPU::V_MAC_F16_e64_vi:
    case AMDGPU::V_MAC_LEGACY_F32_e64_vi:
    case AMDGPU::V_MAX_F16_e64_vi:
    case AMDGPU::V_MAX_F32_e64_vi:
    case AMDGPU::V_MAX_F64_vi:
    case AMDGPU::V_MIN_F16_e64_vi:
    case AMDGPU::V_MIN_F32_e64_vi:
    case AMDGPU::V_MIN_F64_vi:
    case AMDGPU::V_MUL_F16_e64_vi:
    case AMDGPU::V_MUL_F32_e64_vi:
    case AMDGPU::V_MUL_F64_vi:
    case AMDGPU::V_MUL_LEGACY_F32_e64_vi:
    case AMDGPU::V_SUBREV_F16_e64_vi:
    case AMDGPU::V_SUBREV_F32_e64_vi:
    case AMDGPU::V_SUB_F16_e64_vi:
    case AMDGPU::V_SUB_F32_e64_vi:
    case AMDGPU::V_TRIG_PREOP_F64_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      Value |= (op & UINT64_C(2)) << 7;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1_modifiers
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 62;
      Value |= (op & UINT64_C(2)) << 8;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 15;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 59;
      break;
    }
    case AMDGPU::V_MAC_F32_e64_si: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      Value |= (op & UINT64_C(2)) << 7;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1_modifiers
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 62;
      Value |= (op & UINT64_C(2)) << 8;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 11;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 59;
      break;
    }
    case AMDGPU::V_MAC_F32_e64_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      Value |= (op & UINT64_C(2)) << 7;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1_modifiers
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 62;
      Value |= (op & UINT64_C(2)) << 8;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 15;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 59;
      break;
    }
    case AMDGPU::V_CUBEID_F32_si:
    case AMDGPU::V_CUBEMA_F32_si:
    case AMDGPU::V_CUBESC_F32_si:
    case AMDGPU::V_CUBETC_F32_si:
    case AMDGPU::V_DIV_FIXUP_F32_si:
    case AMDGPU::V_DIV_FIXUP_F64_si:
    case AMDGPU::V_DIV_FMAS_F32_si:
    case AMDGPU::V_DIV_FMAS_F64_si:
    case AMDGPU::V_FMA_F32_si:
    case AMDGPU::V_FMA_F64_si:
    case AMDGPU::V_MAD_F32_si:
    case AMDGPU::V_MAD_LEGACY_F32_si:
    case AMDGPU::V_MAX3_F32_si:
    case AMDGPU::V_MED3_F32_si:
    case AMDGPU::V_MIN3_F32_si:
    case AMDGPU::V_MULLIT_F32_si: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      Value |= (op & UINT64_C(2)) << 7;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1_modifiers
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 62;
      Value |= (op & UINT64_C(2)) << 8;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      // op: src2_modifiers
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 63;
      Value |= (op & UINT64_C(2)) << 9;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 50;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 11;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 59;
      break;
    }
    case AMDGPU::V_CUBEID_F32_vi:
    case AMDGPU::V_CUBEMA_F32_vi:
    case AMDGPU::V_CUBESC_F32_vi:
    case AMDGPU::V_CUBETC_F32_vi:
    case AMDGPU::V_DIV_FIXUP_F32_vi:
    case AMDGPU::V_DIV_FIXUP_F64_vi:
    case AMDGPU::V_DIV_FMAS_F32_vi:
    case AMDGPU::V_DIV_FMAS_F64_vi:
    case AMDGPU::V_FMA_F32_vi:
    case AMDGPU::V_FMA_F64_vi:
    case AMDGPU::V_MAD_F32_vi:
    case AMDGPU::V_MAD_LEGACY_F32_vi:
    case AMDGPU::V_MAX3_F32_vi:
    case AMDGPU::V_MED3_F32_vi:
    case AMDGPU::V_MIN3_F32_vi:
    case AMDGPU::V_MULLIT_F32_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      Value |= (op & UINT64_C(2)) << 7;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1_modifiers
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 62;
      Value |= (op & UINT64_C(2)) << 8;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      // op: src2_modifiers
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 63;
      Value |= (op & UINT64_C(2)) << 9;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 50;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 15;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 59;
      break;
    }
    case AMDGPU::V_DIV_SCALE_F32_si:
    case AMDGPU::V_DIV_SCALE_F64_si: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1_modifiers
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 62;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      // op: src2_modifiers
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 63;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 50;
      // op: sdst
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 8;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 59;
      break;
    }
    case AMDGPU::V_DIV_SCALE_F32_vi:
    case AMDGPU::V_DIV_SCALE_F64_vi: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      // op: src0_modifiers
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 61;
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1_modifiers
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 62;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 41;
      // op: src2_modifiers
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 63;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 50;
      // op: sdst
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 8;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 59;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 15;
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

