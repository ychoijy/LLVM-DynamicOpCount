/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64AppleInstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    12402U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    12395U,	// BUNDLE
    12412U,	// LIFETIME_START
    12382U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    17491U,	// ABSv16i8
    67153563U,	// ABSv1i64
    25923U,	// ABSv2i32
    20413U,	// ABSv2i64
    21769U,	// ABSv4i16
    27834U,	// ABSv4i32
    23128U,	// ABSv8i16
    18440U,	// ABSv8i8
    2214637235U,	// ADCSWr
    2214637235U,	// ADCSXr
    2214628085U,	// ADCWr
    2214628085U,	// ADCXr
    2147509196U,	// ADDHNv2i64_v2i32
    2281760699U,	// ADDHNv2i64_v4i32
    2147505129U,	// ADDHNv4i32_v4i16
    2281756319U,	// ADDHNv4i32_v8i16
    2281750836U,	// ADDHNv8i16_v16i8
    2147501828U,	// ADDHNv8i16_v8i8
    2147501004U,	// ADDPv16i8
    2147509347U,	// ADDPv2i32
    2147503885U,	// ADDPv2i64
    36621U,	// ADDPv2i64p
    2147505259U,	// ADDPv4i16
    2147511258U,	// ADDPv4i32
    2147506618U,	// ADDPv8i16
    2147501966U,	// ADDPv8i8
    2214637247U,	// ADDSWri
    0U,	// ADDSWrr
    2214637247U,	// ADDSWrs
    2214637247U,	// ADDSWrx
    2214637247U,	// ADDSXri
    0U,	// ADDSXrr
    2214637247U,	// ADDSXrs
    2214637247U,	// ADDSXrx
    2214637247U,	// ADDSXrx64
    33992U,	// ADDVv16i8v
    38225U,	// ADDVv4i16v
    44445U,	// ADDVv4i32v
    39584U,	// ADDVv8i16v
    34929U,	// ADDVv8i8v
    2214629635U,	// ADDWri
    0U,	// ADDWrr
    2214629635U,	// ADDWrs
    2214629635U,	// ADDWrx
    2214629635U,	// ADDXri
    0U,	// ADDXrr
    2214629635U,	// ADDXrs
    2214629635U,	// ADDXrx
    2214629635U,	// ADDXrx64
    2147500694U,	// ADDv16i8
    2214629635U,	// ADDv1i64
    2147508770U,	// ADDv2i32
    2147503379U,	// ADDv2i64
    2147504846U,	// ADDv4i16
    2147510577U,	// ADDv4i32
    2147506159U,	// ADDv8i16
    2147501580U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    67149855U,	// ADR
    201367458U,	// ADRP
    134267618U,	// AESDrr
    134267648U,	// AESErr
    17000U,	// AESIMCrr
    17012U,	// AESMCrr
    2214637253U,	// ANDSWri
    0U,	// ANDSWrr
    2214637253U,	// ANDSWrs
    2214637253U,	// ANDSXri
    0U,	// ANDSXrr
    2214637253U,	// ANDSXrs
    2214629677U,	// ANDWri
    0U,	// ANDWrr
    2214629677U,	// ANDWrs
    2214629677U,	// ANDXri
    0U,	// ANDXrr
    2214629677U,	// ANDXrs
    2147500761U,	// ANDv16i8
    2147501641U,	// ANDv8i8
    2214633581U,	// ASRVWr
    2214633581U,	// ASRVXr
    65762U,	// B
    2415959750U,	// BFMWri
    2415959750U,	// BFMXri
    0U,	// BICSWrr
    2214637241U,	// BICSWrs
    0U,	// BICSXrr
    2214637241U,	// BICSXrs
    0U,	// BICWrr
    2214628090U,	// BICWrs
    0U,	// BICXrr
    2214628090U,	// BICXrs
    2147500639U,	// BICv16i8
    335602174U,	// BICv2i32
    335598257U,	// BICv4i16
    335603981U,	// BICv4i32
    335599570U,	// BICv8i16
    2147501551U,	// BICv8i8
    2147500810U,	// BIFv16i8
    2147501667U,	// BIFv8i8
    2281751683U,	// BITv16i8
    2281752627U,	// BITv8i8
    73183U,	// BL
    1089603U,	// BLR
    1089563U,	// BR
    89448U,	// BRK
    2281751452U,	// BSLv16i8
    2281752295U,	// BSLv8i8
    110683U,	// Bcc
    268552569U,	// CASALb
    268557754U,	// CASALd
    268557274U,	// CASALh
    268557754U,	// CASALs
    268552456U,	// CASAb
    268550326U,	// CASAd
    268557161U,	// CASAh
    268550326U,	// CASAs
    268552663U,	// CASLb
    268557954U,	// CASLd
    268557368U,	// CASLh
    268557954U,	// CASLs
    138649U,	// CASPALd
    155033U,	// CASPALs
    131199U,	// CASPAd
    147583U,	// CASPAs
    138853U,	// CASPLd
    155237U,	// CASPLs
    139176U,	// CASPd
    155560U,	// CASPs
    268552844U,	// CASb
    268562061U,	// CASd
    268557577U,	// CASh
    268562061U,	// CASs
    402698285U,	// CBNZW
    402698285U,	// CBNZX
    402698270U,	// CBZW
    402698270U,	// CBZX
    2214633228U,	// CCMNWi
    2214633228U,	// CCMNWr
    2214633228U,	// CCMNXi
    2214633228U,	// CCMNXr
    2214633354U,	// CCMPWi
    2214633354U,	// CCMPWr
    2214633354U,	// CCMPXi
    2214633354U,	// CCMPXr
    1093632U,	// CLREX
    67153617U,	// CLSWr
    67153617U,	// CLSXr
    17510U,	// CLSv16i8
    25950U,	// CLSv2i32
    21786U,	// CLSv4i16
    27861U,	// CLSv4i32
    23145U,	// CLSv8i16
    18457U,	// CLSv8i8
    67153960U,	// CLZWr
    67153960U,	// CLZXr
    17706U,	// CLZv16i8
    26216U,	// CLZv2i32
    21930U,	// CLZv4i16
    28282U,	// CLZv4i32
    23329U,	// CLZv8i16
    18634U,	// CLZv8i8
    2147501067U,	// CMEQv16i8
    2147501067U,	// CMEQv16i8rz
    2214633456U,	// CMEQv1i64
    2214633456U,	// CMEQv1i64rz
    2147509504U,	// CMEQv2i32
    2147509504U,	// CMEQv2i32rz
    2147504002U,	// CMEQv2i64
    2147504002U,	// CMEQv2i64rz
    2147505360U,	// CMEQv4i16
    2147505360U,	// CMEQv4i16rz
    2147511415U,	// CMEQv4i32
    2147511415U,	// CMEQv4i32rz
    2147506719U,	// CMEQv8i16
    2147506719U,	// CMEQv8i16rz
    2147502023U,	// CMEQv8i8
    2147502023U,	// CMEQv8i8rz
    2147500780U,	// CMGEv16i8
    2147500780U,	// CMGEv16i8rz
    2214629690U,	// CMGEv1i64
    2214629690U,	// CMGEv1i64rz
    2147508853U,	// CMGEv2i32
    2147508853U,	// CMGEv2i32rz
    2147503420U,	// CMGEv2i64
    2147503420U,	// CMGEv2i64rz
    2147504907U,	// CMGEv4i16
    2147504907U,	// CMGEv4i16rz
    2147510660U,	// CMGEv4i32
    2147510660U,	// CMGEv4i32rz
    2147506220U,	// CMGEv8i16
    2147506220U,	// CMGEv8i16rz
    2147501649U,	// CMGEv8i8
    2147501649U,	// CMGEv8i8rz
    2147501176U,	// CMGTv16i8
    2147501176U,	// CMGTv16i8rz
    2214637349U,	// CMGTv1i64
    2214637349U,	// CMGTv1i64rz
    2147509693U,	// CMGTv2i32
    2147509693U,	// CMGTv2i32rz
    2147504175U,	// CMGTv2i64
    2147504175U,	// CMGTv2i64rz
    2147505450U,	// CMGTv4i16
    2147505450U,	// CMGTv4i16rz
    2147511604U,	// CMGTv4i32
    2147511604U,	// CMGTv4i32rz
    2147506809U,	// CMGTv8i16
    2147506809U,	// CMGTv8i16rz
    2147502121U,	// CMGTv8i8
    2147502121U,	// CMGTv8i8rz
    2147500830U,	// CMHIv16i8
    2214632778U,	// CMHIv1i64
    2147509008U,	// CMHIv2i32
    2147503501U,	// CMHIv2i64
    2147504986U,	// CMHIv4i16
    2147510827U,	// CMHIv4i32
    2147506299U,	// CMHIv8i16
    2147501685U,	// CMHIv8i8
    2147501148U,	// CMHSv16i8
    2214637259U,	// CMHSv1i64
    2147509589U,	// CMHSv2i32
    2147504079U,	// CMHSv2i64
    2147505425U,	// CMHSv4i16
    2147511500U,	// CMHSv4i32
    2147506784U,	// CMHSv8i16
    2147502096U,	// CMHSv8i8
    2147500790U,	// CMLEv16i8rz
    2214629697U,	// CMLEv1i64rz
    2147508863U,	// CMLEv2i32rz
    2147503430U,	// CMLEv2i64rz
    2147504916U,	// CMLEv4i16rz
    2147510670U,	// CMLEv4i32rz
    2147506229U,	// CMLEv8i16rz
    2147501658U,	// CMLEv8i8rz
    2147501196U,	// CMLTv16i8rz
    2214637367U,	// CMLTv1i64rz
    2147509703U,	// CMLTv2i32rz
    2147504185U,	// CMLTv2i64rz
    2147505459U,	// CMLTv4i16rz
    2147511614U,	// CMLTv4i32rz
    2147506818U,	// CMLTv8i16rz
    2147502139U,	// CMLTv8i8rz
    2147501224U,	// CMTSTv16i8
    2214637380U,	// CMTSTv1i64
    2147509722U,	// CMTSTv2i32
    2147504204U,	// CMTSTv2i64
    2147505468U,	// CMTSTv4i16
    2147511633U,	// CMTSTv4i32
    2147506827U,	// CMTSTv8i16
    2147502164U,	// CMTSTv8i8
    17558U,	// CNTv16i8
    18500U,	// CNTv8i8
    44960U,	// CPYi16
    44960U,	// CPYi32
    44960U,	// CPYi64
    44960U,	// CPYi8
    2214625525U,	// CRC32Brr
    2214627628U,	// CRC32CBrr
    2214632333U,	// CRC32CHrr
    2214637485U,	// CRC32CWrr
    2214637559U,	// CRC32CXrr
    2214629879U,	// CRC32Hrr
    2214637477U,	// CRC32Wrr
    2214637524U,	// CRC32Xrr
    2214632972U,	// CSELWr
    2214632972U,	// CSELXr
    2214628100U,	// CSINCWr
    2214628100U,	// CSINCXr
    2214637464U,	// CSINVWr
    2214637464U,	// CSINVXr
    2214629762U,	// CSNEGWr
    2214629762U,	// CSNEGXr
    81926U,	// DCPS1
    81975U,	// DCPS2
    81992U,	// DCPS3
    166395U,	// DMB
    12427U,	// DRPS
    166546U,	// DSB
    67126252U,	// DUPv16i8gpr
    17388U,	// DUPv16i8lane
    67134681U,	// DUPv2i32gpr
    25817U,	// DUPv2i32lane
    67129199U,	// DUPv2i64gpr
    20335U,	// DUPv2i64lane
    67130548U,	// DUPv4i16gpr
    21684U,	// DUPv4i16lane
    67136592U,	// DUPv4i32gpr
    27728U,	// DUPv4i32lane
    67131907U,	// DUPv8i16gpr
    23043U,	// DUPv8i16lane
    67127211U,	// DUPv8i8gpr
    18347U,	// DUPv8i8lane
    0U,	// EONWrr
    2214633234U,	// EONWrs
    0U,	// EONXrr
    2214633234U,	// EONXrs
    2214633566U,	// EORWri
    0U,	// EORWrr
    2214633566U,	// EORWrs
    2214633566U,	// EORXri
    0U,	// EORXrr
    2214633566U,	// EORXrs
    2147501119U,	// EORv16i8
    2147502070U,	// EORv8i8
    12432U,	// ERET
    2214633613U,	// EXTRWrri
    2214633613U,	// EXTRXrri
    2147501235U,	// EXTv16i8
    2147502174U,	// EXTv8i8
    0U,	// F128CSEL
    2214629627U,	// FABD32
    2214629627U,	// FABD64
    2147508742U,	// FABDv2f32
    2147503369U,	// FABDv2f64
    2147510549U,	// FABDv4f32
    67153562U,	// FABSDr
    67153562U,	// FABSSr
    25922U,	// FABSv2f32
    20412U,	// FABSv2f64
    27833U,	// FABSv4f32
    2214629682U,	// FACGE32
    2214629682U,	// FACGE64
    2147508842U,	// FACGEv2f32
    2147503409U,	// FACGEv2f64
    2147510649U,	// FACGEv4f32
    2214637341U,	// FACGT32
    2214637341U,	// FACGT64
    2147509682U,	// FACGTv2f32
    2147504164U,	// FACGTv2f64
    2147511593U,	// FACGTv4f32
    2214629640U,	// FADDDrr
    2147509346U,	// FADDPv2f32
    2147503884U,	// FADDPv2f64
    42082U,	// FADDPv2i32p
    36620U,	// FADDPv2i64p
    2147511257U,	// FADDPv4f32
    2214629640U,	// FADDSrr
    2147508769U,	// FADDv2f32
    2147503378U,	// FADDv2f64
    2147510576U,	// FADDv4f32
    2214633353U,	// FCCMPDrr
    2214629711U,	// FCCMPEDrr
    2214629711U,	// FCCMPESrr
    2214633353U,	// FCCMPSrr
    2214633455U,	// FCMEQ32
    2214633455U,	// FCMEQ64
    2214633455U,	// FCMEQv1i32rz
    2214633455U,	// FCMEQv1i64rz
    2147509503U,	// FCMEQv2f32
    2147504001U,	// FCMEQv2f64
    2147509503U,	// FCMEQv2i32rz
    2147504001U,	// FCMEQv2i64rz
    2147511414U,	// FCMEQv4f32
    2147511414U,	// FCMEQv4i32rz
    2214629689U,	// FCMGE32
    2214629689U,	// FCMGE64
    2214629689U,	// FCMGEv1i32rz
    2214629689U,	// FCMGEv1i64rz
    2147508852U,	// FCMGEv2f32
    2147503419U,	// FCMGEv2f64
    2147508852U,	// FCMGEv2i32rz
    2147503419U,	// FCMGEv2i64rz
    2147510659U,	// FCMGEv4f32
    2147510659U,	// FCMGEv4i32rz
    2214637348U,	// FCMGT32
    2214637348U,	// FCMGT64
    2214637348U,	// FCMGTv1i32rz
    2214637348U,	// FCMGTv1i64rz
    2147509692U,	// FCMGTv2f32
    2147504174U,	// FCMGTv2f64
    2147509692U,	// FCMGTv2i32rz
    2147504174U,	// FCMGTv2i64rz
    2147511603U,	// FCMGTv4f32
    2147511603U,	// FCMGTv4i32rz
    2214629696U,	// FCMLEv1i32rz
    2214629696U,	// FCMLEv1i64rz
    2147508862U,	// FCMLEv2i32rz
    2147503429U,	// FCMLEv2i64rz
    2147510669U,	// FCMLEv4i32rz
    2214637366U,	// FCMLTv1i32rz
    2214637366U,	// FCMLTv1i64rz
    2147509702U,	// FCMLTv2i32rz
    2147504184U,	// FCMLTv2i64rz
    2147511613U,	// FCMLTv4i32rz
    2138000U,	// FCMPDri
    67149712U,	// FCMPDrr
    2134359U,	// FCMPEDri
    67146071U,	// FCMPEDrr
    2134359U,	// FCMPESri
    67146071U,	// FCMPESrr
    2138000U,	// FCMPSri
    67149712U,	// FCMPSrr
    2214632971U,	// FCSELDrrr
    2214632971U,	// FCSELSrrr
    67153554U,	// FCVTASUWDr
    67153554U,	// FCVTASUWSr
    67153554U,	// FCVTASUXDr
    67153554U,	// FCVTASUXSr
    67153554U,	// FCVTASv1i32
    67153554U,	// FCVTASv1i64
    25911U,	// FCVTASv2f32
    20401U,	// FCVTASv2f64
    27822U,	// FCVTASv4f32
    67153745U,	// FCVTAUUWDr
    67153745U,	// FCVTAUUWSr
    67153745U,	// FCVTAUUXDr
    67153745U,	// FCVTAUUXSr
    67153745U,	// FCVTAUv1i32
    67153745U,	// FCVTAUv1i64
    26084U,	// FCVTAUv2f32
    20566U,	// FCVTAUv2f64
    27995U,	// FCVTAUv4f32
    67153739U,	// FCVTDHr
    67153739U,	// FCVTDSr
    67153739U,	// FCVTHDr
    67153739U,	// FCVTHSr
    472931999U,	// FCVTLv2i32
    4218527U,	// FCVTLv4i16
    540033054U,	// FCVTLv4i32
    2151694366U,	// FCVTLv8i16
    67153622U,	// FCVTMSUWDr
    67153622U,	// FCVTMSUWSr
    67153622U,	// FCVTMSUXDr
    67153622U,	// FCVTMSUXSr
    67153622U,	// FCVTMSv1i32
    67153622U,	// FCVTMSv1i64
    25967U,	// FCVTMSv2f32
    20449U,	// FCVTMSv2f64
    27878U,	// FCVTMSv4f32
    67153761U,	// FCVTMUUWDr
    67153761U,	// FCVTMUUWSr
    67153761U,	// FCVTMUUXDr
    67153761U,	// FCVTMUUXSr
    67153761U,	// FCVTMUv1i32
    67153761U,	// FCVTMUv1i64
    26106U,	// FCVTMUv2f32
    20588U,	// FCVTMUv2f64
    28017U,	// FCVTMUv4f32
    67153630U,	// FCVTNSUWDr
    67153630U,	// FCVTNSUWSr
    67153630U,	// FCVTNSUXDr
    67153630U,	// FCVTNSUXSr
    67153630U,	// FCVTNSv1i32
    67153630U,	// FCVTNSv1i64
    25978U,	// FCVTNSv2f32
    20460U,	// FCVTNSv2f64
    27889U,	// FCVTNSv4f32
    67153769U,	// FCVTNUUWDr
    67153769U,	// FCVTNUUWSr
    67153769U,	// FCVTNUUXDr
    67153769U,	// FCVTNUUXSr
    67153769U,	// FCVTNUv1i32
    67153769U,	// FCVTNUv1i64
    26117U,	// FCVTNUv2f32
    20599U,	// FCVTNUv2f64
    28028U,	// FCVTNUv4f32
    5267270U,	// FCVTNv2i32
    6315846U,	// FCVTNv4i16
    138461222U,	// FCVTNv4i32
    7389222U,	// FCVTNv8i16
    67153646U,	// FCVTPSUWDr
    67153646U,	// FCVTPSUWSr
    67153646U,	// FCVTPSUXDr
    67153646U,	// FCVTPSUXSr
    67153646U,	// FCVTPSv1i32
    67153646U,	// FCVTPSv1i64
    26000U,	// FCVTPSv2f32
    20482U,	// FCVTPSv2f64
    27911U,	// FCVTPSv4f32
    67153777U,	// FCVTPUUWDr
    67153777U,	// FCVTPUUWSr
    67153777U,	// FCVTPUUXDr
    67153777U,	// FCVTPUUXSr
    67153777U,	// FCVTPUv1i32
    67153777U,	// FCVTPUv1i64
    26128U,	// FCVTPUv2f32
    20610U,	// FCVTPUv2f64
    28039U,	// FCVTPUv4f32
    67153739U,	// FCVTSDr
    67153739U,	// FCVTSHr
    67149692U,	// FCVTXNv1i64
    5267324U,	// FCVTXNv2f32
    138461230U,	// FCVTXNv4f32
    2214637321U,	// FCVTZSSWDri
    2214637321U,	// FCVTZSSWSri
    2214637321U,	// FCVTZSSXDri
    2214637321U,	// FCVTZSSXSri
    67153673U,	// FCVTZSUWDr
    67153673U,	// FCVTZSUWSr
    67153673U,	// FCVTZSUXDr
    67153673U,	// FCVTZSUXSr
    2214637321U,	// FCVTZS_IntSWDri
    2214637321U,	// FCVTZS_IntSWSri
    2214637321U,	// FCVTZS_IntSXDri
    2214637321U,	// FCVTZS_IntSXSri
    67153673U,	// FCVTZS_IntUWDr
    67153673U,	// FCVTZS_IntUWSr
    67153673U,	// FCVTZS_IntUXDr
    67153673U,	// FCVTZS_IntUXSr
    26023U,	// FCVTZS_Intv2f32
    20505U,	// FCVTZS_Intv2f64
    27934U,	// FCVTZS_Intv4f32
    2214637321U,	// FCVTZSd
    2214637321U,	// FCVTZSs
    67153673U,	// FCVTZSv1i32
    67153673U,	// FCVTZSv1i64
    26023U,	// FCVTZSv2f32
    20505U,	// FCVTZSv2f64
    2147509671U,	// FCVTZSv2i32_shift
    2147504153U,	// FCVTZSv2i64_shift
    27934U,	// FCVTZSv4f32
    2147511582U,	// FCVTZSv4i32_shift
    2214637433U,	// FCVTZUSWDri
    2214637433U,	// FCVTZUSWSri
    2214637433U,	// FCVTZUSXDri
    2214637433U,	// FCVTZUSXSri
    67153785U,	// FCVTZUUWDr
    67153785U,	// FCVTZUUWSr
    67153785U,	// FCVTZUUXDr
    67153785U,	// FCVTZUUXSr
    2214637433U,	// FCVTZU_IntSWDri
    2214637433U,	// FCVTZU_IntSWSri
    2214637433U,	// FCVTZU_IntSXDri
    2214637433U,	// FCVTZU_IntSXSri
    67153785U,	// FCVTZU_IntUWDr
    67153785U,	// FCVTZU_IntUWSr
    67153785U,	// FCVTZU_IntUXDr
    67153785U,	// FCVTZU_IntUXSr
    26139U,	// FCVTZU_Intv2f32
    20621U,	// FCVTZU_Intv2f64
    28050U,	// FCVTZU_Intv4f32
    2214637433U,	// FCVTZUd
    2214637433U,	// FCVTZUs
    67153785U,	// FCVTZUv1i32
    67153785U,	// FCVTZUv1i64
    26139U,	// FCVTZUv2f32
    20621U,	// FCVTZUv2f64
    2147509787U,	// FCVTZUv2i32_shift
    2147504269U,	// FCVTZUv2i64_shift
    28050U,	// FCVTZUv4f32
    2147511698U,	// FCVTZUv4i32_shift
    2214637446U,	// FDIVDrr
    2214637446U,	// FDIVSrr
    2147509798U,	// FDIVv2f32
    2147504280U,	// FDIVv2f64
    2147511718U,	// FDIVv4f32
    2214629646U,	// FMADDDrrr
    2214629646U,	// FMADDSrrr
    2214637532U,	// FMAXDrr
    2214633183U,	// FMAXNMDrr
    2147509412U,	// FMAXNMPv2f32
    2147503950U,	// FMAXNMPv2f64
    42148U,	// FMAXNMPv2i32p
    36686U,	// FMAXNMPv2i64p
    2147511323U,	// FMAXNMPv4f32
    2214633183U,	// FMAXNMSrr
    44497U,	// FMAXNMVv4i32v
    2147509162U,	// FMAXNMv2f32
    2147503842U,	// FMAXNMv2f64
    2147511187U,	// FMAXNMv4f32
    2147509473U,	// FMAXPv2f32
    2147503991U,	// FMAXPv2f64
    42209U,	// FMAXPv2i32p
    36727U,	// FMAXPv2i64p
    2147511384U,	// FMAXPv4f32
    2214637532U,	// FMAXSrr
    44548U,	// FMAXVv4i32v
    2147509816U,	// FMAXv2f32
    2147504338U,	// FMAXv2f64
    2147511882U,	// FMAXv4f32
    2214633206U,	// FMINDrr
    2214633175U,	// FMINNMDrr
    2147509400U,	// FMINNMPv2f32
    2147503938U,	// FMINNMPv2f64
    42136U,	// FMINNMPv2i32p
    36674U,	// FMINNMPv2i64p
    2147511311U,	// FMINNMPv4f32
    2214633175U,	// FMINNMSrr
    44485U,	// FMINNMVv4i32v
    2147509151U,	// FMINNMv2f32
    2147503831U,	// FMINNMv2f64
    2147511176U,	// FMINNMv4f32
    2147509424U,	// FMINPv2f32
    2147503962U,	// FMINPv2f64
    42160U,	// FMINPv2i32p
    36698U,	// FMINPv2i64p
    2147511335U,	// FMINPv4f32
    2214633206U,	// FMINSrr
    44509U,	// FMINVv4i32v
    2147509206U,	// FMINv2f32
    2147503864U,	// FMINv2f64
    2147511209U,	// FMINv4f32
    2416042169U,	// FMLAv1i32_indexed
    2416036629U,	// FMLAv1i64_indexed
    2281759123U,	// FMLAv2f32
    2281753778U,	// FMLAv2f64
    2281759123U,	// FMLAv2i32_indexed
    2281753778U,	// FMLAv2i64_indexed
    2281760920U,	// FMLAv4f32
    2281760920U,	// FMLAv4i32_indexed
    2416042265U,	// FMLSv1i32_indexed
    2416036645U,	// FMLSv1i64_indexed
    2281760102U,	// FMLSv2f32
    2281754584U,	// FMLSv2f64
    2281760102U,	// FMLSv2i32_indexed
    2281754584U,	// FMLSv2i64_indexed
    2281762013U,	// FMLSv4f32
    2281762013U,	// FMLSv4i32_indexed
    0U,	// FMOVD0
    35636U,	// FMOVDXHighr
    67153823U,	// FMOVDXr
    604024735U,	// FMOVDi
    67153823U,	// FMOVDr
    0U,	// FMOVS0
    67153823U,	// FMOVSWr
    604024735U,	// FMOVSi
    67153823U,	// FMOVSr
    67153823U,	// FMOVWSr
    75516724U,	// FMOVXDHighr
    67153823U,	// FMOVXDr
    604005935U,	// FMOVv2f32_ns
    604000417U,	// FMOVv2f64_ns
    604007931U,	// FMOVv4f32_ns
    2214628033U,	// FMSUBDrrr
    2214628033U,	// FMSUBSrrr
    2214633126U,	// FMULDrr
    2214633126U,	// FMULSrr
    2214637575U,	// FMULX32
    2214637575U,	// FMULX64
    2214633784U,	// FMULXv1i32_indexed
    2214628164U,	// FMULXv1i64_indexed
    2147509843U,	// FMULXv2f32
    2147504347U,	// FMULXv2f64
    2147509843U,	// FMULXv2i32_indexed
    2147504347U,	// FMULXv2i64_indexed
    2147511909U,	// FMULXv4f32
    2147511909U,	// FMULXv4i32_indexed
    2214633745U,	// FMULv1i32_indexed
    2214628125U,	// FMULv1i64_indexed
    2147509142U,	// FMULv2f32
    2147503822U,	// FMULv2f64
    2147509142U,	// FMULv2i32_indexed
    2147503822U,	// FMULv2i64_indexed
    2147511157U,	// FMULv4f32
    2147511157U,	// FMULv4i32_indexed
    67146101U,	// FNEGDr
    67146101U,	// FNEGSr
    25290U,	// FNEGv2f32
    19834U,	// FNEGv2f64
    27097U,	// FNEGv4f32
    2214629653U,	// FNMADDDrrr
    2214629653U,	// FNMADDSrrr
    2214628040U,	// FNMSUBDrrr
    2214628040U,	// FNMSUBSrrr
    2214633132U,	// FNMULDrr
    2214633132U,	// FNMULSrr
    67146055U,	// FRECPEv1i32
    67146055U,	// FRECPEv1i64
    25224U,	// FRECPEv2f32
    19791U,	// FRECPEv2f64
    27031U,	// FRECPEv4f32
    2214637286U,	// FRECPS32
    2214637286U,	// FRECPS64
    2147509637U,	// FRECPSv2f32
    2147504119U,	// FRECPSv2f64
    2147511548U,	// FRECPSv4f32
    67153934U,	// FRECPXv1i32
    67153934U,	// FRECPXv1i64
    67141828U,	// FRINTADr
    67141828U,	// FRINTASr
    25026U,	// FRINTAv2f32
    19681U,	// FRINTAv2f64
    26823U,	// FRINTAv4f32
    67149146U,	// FRINTIDr
    67149146U,	// FRINTISr
    25394U,	// FRINTIv2f32
    19878U,	// FRINTIv2f64
    27213U,	// FRINTIv4f32
    67149543U,	// FRINTMDr
    67149543U,	// FRINTMSr
    25525U,	// FRINTMv2f32
    20205U,	// FRINTMv2f64
    27550U,	// FRINTMv4f32
    67149630U,	// FRINTNDr
    67149630U,	// FRINTNSr
    25631U,	// FRINTNv2f32
    20225U,	// FRINTNv2f64
    27588U,	// FRINTNv4f32
    67149742U,	// FRINTPDr
    67149742U,	// FRINTPSr
    25806U,	// FRINTPv2f32
    20324U,	// FRINTPv2f64
    27717U,	// FRINTPv4f32
    67153942U,	// FRINTXDr
    67153942U,	// FRINTXSr
    26205U,	// FRINTXv2f32
    20709U,	// FRINTXv2f64
    28271U,	// FRINTXv4f32
    67153977U,	// FRINTZDr
    67153977U,	// FRINTZSr
    26224U,	// FRINTZv2f32
    20720U,	// FRINTZv2f64
    28290U,	// FRINTZv4f32
    67146078U,	// FRSQRTEv1i32
    67146078U,	// FRSQRTEv1i64
    25246U,	// FRSQRTEv2f32
    19802U,	// FRSQRTEv2f64
    27053U,	// FRSQRTEv4f32
    2214637307U,	// FRSQRTS32
    2214637307U,	// FRSQRTS64
    2147509659U,	// FRSQRTSv2f32
    2147504141U,	// FRSQRTSv2f64
    2147511570U,	// FRSQRTSv4f32
    67153725U,	// FSQRTDr
    67153725U,	// FSQRTSr
    26064U,	// FSQRTv2f32
    20546U,	// FSQRTv2f64
    27975U,	// FSQRTv4f32
    2214628027U,	// FSUBDrr
    2214628027U,	// FSUBSrr
    2147508685U,	// FSUBv2f32
    2147503340U,	// FSUBv2f64
    2147510482U,	// FSUBv4f32
    94293U,	// HINT
    94001U,	// HLT
    84747U,	// HVC
    679530969U,	// INSvi16gpr
    746639833U,	// INSvi16lane
    679534881U,	// INSvi32gpr
    746643745U,	// INSvi32lane
    679529261U,	// INSvi64gpr
    746638125U,	// INSvi64lane
    679526622U,	// INSvi8gpr
    746635486U,	// INSvi8lane
    166551U,	// ISB
    180225U,	// LD1Fourv16b
    9633793U,	// LD1Fourv16b_POST
    212993U,	// LD1Fourv1d
    10715137U,	// LD1Fourv1d_POST
    245761U,	// LD1Fourv2d
    9699329U,	// LD1Fourv2d_POST
    278529U,	// LD1Fourv2s
    10780673U,	// LD1Fourv2s_POST
    311297U,	// LD1Fourv4h
    10813441U,	// LD1Fourv4h_POST
    344065U,	// LD1Fourv4s
    9797633U,	// LD1Fourv4s_POST
    376833U,	// LD1Fourv8b
    10878977U,	// LD1Fourv8b_POST
    409601U,	// LD1Fourv8h
    9863169U,	// LD1Fourv8h_POST
    180225U,	// LD1Onev16b
    11730945U,	// LD1Onev16b_POST
    212993U,	// LD1Onev1d
    12812289U,	// LD1Onev1d_POST
    245761U,	// LD1Onev2d
    11796481U,	// LD1Onev2d_POST
    278529U,	// LD1Onev2s
    12877825U,	// LD1Onev2s_POST
    311297U,	// LD1Onev4h
    12910593U,	// LD1Onev4h_POST
    344065U,	// LD1Onev4s
    11894785U,	// LD1Onev4s_POST
    376833U,	// LD1Onev8b
    12976129U,	// LD1Onev8b_POST
    409601U,	// LD1Onev8h
    11960321U,	// LD1Onev8h_POST
    188406U,	// LD1Rv16b
    13836278U,	// LD1Rv16b_POST
    221174U,	// LD1Rv1d
    12820470U,	// LD1Rv1d_POST
    253942U,	// LD1Rv2d
    12853238U,	// LD1Rv2d_POST
    286710U,	// LD1Rv2s
    14983158U,	// LD1Rv2s_POST
    319478U,	// LD1Rv4h
    16064502U,	// LD1Rv4h_POST
    352246U,	// LD1Rv4s
    15048694U,	// LD1Rv4s_POST
    385014U,	// LD1Rv8b
    14032886U,	// LD1Rv8b_POST
    417782U,	// LD1Rv8h
    16162806U,	// LD1Rv8h_POST
    180225U,	// LD1Threev16b
    16973825U,	// LD1Threev16b_POST
    212993U,	// LD1Threev1d
    18055169U,	// LD1Threev1d_POST
    245761U,	// LD1Threev2d
    17039361U,	// LD1Threev2d_POST
    278529U,	// LD1Threev2s
    18120705U,	// LD1Threev2s_POST
    311297U,	// LD1Threev4h
    18153473U,	// LD1Threev4h_POST
    344065U,	// LD1Threev4s
    17137665U,	// LD1Threev4s_POST
    376833U,	// LD1Threev8b
    18219009U,	// LD1Threev8b_POST
    409601U,	// LD1Threev8h
    17203201U,	// LD1Threev8h_POST
    180225U,	// LD1Twov16b
    10682369U,	// LD1Twov16b_POST
    212993U,	// LD1Twov1d
    11763713U,	// LD1Twov1d_POST
    245761U,	// LD1Twov2d
    10747905U,	// LD1Twov2d_POST
    278529U,	// LD1Twov2s
    11829249U,	// LD1Twov2s_POST
    311297U,	// LD1Twov4h
    11862017U,	// LD1Twov4h_POST
    344065U,	// LD1Twov4s
    10846209U,	// LD1Twov4s_POST
    376833U,	// LD1Twov8b
    11927553U,	// LD1Twov8b_POST
    409601U,	// LD1Twov8h
    10911745U,	// LD1Twov8h_POST
    19316737U,	// LD1i16
    20381697U,	// LD1i16_POST
    19349505U,	// LD1i32
    21463041U,	// LD1i32_POST
    19382273U,	// LD1i64
    22544385U,	// LD1i64_POST
    19415041U,	// LD1i8
    23625729U,	// LD1i8_POST
    188412U,	// LD2Rv16b
    15933436U,	// LD2Rv16b_POST
    221180U,	// LD2Rv1d
    11771900U,	// LD2Rv1d_POST
    253948U,	// LD2Rv2d
    11804668U,	// LD2Rv2d_POST
    286716U,	// LD2Rv2s
    12886012U,	// LD2Rv2s_POST
    319484U,	// LD2Rv4h
    15015932U,	// LD2Rv4h_POST
    352252U,	// LD2Rv4s
    12951548U,	// LD2Rv4s_POST
    385020U,	// LD2Rv8b
    16130044U,	// LD2Rv8b_POST
    417788U,	// LD2Rv8h
    15114236U,	// LD2Rv8h_POST
    180249U,	// LD2Twov16b
    10682393U,	// LD2Twov16b_POST
    245785U,	// LD2Twov2d
    10747929U,	// LD2Twov2d_POST
    278553U,	// LD2Twov2s
    11829273U,	// LD2Twov2s_POST
    311321U,	// LD2Twov4h
    11862041U,	// LD2Twov4h_POST
    344089U,	// LD2Twov4s
    10846233U,	// LD2Twov4s_POST
    376857U,	// LD2Twov8b
    11927577U,	// LD2Twov8b_POST
    409625U,	// LD2Twov8h
    10911769U,	// LD2Twov8h_POST
    19316761U,	// LD2i16
    21430297U,	// LD2i16_POST
    19349529U,	// LD2i32
    22511641U,	// LD2i32_POST
    19382297U,	// LD2i64
    24641561U,	// LD2i64_POST
    19415065U,	// LD2i8
    20480025U,	// LD2i8_POST
    188418U,	// LD3Rv16b
    25370626U,	// LD3Rv16b_POST
    221186U,	// LD3Rv1d
    18063362U,	// LD3Rv1d_POST
    253954U,	// LD3Rv2d
    18096130U,	// LD3Rv2d_POST
    286722U,	// LD3Rv2s
    26517506U,	// LD3Rv2s_POST
    319490U,	// LD3Rv4h
    27598850U,	// LD3Rv4h_POST
    352258U,	// LD3Rv4s
    26583042U,	// LD3Rv4s_POST
    385026U,	// LD3Rv8b
    25567234U,	// LD3Rv8b_POST
    417794U,	// LD3Rv8h
    27697154U,	// LD3Rv8h_POST
    180291U,	// LD3Threev16b
    16973891U,	// LD3Threev16b_POST
    245827U,	// LD3Threev2d
    17039427U,	// LD3Threev2d_POST
    278595U,	// LD3Threev2s
    18120771U,	// LD3Threev2s_POST
    311363U,	// LD3Threev4h
    18153539U,	// LD3Threev4h_POST
    344131U,	// LD3Threev4s
    17137731U,	// LD3Threev4s_POST
    376899U,	// LD3Threev8b
    18219075U,	// LD3Threev8b_POST
    409667U,	// LD3Threev8h
    17203267U,	// LD3Threev8h_POST
    19316803U,	// LD3i16
    28770371U,	// LD3i16_POST
    19349571U,	// LD3i32
    29851715U,	// LD3i32_POST
    19382339U,	// LD3i64
    30933059U,	// LD3i64_POST
    19415107U,	// LD3i8
    32014403U,	// LD3i8_POST
    180308U,	// LD4Fourv16b
    9633876U,	// LD4Fourv16b_POST
    245844U,	// LD4Fourv2d
    9699412U,	// LD4Fourv2d_POST
    278612U,	// LD4Fourv2s
    10780756U,	// LD4Fourv2s_POST
    311380U,	// LD4Fourv4h
    10813524U,	// LD4Fourv4h_POST
    344148U,	// LD4Fourv4s
    9797716U,	// LD4Fourv4s_POST
    376916U,	// LD4Fourv8b
    10879060U,	// LD4Fourv8b_POST
    409684U,	// LD4Fourv8h
    9863252U,	// LD4Fourv8h_POST
    188424U,	// LD4Rv16b
    14884872U,	// LD4Rv16b_POST
    221192U,	// LD4Rv1d
    10723336U,	// LD4Rv1d_POST
    253960U,	// LD4Rv2d
    10756104U,	// LD4Rv2d_POST
    286728U,	// LD4Rv2s
    11837448U,	// LD4Rv2s_POST
    319496U,	// LD4Rv4h
    12918792U,	// LD4Rv4h_POST
    352264U,	// LD4Rv4s
    11902984U,	// LD4Rv4s_POST
    385032U,	// LD4Rv8b
    15081480U,	// LD4Rv8b_POST
    417800U,	// LD4Rv8h
    13017096U,	// LD4Rv8h_POST
    19316820U,	// LD4i16
    22478932U,	// LD4i16_POST
    19349588U,	// LD4i32
    24608852U,	// LD4i32_POST
    19382356U,	// LD4i64
    33030228U,	// LD4i64_POST
    19415124U,	// LD4i8
    21528660U,	// LD4i8_POST
    805423421U,	// LDADDALb
    805428595U,	// LDADDALd
    805428126U,	// LDADDALh
    805428595U,	// LDADDALs
    805423314U,	// LDADDAb
    805421157U,	// LDADDAd
    805428009U,	// LDADDAh
    805421157U,	// LDADDAs
    805423521U,	// LDADDLb
    805428723U,	// LDADDLd
    805428226U,	// LDADDLh
    805428723U,	// LDADDLs
    805423413U,	// LDADDb
    805425409U,	// LDADDd
    805428118U,	// LDADDh
    805425409U,	// LDADDs
    2248182296U,	// LDARB
    2248187029U,	// LDARH
    2248187918U,	// LDARW
    2248187918U,	// LDARX
    67149760U,	// LDAXPW
    67149760U,	// LDAXPX
    2248182382U,	// LDAXRB
    2248187115U,	// LDAXRH
    2248188063U,	// LDAXRW
    2248188063U,	// LDAXRX
    805423461U,	// LDCLRALb
    805428648U,	// LDCLRALd
    805428166U,	// LDCLRALh
    805428648U,	// LDCLRALs
    805423350U,	// LDCLRAb
    805421196U,	// LDCLRAd
    805428055U,	// LDCLRAh
    805421196U,	// LDCLRAs
    805423557U,	// LDCLRLb
    805428850U,	// LDCLRLd
    805428262U,	// LDCLRLh
    805428850U,	// LDCLRLs
    805423661U,	// LDCLRb
    805429320U,	// LDCLRd
    805428394U,	// LDCLRh
    805429320U,	// LDCLRs
    805423471U,	// LDEORALb
    805428657U,	// LDEORALd
    805428176U,	// LDEORALh
    805428657U,	// LDEORALs
    805423359U,	// LDEORAb
    805421204U,	// LDEORAd
    805428064U,	// LDEORAh
    805421204U,	// LDEORAs
    805423566U,	// LDEORLb
    805428858U,	// LDEORLd
    805428271U,	// LDEORLh
    805428858U,	// LDEORLs
    805423684U,	// LDEORb
    805429340U,	// LDEORd
    805428417U,	// LDEORh
    805429340U,	// LDEORs
    2248182303U,	// LDLARB
    2248187036U,	// LDLARH
    2248187924U,	// LDLARW
    2248187924U,	// LDLARX
    67149718U,	// LDNPDi
    67149718U,	// LDNPQi
    67149718U,	// LDNPSi
    67149718U,	// LDNPWi
    67149718U,	// LDNPXi
    67149700U,	// LDPDi
    268558212U,	// LDPDpost
    268558212U,	// LDPDpre
    67149700U,	// LDPQi
    268558212U,	// LDPQpost
    268558212U,	// LDPQpre
    67153846U,	// LDPSWi
    268562358U,	// LDPSWpost
    268562358U,	// LDPSWpre
    67149700U,	// LDPSi
    268558212U,	// LDPSpost
    268558212U,	// LDPSpre
    67149700U,	// LDPWi
    268558212U,	// LDPWpost
    268558212U,	// LDPWpre
    67149700U,	// LDPXi
    268558212U,	// LDPXpost
    268558212U,	// LDPXpre
    302107175U,	// LDRBBpost
    2449590823U,	// LDRBBpre
    2248182311U,	// LDRBBroW
    2248182311U,	// LDRBBroX
    2248182311U,	// LDRBBui
    302112804U,	// LDRBpost
    2449596452U,	// LDRBpre
    2248187940U,	// LDRBroW
    2248187940U,	// LDRBroX
    2248187940U,	// LDRBui
    402694180U,	// LDRDl
    302112804U,	// LDRDpost
    2449596452U,	// LDRDpre
    2248187940U,	// LDRDroW
    2248187940U,	// LDRDroX
    2248187940U,	// LDRDui
    302111908U,	// LDRHHpost
    2449595556U,	// LDRHHpre
    2248187044U,	// LDRHHroW
    2248187044U,	// LDRHHroX
    2248187044U,	// LDRHHui
    302112804U,	// LDRHpost
    2449596452U,	// LDRHpre
    2248187940U,	// LDRHroW
    2248187940U,	// LDRHroX
    2248187940U,	// LDRHui
    402694180U,	// LDRQl
    302112804U,	// LDRQpost
    2449596452U,	// LDRQpre
    2248187940U,	// LDRQroW
    2248187940U,	// LDRQroX
    2248187940U,	// LDRQui
    302107292U,	// LDRSBWpost
    2449590940U,	// LDRSBWpre
    2248182428U,	// LDRSBWroW
    2248182428U,	// LDRSBWroX
    2248182428U,	// LDRSBWui
    302107292U,	// LDRSBXpost
    2449590940U,	// LDRSBXpre
    2248182428U,	// LDRSBXroW
    2248182428U,	// LDRSBXroX
    2248182428U,	// LDRSBXui
    302112025U,	// LDRSHWpost
    2449595673U,	// LDRSHWpre
    2248187161U,	// LDRSHWroW
    2248187161U,	// LDRSHWroX
    2248187161U,	// LDRSHWui
    302112025U,	// LDRSHXpost
    2449595673U,	// LDRSHXpre
    2248187161U,	// LDRSHXroW
    2248187161U,	// LDRSHXroX
    2248187161U,	// LDRSHXui
    402698173U,	// LDRSWl
    302116797U,	// LDRSWpost
    2449600445U,	// LDRSWpre
    2248191933U,	// LDRSWroW
    2248191933U,	// LDRSWroX
    2248191933U,	// LDRSWui
    402694180U,	// LDRSl
    302112804U,	// LDRSpost
    2449596452U,	// LDRSpre
    2248187940U,	// LDRSroW
    2248187940U,	// LDRSroX
    2248187940U,	// LDRSui
    402694180U,	// LDRWl
    302112804U,	// LDRWpost
    2449596452U,	// LDRWpre
    2248187940U,	// LDRWroW
    2248187940U,	// LDRWroX
    2248187940U,	// LDRWui
    402694180U,	// LDRXl
    302112804U,	// LDRXpost
    2449596452U,	// LDRXpre
    2248187940U,	// LDRXroW
    2248187940U,	// LDRXroX
    2248187940U,	// LDRXui
    805423489U,	// LDSETALb
    805428673U,	// LDSETALd
    805428194U,	// LDSETALh
    805428673U,	// LDSETALs
    805423375U,	// LDSETAb
    805421244U,	// LDSETAd
    805428080U,	// LDSETAh
    805421244U,	// LDSETAs
    805423582U,	// LDSETLb
    805428887U,	// LDSETLd
    805428287U,	// LDSETLh
    805428887U,	// LDSETLs
    805423795U,	// LDSETb
    805433110U,	// LDSETd
    805428528U,	// LDSETh
    805433110U,	// LDSETs
    805423499U,	// LDSMAXALb
    805428682U,	// LDSMAXALd
    805428204U,	// LDSMAXALh
    805428682U,	// LDSMAXALs
    805423384U,	// LDSMAXAb
    805421260U,	// LDSMAXAd
    805428089U,	// LDSMAXAh
    805421260U,	// LDSMAXAs
    805423591U,	// LDSMAXLb
    805428915U,	// LDSMAXLd
    805428329U,	// LDSMAXLh
    805428915U,	// LDSMAXLs
    805423838U,	// LDSMAXb
    805433314U,	// LDSMAXd
    805428536U,	// LDSMAXh
    805433314U,	// LDSMAXs
    805423431U,	// LDSMINALb
    805428613U,	// LDSMINALd
    805428136U,	// LDSMINALh
    805428613U,	// LDSMINALs
    805423323U,	// LDSMINAb
    805421165U,	// LDSMINAd
    805428028U,	// LDSMINAh
    805421165U,	// LDSMINAs
    805423530U,	// LDSMINLb
    805428819U,	// LDSMINLd
    805428235U,	// LDSMINLh
    805428819U,	// LDSMINLs
    805423616U,	// LDSMINb
    805428988U,	// LDSMINd
    805428349U,	// LDSMINh
    805428988U,	// LDSMINs
    2248182348U,	// LDTRBi
    2248187081U,	// LDTRHi
    2248182435U,	// LDTRSBWi
    2248182435U,	// LDTRSBXi
    2248187168U,	// LDTRSHWi
    2248187168U,	// LDTRSHXi
    2248191940U,	// LDTRSWi
    2248188028U,	// LDTRWi
    2248188028U,	// LDTRXi
    805423510U,	// LDUMAXALb
    805428692U,	// LDUMAXALd
    805428215U,	// LDUMAXALh
    805428692U,	// LDUMAXALs
    805423394U,	// LDUMAXAb
    805421269U,	// LDUMAXAd
    805428099U,	// LDUMAXAh
    805421269U,	// LDUMAXAs
    805423601U,	// LDUMAXLb
    805428924U,	// LDUMAXLd
    805428339U,	// LDUMAXLh
    805428924U,	// LDUMAXLs
    805423847U,	// LDUMAXb
    805433322U,	// LDUMAXd
    805428545U,	// LDUMAXh
    805433322U,	// LDUMAXs
    805423442U,	// LDUMINALb
    805428623U,	// LDUMINALd
    805428147U,	// LDUMINALh
    805428623U,	// LDUMINALs
    805423333U,	// LDUMINAb
    805421174U,	// LDUMINAd
    805428038U,	// LDUMINAh
    805421174U,	// LDUMINAs
    805423540U,	// LDUMINLb
    805428828U,	// LDUMINLd
    805428245U,	// LDUMINLh
    805428828U,	// LDUMINLs
    805423625U,	// LDUMINb
    805428996U,	// LDUMINd
    805428358U,	// LDUMINh
    805428996U,	// LDUMINs
    2248182368U,	// LDURBBi
    2248188051U,	// LDURBi
    2248188051U,	// LDURDi
    2248187101U,	// LDURHHi
    2248188051U,	// LDURHi
    2248188051U,	// LDURQi
    2248182443U,	// LDURSBWi
    2248182443U,	// LDURSBXi
    2248187176U,	// LDURSHWi
    2248187176U,	// LDURSHXi
    2248191948U,	// LDURSWi
    2248188051U,	// LDURSi
    2248188051U,	// LDURWi
    2248188051U,	// LDURXi
    67149767U,	// LDXPW
    67149767U,	// LDXPX
    2248182390U,	// LDXRB
    2248187123U,	// LDXRH
    2248188070U,	// LDXRW
    2248188070U,	// LDXRX
    0U,	// LOADgot
    2214633100U,	// LSLVWr
    2214633100U,	// LSLVXr
    2214633586U,	// LSRVWr
    2214633586U,	// LSRVXr
    2214629647U,	// MADDWrrr
    2214629647U,	// MADDXrrr
    2281751040U,	// MLAv16i8
    2281759124U,	// MLAv2i32
    2281759124U,	// MLAv2i32_indexed
    2281755227U,	// MLAv4i16
    2281755227U,	// MLAv4i16_indexed
    2281760921U,	// MLAv4i32
    2281760921U,	// MLAv4i32_indexed
    2281756540U,	// MLAv8i16
    2281756540U,	// MLAv8i16_indexed
    2281751961U,	// MLAv8i8
    2281751663U,	// MLSv16i8
    2281760103U,	// MLSv2i32
    2281760103U,	// MLSv2i32_indexed
    2281755938U,	// MLSv4i16
    2281755938U,	// MLSv4i16_indexed
    2281762014U,	// MLSv4i32
    2281762014U,	// MLSv4i32_indexed
    2281757297U,	// MLSv8i16
    2281757297U,	// MLSv8i16_indexed
    2281752609U,	// MLSv8i8
    872455522U,	// MOVID
    939541306U,	// MOVIv16b_ns
    872435121U,	// MOVIv2d_ns
    3087033149U,	// MOVIv2i32
    3087033149U,	// MOVIv2s_msl
    3087029116U,	// MOVIv4i16
    3087034968U,	// MOVIv4i32
    3087034968U,	// MOVIv4s_msl
    939542158U,	// MOVIv8b_ns
    3087030429U,	// MOVIv8i16
    335584621U,	// MOVKWi
    335584621U,	// MOVKXi
    3087048566U,	// MOVNWi
    3087048566U,	// MOVNXi
    3087052865U,	// MOVZWi
    3087052865U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    1006677750U,	// MRS
    581751U,	// MSR
    598135U,	// MSRpstate
    2214628034U,	// MSUBWrrr
    2214628034U,	// MSUBXrrr
    2147500966U,	// MULv16i8
    2147509143U,	// MULv2i32
    2147509143U,	// MULv2i32_indexed
    2147505109U,	// MULv4i16
    2147505109U,	// MULv4i16_indexed
    2147511158U,	// MULv4i32
    2147511158U,	// MULv4i32_indexed
    2147506592U,	// MULv8i16
    2147506592U,	// MULv8i16_indexed
    2147501808U,	// MULv8i8
    3087033121U,	// MVNIv2i32
    3087033121U,	// MVNIv2s_msl
    3087029099U,	// MVNIv4i16
    3087034940U,	// MVNIv4i32
    3087034940U,	// MVNIv4s_msl
    3087030412U,	// MVNIv8i16
    17173U,	// NEGv16i8
    67146102U,	// NEGv1i64
    25291U,	// NEGv2i32
    19835U,	// NEGv2i64
    21279U,	// NEGv4i16
    27098U,	// NEGv4i32
    22592U,	// NEGv8i16
    18029U,	// NEGv8i8
    17567U,	// NOTv16i8
    18508U,	// NOTv8i8
    0U,	// ORNWrr
    2214633273U,	// ORNWrs
    0U,	// ORNXrr
    2214633273U,	// ORNXrs
    2147500995U,	// ORNv16i8
    2147501902U,	// ORNv8i8
    2214633576U,	// ORRWri
    0U,	// ORRWrr
    2214633576U,	// ORRWrs
    2214633576U,	// ORRXri
    0U,	// ORRXrr
    2214633576U,	// ORRXrs
    2147501128U,	// ORRv16i8
    335602991U,	// ORRv2i32
    335598847U,	// ORRv4i16
    335604902U,	// ORRv4i32
    335600206U,	// ORRv8i16
    2147502078U,	// ORRv8i8
    2147505755U,	// PMULLv16i8
    2147508197U,	// PMULLv1i64
    2147508186U,	// PMULLv2i64
    2147506542U,	// PMULLv8i8
    2147500965U,	// PMULv16i8
    2147501807U,	// PMULv8i8
    403267281U,	// PRFMl
    2248761041U,	// PRFMroW
    2248761041U,	// PRFMroX
    2248761041U,	// PRFMui
    2248761071U,	// PRFUMi
    2147509195U,	// RADDHNv2i64_v2i32
    2281760698U,	// RADDHNv2i64_v4i32
    2147505128U,	// RADDHNv4i32_v4i16
    2281756318U,	// RADDHNv4i32_v8i16
    2281750835U,	// RADDHNv8i16_v16i8
    2147501827U,	// RADDHNv8i16_v8i8
    67153707U,	// RBITWr
    67153707U,	// RBITXr
    17538U,	// RBITv16i8
    18482U,	// RBITv8i8
    1093393U,	// RET
    0U,	// RET_ReallyLR
    67141726U,	// REV16Wr
    67141726U,	// REV16Xr
    16865U,	// REV16v16i8
    17789U,	// REV16v8i8
    67141650U,	// REV32Xr
    16667U,	// REV32v16i8
    21018U,	// REV32v4i16
    21965U,	// REV32v8i16
    17742U,	// REV32v8i8
    16854U,	// REV64v16i8
    24951U,	// REV64v2i32
    21055U,	// REV64v4i16
    26748U,	// REV64v4i32
    22368U,	// REV64v8i16
    17779U,	// REV64v8i8
    67153793U,	// REVWr
    67153793U,	// REVXr
    2214633571U,	// RORVWr
    2214633571U,	// RORVXr
    2281750876U,	// RSHRNv16i8_shift
    2147509257U,	// RSHRNv2i32_shift
    2147505181U,	// RSHRNv4i16_shift
    2281760736U,	// RSHRNv4i32_shift
    2281756356U,	// RSHRNv8i16_shift
    2147501880U,	// RSHRNv8i8_shift
    2147509184U,	// RSUBHNv2i64_v2i32
    2281760686U,	// RSUBHNv2i64_v4i32
    2147505117U,	// RSUBHNv4i32_v4i16
    2281756306U,	// RSUBHNv4i32_v8i16
    2281750822U,	// RSUBHNv8i16_v16i8
    2147501816U,	// RSUBHNv8i16_v8i8
    2281756119U,	// SABALv16i8_v8i16
    2281754042U,	// SABALv2i32_v2i64
    2281761377U,	// SABALv4i16_v4i32
    2281753492U,	// SABALv4i32_v2i64
    2281760471U,	// SABALv8i16_v4i32
    2281756838U,	// SABALv8i8_v8i16
    2281751020U,	// SABAv16i8
    2281759105U,	// SABAv2i32
    2281755209U,	// SABAv4i16
    2281760902U,	// SABAv4i32
    2281756522U,	// SABAv8i16
    2281751943U,	// SABAv8i8
    2147505689U,	// SABDLv16i8_v8i16
    2147503618U,	// SABDLv2i32_v2i64
    2147510953U,	// SABDLv4i16_v4i32
    2147503075U,	// SABDLv4i32_v2i64
    2147510054U,	// SABDLv8i16_v4i32
    2147506402U,	// SABDLv8i8_v8i16
    2147500671U,	// SABDv16i8
    2147508751U,	// SABDv2i32
    2147504825U,	// SABDv4i16
    2147510558U,	// SABDv4i32
    2147506138U,	// SABDv8i16
    2147501559U,	// SABDv8i8
    134273475U,	// SADALPv16i8_v8i16
    134269773U,	// SADALPv2i32_v1i64
    134276204U,	// SADALPv4i16_v2i32
    134270742U,	// SADALPv4i32_v2i64
    134278115U,	// SADALPv8i16_v4i32
    134272116U,	// SADALPv8i8_v4i16
    23001U,	// SADDLPv16i8_v8i16
    19299U,	// SADDLPv2i32_v1i64
    25730U,	// SADDLPv4i16_v2i32
    20268U,	// SADDLPv4i32_v2i64
    27641U,	// SADDLPv8i16_v4i32
    21642U,	// SADDLPv8i8_v4i16
    34002U,	// SADDLVv16i8v
    38234U,	// SADDLVv4i16v
    44463U,	// SADDLVv4i32v
    39593U,	// SADDLVv8i16v
    34938U,	// SADDLVv8i8v
    2147505711U,	// SADDLv16i8_v8i16
    2147503638U,	// SADDLv2i32_v2i64
    2147510973U,	// SADDLv4i16_v4i32
    2147503097U,	// SADDLv4i32_v2i64
    2147510076U,	// SADDLv8i16_v4i32
    2147506422U,	// SADDLv8i8_v8i16
    2147505994U,	// SADDWv16i8_v8i16
    2147504318U,	// SADDWv2i32_v2i64
    2147511862U,	// SADDWv4i16_v4i32
    2147503260U,	// SADDWv4i32_v2i64
    2147510374U,	// SADDWv8i16_v4i32
    2147506939U,	// SADDWv8i8_v8i16
    2214637229U,	// SBCSWr
    2214637229U,	// SBCSXr
    2214628080U,	// SBCWr
    2214628080U,	// SBCXr
    2214633157U,	// SBFMWri
    2214633157U,	// SBFMXri
    2214629735U,	// SCVTFSWDri
    2214629735U,	// SCVTFSWSri
    2214629735U,	// SCVTFSXDri
    2214629735U,	// SCVTFSXSri
    67146087U,	// SCVTFUWDri
    67146087U,	// SCVTFUWSri
    67146087U,	// SCVTFUXDri
    67146087U,	// SCVTFUXSri
    2214629735U,	// SCVTFd
    2214629735U,	// SCVTFs
    67146087U,	// SCVTFv1i32
    67146087U,	// SCVTFv1i64
    25270U,	// SCVTFv2f32
    19814U,	// SCVTFv2f64
    2147508918U,	// SCVTFv2i32_shift
    2147503462U,	// SCVTFv2i64_shift
    27077U,	// SCVTFv4f32
    2147510725U,	// SCVTFv4i32_shift
    2214637452U,	// SDIVWr
    2214637452U,	// SDIVXr
    2214637452U,	// SDIV_IntWr
    2214637452U,	// SDIV_IntXr
    2416044291U,	// SHA1Crrr
    67146224U,	// SHA1Hrr
    2416044926U,	// SHA1Mrrr
    2416045007U,	// SHA1Prrr
    2281760379U,	// SHA1SU0rrr
    134276784U,	// SHA1SU1rr
    2416043722U,	// SHA256H2rrr
    2416044524U,	// SHA256Hrrr
    134276743U,	// SHA256SU0rr
    2281760444U,	// SHA256SU1rrr
    2147500715U,	// SHADDv16i8
    2147508800U,	// SHADDv2i32
    2147504865U,	// SHADDv4i16
    2147510607U,	// SHADDv4i32
    2147506178U,	// SHADDv8i16
    2147501599U,	// SHADDv8i8
    22086U,	// SHLLv16i8
    2147503739U,	// SHLLv2i32
    27426U,	// SHLLv4i16
    2147503120U,	// SHLLv4i32
    26451U,	// SHLLv8i16
    22875U,	// SHLLv8i8
    2214632980U,	// SHLd
    2147500870U,	// SHLv16i8_shift
    2147509064U,	// SHLv2i32_shift
    2147503660U,	// SHLv2i64_shift
    2147505031U,	// SHLv4i16_shift
    2147510995U,	// SHLv4i32_shift
    2147506444U,	// SHLv8i16_shift
    2147501721U,	// SHLv8i8_shift
    2281750850U,	// SHRNv16i8_shift
    2147509235U,	// SHRNv2i32_shift
    2147505159U,	// SHRNv4i16_shift
    2281760712U,	// SHRNv4i32_shift
    2281756332U,	// SHRNv8i16_shift
    2147501858U,	// SHRNv8i8_shift
    2147500595U,	// SHSUBv16i8
    2147508694U,	// SHSUBv2i32
    2147504777U,	// SHSUBv4i16
    2147510491U,	// SHSUBv4i32
    2147506090U,	// SHSUBv8i16
    2147501511U,	// SHSUBv8i8
    2416041296U,	// SLId
    2281751336U,	// SLIv16i8_shift
    2281759513U,	// SLIv2i32_shift
    2281754006U,	// SLIv2i64_shift
    2281755491U,	// SLIv4i16_shift
    2281761332U,	// SLIv4i32_shift
    2281756804U,	// SLIv8i16_shift
    2281752190U,	// SLIv8i8_shift
    2214632955U,	// SMADDLrrr
    2147501045U,	// SMAXPv16i8
    2147509483U,	// SMAXPv2i32
    2147505340U,	// SMAXPv4i16
    2147511394U,	// SMAXPv4i32
    2147506699U,	// SMAXPv8i16
    2147502003U,	// SMAXPv8i8
    34048U,	// SMAXVv16i8v
    38276U,	// SMAXVv4i16v
    44558U,	// SMAXVv4i32v
    39635U,	// SMAXVv8i16v
    34980U,	// SMAXVv8i8v
    2147501334U,	// SMAXv16i8
    2147509825U,	// SMAXv2i32
    2147505560U,	// SMAXv4i16
    2147511891U,	// SMAXv4i32
    2147506959U,	// SMAXv8i16
    2147502264U,	// SMAXv8i8
    84735U,	// SMC
    2147501014U,	// SMINPv16i8
    2147509434U,	// SMINPv2i32
    2147505312U,	// SMINPv4i16
    2147511345U,	// SMINPv4i32
    2147506671U,	// SMINPv8i16
    2147501975U,	// SMINPv8i8
    34026U,	// SMINVv16i8v
    38256U,	// SMINVv4i16v
    44519U,	// SMINVv4i32v
    39615U,	// SMINVv8i16v
    34960U,	// SMINVv8i8v
    2147500975U,	// SMINv16i8
    2147509215U,	// SMINv2i32
    2147505139U,	// SMINv4i16
    2147511218U,	// SMINv4i32
    2147506600U,	// SMINv8i16
    2147501838U,	// SMINv8i8
    2281756141U,	// SMLALv16i8_v8i16
    2281754074U,	// SMLALv2i32_indexed
    2281754074U,	// SMLALv2i32_v2i64
    2281761409U,	// SMLALv4i16_indexed
    2281761409U,	// SMLALv4i16_v4i32
    2281753527U,	// SMLALv4i32_indexed
    2281753527U,	// SMLALv4i32_v2i64
    2281760506U,	// SMLALv8i16_indexed
    2281760506U,	// SMLALv8i16_v4i32
    2281756858U,	// SMLALv8i8_v8i16
    2281756284U,	// SMLSLv16i8_v8i16
    2281754298U,	// SMLSLv2i32_indexed
    2281754298U,	// SMLSLv2i32_v2i64
    2281761633U,	// SMLSLv4i16_indexed
    2281761633U,	// SMLSLv4i16_v4i32
    2281753685U,	// SMLSLv4i32_indexed
    2281753685U,	// SMLSLv4i32_v2i64
    2281760664U,	// SMLSLv8i16_indexed
    2281760664U,	// SMLSLv8i16_v4i32
    2281757068U,	// SMLSLv8i8_v8i16
    37344U,	// SMOVvi16to32
    37344U,	// SMOVvi16to64
    41256U,	// SMOVvi32to64
    32997U,	// SMOVvi8to32
    32997U,	// SMOVvi8to64
    2214632931U,	// SMSUBLrrr
    2214632539U,	// SMULHrr
    2147505766U,	// SMULLv16i8_v8i16
    2147503770U,	// SMULLv2i32_indexed
    2147503770U,	// SMULLv2i32_v2i64
    2147511105U,	// SMULLv4i16_indexed
    2147511105U,	// SMULLv4i16_v4i32
    2147503154U,	// SMULLv4i32_indexed
    2147503154U,	// SMULLv4i32_v2i64
    2147510133U,	// SMULLv8i16_indexed
    2147510133U,	// SMULLv8i16_v4i32
    2147506552U,	// SMULLv8i8_v8i16
    17489U,	// SQABSv16i8
    67153568U,	// SQABSv1i16
    67153568U,	// SQABSv1i32
    67153568U,	// SQABSv1i64
    67153568U,	// SQABSv1i8
    25931U,	// SQABSv2i32
    20421U,	// SQABSv2i64
    21767U,	// SQABSv4i16
    27842U,	// SQABSv4i32
    23126U,	// SQABSv8i16
    18438U,	// SQABSv8i8
    2147500738U,	// SQADDv16i8
    2214629662U,	// SQADDv1i16
    2214629662U,	// SQADDv1i32
    2214629662U,	// SQADDv1i64
    2214629662U,	// SQADDv1i8
    2147508821U,	// SQADDv2i32
    2147503388U,	// SQADDv2i64
    2147504886U,	// SQADDv4i16
    2147510628U,	// SQADDv4i32
    2147506199U,	// SQADDv8i16
    2147501620U,	// SQADDv8i8
    2416041340U,	// SQDMLALi16
    2416041340U,	// SQDMLALi32
    2416038328U,	// SQDMLALv1i32_indexed
    2416042224U,	// SQDMLALv1i64_indexed
    2281754062U,	// SQDMLALv2i32_indexed
    2281754062U,	// SQDMLALv2i32_v2i64
    2281761397U,	// SQDMLALv4i16_indexed
    2281761397U,	// SQDMLALv4i16_v4i32
    2281753514U,	// SQDMLALv4i32_indexed
    2281753514U,	// SQDMLALv4i32_v2i64
    2281760493U,	// SQDMLALv8i16_indexed
    2281760493U,	// SQDMLALv8i16_v4i32
    2416041608U,	// SQDMLSLi16
    2416041608U,	// SQDMLSLi32
    2416038350U,	// SQDMLSLv1i32_indexed
    2416042246U,	// SQDMLSLv1i64_indexed
    2281754286U,	// SQDMLSLv2i32_indexed
    2281754286U,	// SQDMLSLv2i32_v2i64
    2281761621U,	// SQDMLSLv4i16_indexed
    2281761621U,	// SQDMLSLv4i16_v4i32
    2281753672U,	// SQDMLSLv4i32_indexed
    2281753672U,	// SQDMLSLv4i32_v2i64
    2281760651U,	// SQDMLSLv8i16_indexed
    2281760651U,	// SQDMLSLv8i16_v4i32
    2214632520U,	// SQDMULHv1i16
    2214629781U,	// SQDMULHv1i16_indexed
    2214632520U,	// SQDMULHv1i32
    2214633677U,	// SQDMULHv1i32_indexed
    2147508970U,	// SQDMULHv2i32
    2147508970U,	// SQDMULHv2i32_indexed
    2147504948U,	// SQDMULHv4i16
    2147504948U,	// SQDMULHv4i16_indexed
    2147510789U,	// SQDMULHv4i32
    2147510789U,	// SQDMULHv4i32_indexed
    2147506261U,	// SQDMULHv8i16
    2147506261U,	// SQDMULHv8i16_indexed
    2214633034U,	// SQDMULLi16
    2214633034U,	// SQDMULLi32
    2214629827U,	// SQDMULLv1i32_indexed
    2214633723U,	// SQDMULLv1i64_indexed
    2147503758U,	// SQDMULLv2i32_indexed
    2147503758U,	// SQDMULLv2i32_v2i64
    2147511093U,	// SQDMULLv4i16_indexed
    2147511093U,	// SQDMULLv4i16_v4i32
    2147503141U,	// SQDMULLv4i32_indexed
    2147503141U,	// SQDMULLv4i32_v2i64
    2147510120U,	// SQDMULLv8i16_indexed
    2147510120U,	// SQDMULLv8i16_v4i32
    17171U,	// SQNEGv16i8
    67146107U,	// SQNEGv1i16
    67146107U,	// SQNEGv1i32
    67146107U,	// SQNEGv1i64
    67146107U,	// SQNEGv1i8
    25299U,	// SQNEGv2i32
    19843U,	// SQNEGv2i64
    21277U,	// SQNEGv4i16
    27106U,	// SQNEGv4i32
    22590U,	// SQNEGv8i16
    18027U,	// SQNEGv8i8
    2416038281U,	// SQRDMLAHi16_indexed
    2416042177U,	// SQRDMLAHi32_indexed
    2416040754U,	// SQRDMLAHv1i16
    2416040754U,	// SQRDMLAHv1i32
    2281759453U,	// SQRDMLAHv2i32
    2281759453U,	// SQRDMLAHv2i32_indexed
    2281755431U,	// SQRDMLAHv4i16
    2281755431U,	// SQRDMLAHv4i16_indexed
    2281761272U,	// SQRDMLAHv4i32
    2281761272U,	// SQRDMLAHv4i32_indexed
    2281756744U,	// SQRDMLAHv8i16
    2281756744U,	// SQRDMLAHv8i16_indexed
    2416038316U,	// SQRDMLSHi16_indexed
    2416042212U,	// SQRDMLSHi32_indexed
    2416041231U,	// SQRDMLSHv1i16
    2416041231U,	// SQRDMLSHv1i32
    2281759491U,	// SQRDMLSHv2i32
    2281759491U,	// SQRDMLSHv2i32_indexed
    2281755469U,	// SQRDMLSHv4i16
    2281755469U,	// SQRDMLSHv4i16_indexed
    2281761310U,	// SQRDMLSHv4i32
    2281761310U,	// SQRDMLSHv4i32_indexed
    2281756782U,	// SQRDMLSHv8i16
    2281756782U,	// SQRDMLSHv8i16_indexed
    2214632529U,	// SQRDMULHv1i16
    2214629792U,	// SQRDMULHv1i16_indexed
    2214632529U,	// SQRDMULHv1i32
    2214633688U,	// SQRDMULHv1i32_indexed
    2147508982U,	// SQRDMULHv2i32
    2147508982U,	// SQRDMULHv2i32_indexed
    2147504960U,	// SQRDMULHv4i16
    2147504960U,	// SQRDMULHv4i16_indexed
    2147510801U,	// SQRDMULHv4i32
    2147510801U,	// SQRDMULHv4i32_indexed
    2147506273U,	// SQRDMULHv8i16
    2147506273U,	// SQRDMULHv8i16_indexed
    2147500890U,	// SQRSHLv16i8
    2214632992U,	// SQRSHLv1i16
    2214632992U,	// SQRSHLv1i32
    2214632992U,	// SQRSHLv1i64
    2214632992U,	// SQRSHLv1i8
    2147509082U,	// SQRSHLv2i32
    2147503678U,	// SQRSHLv2i64
    2147505049U,	// SQRSHLv4i16
    2147511013U,	// SQRSHLv4i32
    2147506462U,	// SQRSHLv8i16
    2147501739U,	// SQRSHLv8i8
    2214633255U,	// SQRSHRNb
    2214633255U,	// SQRSHRNh
    2214633255U,	// SQRSHRNs
    2281750874U,	// SQRSHRNv16i8_shift
    2147509255U,	// SQRSHRNv2i32_shift
    2147505179U,	// SQRSHRNv4i16_shift
    2281760734U,	// SQRSHRNv4i32_shift
    2281756354U,	// SQRSHRNv8i16_shift
    2147501878U,	// SQRSHRNv8i8_shift
    2214633316U,	// SQRSHRUNb
    2214633316U,	// SQRSHRUNh
    2214633316U,	// SQRSHRUNs
    2281750950U,	// SQRSHRUNv16i8_shift
    2147509322U,	// SQRSHRUNv2i32_shift
    2147505235U,	// SQRSHRUNv4i16_shift
    2281760804U,	// SQRSHRUNv4i32_shift
    2281756424U,	// SQRSHRUNv8i16_shift
    2147501942U,	// SQRSHRUNv8i8_shift
    2214637401U,	// SQSHLUb
    2214637401U,	// SQSHLUd
    2214637401U,	// SQSHLUh
    2214637401U,	// SQSHLUs
    2147501244U,	// SQSHLUv16i8_shift
    2147509743U,	// SQSHLUv2i32_shift
    2147504225U,	// SQSHLUv2i64_shift
    2147505478U,	// SQSHLUv4i16_shift
    2147511654U,	// SQSHLUv4i32_shift
    2147506837U,	// SQSHLUv8i16_shift
    2147502182U,	// SQSHLUv8i8_shift
    2214632978U,	// SQSHLb
    2214632978U,	// SQSHLd
    2214632978U,	// SQSHLh
    2214632978U,	// SQSHLs
    2147500868U,	// SQSHLv16i8
    2147500868U,	// SQSHLv16i8_shift
    2214632978U,	// SQSHLv1i16
    2214632978U,	// SQSHLv1i32
    2214632978U,	// SQSHLv1i64
    2214632978U,	// SQSHLv1i8
    2147509062U,	// SQSHLv2i32
    2147509062U,	// SQSHLv2i32_shift
    2147503658U,	// SQSHLv2i64
    2147503658U,	// SQSHLv2i64_shift
    2147505029U,	// SQSHLv4i16
    2147505029U,	// SQSHLv4i16_shift
    2147510993U,	// SQSHLv4i32
    2147510993U,	// SQSHLv4i32_shift
    2147506442U,	// SQSHLv8i16
    2147506442U,	// SQSHLv8i16_shift
    2147501719U,	// SQSHLv8i8
    2147501719U,	// SQSHLv8i8_shift
    2214633239U,	// SQSHRNb
    2214633239U,	// SQSHRNh
    2214633239U,	// SQSHRNs
    2281750848U,	// SQSHRNv16i8_shift
    2147509233U,	// SQSHRNv2i32_shift
    2147505157U,	// SQSHRNv4i16_shift
    2281760710U,	// SQSHRNv4i32_shift
    2281756330U,	// SQSHRNv8i16_shift
    2147501856U,	// SQSHRNv8i8_shift
    2214633307U,	// SQSHRUNb
    2214633307U,	// SQSHRUNh
    2214633307U,	// SQSHRUNs
    2281750936U,	// SQSHRUNv16i8_shift
    2147509310U,	// SQSHRUNv2i32_shift
    2147505223U,	// SQSHRUNv4i16_shift
    2281760791U,	// SQSHRUNv4i32_shift
    2281756411U,	// SQSHRUNv8i16_shift
    2147501930U,	// SQSHRUNv8i8_shift
    2147500617U,	// SQSUBv16i8
    2214628048U,	// SQSUBv1i16
    2214628048U,	// SQSUBv1i32
    2214628048U,	// SQSUBv1i64
    2214628048U,	// SQSUBv1i8
    2147508714U,	// SQSUBv2i32
    2147503349U,	// SQSUBv2i64
    2147504797U,	// SQSUBv4i16
    2147510511U,	// SQSUBv4i32
    2147506110U,	// SQSUBv8i16
    2147501531U,	// SQSUBv8i8
    134267264U,	// SQXTNv16i8
    67149645U,	// SQXTNv1i16
    67149645U,	// SQXTNv1i32
    67149645U,	// SQXTNv1i8
    25642U,	// SQXTNv2i32
    21555U,	// SQXTNv4i16
    134277121U,	// SQXTNv4i32
    134272741U,	// SQXTNv8i16
    18262U,	// SQXTNv8i8
    134267317U,	// SQXTUNv16i8
    67149678U,	// SQXTUNv1i16
    67149678U,	// SQXTUNv1i32
    67149678U,	// SQXTUNv1i8
    25687U,	// SQXTUNv2i32
    21600U,	// SQXTUNv4i16
    134277170U,	// SQXTUNv4i32
    134272790U,	// SQXTUNv8i16
    18307U,	// SQXTUNv8i8
    2147500691U,	// SRHADDv16i8
    2147508778U,	// SRHADDv2i32
    2147504843U,	// SRHADDv4i16
    2147510585U,	// SRHADDv4i32
    2147506156U,	// SRHADDv8i16
    2147501577U,	// SRHADDv8i8
    2416041301U,	// SRId
    2281751345U,	// SRIv16i8_shift
    2281759530U,	// SRIv2i32_shift
    2281754014U,	// SRIv2i64_shift
    2281755508U,	// SRIv4i16_shift
    2281761349U,	// SRIv4i32_shift
    2281756821U,	// SRIv8i16_shift
    2281752198U,	// SRIv8i8_shift
    2147500914U,	// SRSHLv16i8
    2214633008U,	// SRSHLv1i64
    2147509104U,	// SRSHLv2i32
    2147503700U,	// SRSHLv2i64
    2147505071U,	// SRSHLv4i16
    2147511035U,	// SRSHLv4i32
    2147506484U,	// SRSHLv8i16
    2147501761U,	// SRSHLv8i8
    2214633513U,	// SRSHRd
    2147501077U,	// SRSHRv16i8_shift
    2147509513U,	// SRSHRv2i32_shift
    2147504011U,	// SRSHRv2i64_shift
    2147505369U,	// SRSHRv4i16_shift
    2147511424U,	// SRSHRv4i32_shift
    2147506728U,	// SRSHRv8i16_shift
    2147502032U,	// SRSHRv8i8_shift
    2416033948U,	// SRSRAd
    2281751049U,	// SRSRAv16i8_shift
    2281759132U,	// SRSRAv2i32_shift
    2281753787U,	// SRSRAv2i64_shift
    2281755235U,	// SRSRAv4i16_shift
    2281760929U,	// SRSRAv4i32_shift
    2281756548U,	// SRSRAv8i16_shift
    2281751969U,	// SRSRAv8i8_shift
    2147505733U,	// SSHLLv16i8_shift
    2147503738U,	// SSHLLv2i32_shift
    2147511073U,	// SSHLLv4i16_shift
    2147503119U,	// SSHLLv4i32_shift
    2147510098U,	// SSHLLv8i16_shift
    2147506522U,	// SSHLLv8i8_shift
    2147500936U,	// SSHLv16i8
    2214633022U,	// SSHLv1i64
    2147509124U,	// SSHLv2i32
    2147503720U,	// SSHLv2i64
    2147505091U,	// SSHLv4i16
    2147511055U,	// SSHLv4i32
    2147506504U,	// SSHLv8i16
    2147501781U,	// SSHLv8i8
    2214633527U,	// SSHRd
    2147501099U,	// SSHRv16i8_shift
    2147509533U,	// SSHRv2i32_shift
    2147504031U,	// SSHRv2i64_shift
    2147505389U,	// SSHRv4i16_shift
    2147511444U,	// SSHRv4i32_shift
    2147506748U,	// SSHRv8i16_shift
    2147502052U,	// SSHRv8i8_shift
    2416033962U,	// SSRAd
    2281751071U,	// SSRAv16i8_shift
    2281759152U,	// SSRAv2i32_shift
    2281753807U,	// SSRAv2i64_shift
    2281755255U,	// SSRAv4i16_shift
    2281760949U,	// SSRAv4i32_shift
    2281756568U,	// SSRAv8i16_shift
    2281751989U,	// SSRAv8i8_shift
    2147505667U,	// SSUBLv16i8_v8i16
    2147503598U,	// SSUBLv2i32_v2i64
    2147510933U,	// SSUBLv4i16_v4i32
    2147503053U,	// SSUBLv4i32_v2i64
    2147510032U,	// SSUBLv8i16_v4i32
    2147506382U,	// SSUBLv8i8_v8i16
    2147505972U,	// SSUBWv16i8_v8i16
    2147504298U,	// SSUBWv2i32_v2i64
    2147511842U,	// SSUBWv4i16_v4i32
    2147503238U,	// SSUBWv4i32_v2i64
    2147510352U,	// SSUBWv8i16_v4i32
    2147506919U,	// SSUBWv8i8_v8i16
    180237U,	// ST1Fourv16b
    9633805U,	// ST1Fourv16b_POST
    213005U,	// ST1Fourv1d
    10715149U,	// ST1Fourv1d_POST
    245773U,	// ST1Fourv2d
    9699341U,	// ST1Fourv2d_POST
    278541U,	// ST1Fourv2s
    10780685U,	// ST1Fourv2s_POST
    311309U,	// ST1Fourv4h
    10813453U,	// ST1Fourv4h_POST
    344077U,	// ST1Fourv4s
    9797645U,	// ST1Fourv4s_POST
    376845U,	// ST1Fourv8b
    10878989U,	// ST1Fourv8b_POST
    409613U,	// ST1Fourv8h
    9863181U,	// ST1Fourv8h_POST
    180237U,	// ST1Onev16b
    11730957U,	// ST1Onev16b_POST
    213005U,	// ST1Onev1d
    12812301U,	// ST1Onev1d_POST
    245773U,	// ST1Onev2d
    11796493U,	// ST1Onev2d_POST
    278541U,	// ST1Onev2s
    12877837U,	// ST1Onev2s_POST
    311309U,	// ST1Onev4h
    12910605U,	// ST1Onev4h_POST
    344077U,	// ST1Onev4s
    11894797U,	// ST1Onev4s_POST
    376845U,	// ST1Onev8b
    12976141U,	// ST1Onev8b_POST
    409613U,	// ST1Onev8h
    11960333U,	// ST1Onev8h_POST
    180237U,	// ST1Threev16b
    16973837U,	// ST1Threev16b_POST
    213005U,	// ST1Threev1d
    18055181U,	// ST1Threev1d_POST
    245773U,	// ST1Threev2d
    17039373U,	// ST1Threev2d_POST
    278541U,	// ST1Threev2s
    18120717U,	// ST1Threev2s_POST
    311309U,	// ST1Threev4h
    18153485U,	// ST1Threev4h_POST
    344077U,	// ST1Threev4s
    17137677U,	// ST1Threev4s_POST
    376845U,	// ST1Threev8b
    18219021U,	// ST1Threev8b_POST
    409613U,	// ST1Threev8h
    17203213U,	// ST1Threev8h_POST
    180237U,	// ST1Twov16b
    10682381U,	// ST1Twov16b_POST
    213005U,	// ST1Twov1d
    11763725U,	// ST1Twov1d_POST
    245773U,	// ST1Twov2d
    10747917U,	// ST1Twov2d_POST
    278541U,	// ST1Twov2s
    11829261U,	// ST1Twov2s_POST
    311309U,	// ST1Twov4h
    11862029U,	// ST1Twov4h_POST
    344077U,	// ST1Twov4s
    10846221U,	// ST1Twov4s_POST
    376845U,	// ST1Twov8b
    11927565U,	// ST1Twov8b_POST
    409613U,	// ST1Twov8h
    10911757U,	// ST1Twov8h_POST
    622605U,	// ST1i16
    1108787213U,	// ST1i16_POST
    638989U,	// ST1i32
    1175928845U,	// ST1i32_POST
    655373U,	// ST1i64
    1243070477U,	// ST1i64_POST
    671757U,	// ST1i8
    1310212109U,	// ST1i8_POST
    180286U,	// ST2Twov16b
    10682430U,	// ST2Twov16b_POST
    245822U,	// ST2Twov2d
    10747966U,	// ST2Twov2d_POST
    278590U,	// ST2Twov2s
    11829310U,	// ST2Twov2s_POST
    311358U,	// ST2Twov4h
    11862078U,	// ST2Twov4h_POST
    344126U,	// ST2Twov4s
    10846270U,	// ST2Twov4s_POST
    376894U,	// ST2Twov8b
    11927614U,	// ST2Twov8b_POST
    409662U,	// ST2Twov8h
    10911806U,	// ST2Twov8h_POST
    622654U,	// ST2i16
    1175896126U,	// ST2i16_POST
    639038U,	// ST2i32
    1243037758U,	// ST2i32_POST
    655422U,	// ST2i64
    1377288254U,	// ST2i64_POST
    671806U,	// ST2i8
    1108885566U,	// ST2i8_POST
    180303U,	// ST3Threev16b
    16973903U,	// ST3Threev16b_POST
    245839U,	// ST3Threev2d
    17039439U,	// ST3Threev2d_POST
    278607U,	// ST3Threev2s
    18120783U,	// ST3Threev2s_POST
    311375U,	// ST3Threev4h
    18153551U,	// ST3Threev4h_POST
    344143U,	// ST3Threev4s
    17137743U,	// ST3Threev4s_POST
    376911U,	// ST3Threev8b
    18219087U,	// ST3Threev8b_POST
    409679U,	// ST3Threev8h
    17203279U,	// ST3Threev8h_POST
    622671U,	// ST3i16
    1444331599U,	// ST3i16_POST
    639055U,	// ST3i32
    1511473231U,	// ST3i32_POST
    655439U,	// ST3i64
    1578614863U,	// ST3i64_POST
    671823U,	// ST3i8
    1645756495U,	// ST3i8_POST
    180313U,	// ST4Fourv16b
    9633881U,	// ST4Fourv16b_POST
    245849U,	// ST4Fourv2d
    9699417U,	// ST4Fourv2d_POST
    278617U,	// ST4Fourv2s
    10780761U,	// ST4Fourv2s_POST
    311385U,	// ST4Fourv4h
    10813529U,	// ST4Fourv4h_POST
    344153U,	// ST4Fourv4s
    9797721U,	// ST4Fourv4s_POST
    376921U,	// ST4Fourv8b
    10879065U,	// ST4Fourv8b_POST
    409689U,	// ST4Fourv8h
    9863257U,	// ST4Fourv8h_POST
    622681U,	// ST4i16
    1243005017U,	// ST4i16_POST
    639065U,	// ST4i32
    1377255513U,	// ST4i32_POST
    655449U,	// ST4i64
    1712832601U,	// ST4i64_POST
    671833U,	// ST4i8
    1175994457U,	// ST4i8_POST
    2248182325U,	// STLLRB
    2248187058U,	// STLLRH
    2248187983U,	// STLLRW
    2248187983U,	// STLLRX
    2248182333U,	// STLRB
    2248187066U,	// STLRH
    2248187990U,	// STLRW
    2248187990U,	// STLRX
    2214633421U,	// STLXPW
    2214633421U,	// STLXPX
    67144317U,	// STLXRB
    67149050U,	// STLXRH
    67149996U,	// STLXRW
    67149996U,	// STLXRX
    67149724U,	// STNPDi
    67149724U,	// STNPQi
    67149724U,	// STNPSi
    67149724U,	// STNPWi
    67149724U,	// STNPXi
    67149750U,	// STPDi
    268558262U,	// STPDpost
    268558262U,	// STPDpre
    67149750U,	// STPQi
    268558262U,	// STPQpost
    268558262U,	// STPQpre
    67149750U,	// STPSi
    268558262U,	// STPSpost
    268558262U,	// STPSpre
    67149750U,	// STPWi
    268558262U,	// STPWpost
    268558262U,	// STPWpre
    67149750U,	// STPXi
    268558262U,	// STPXpost
    268558262U,	// STPXpre
    302107219U,	// STRBBpost
    2449590867U,	// STRBBpre
    2248182355U,	// STRBBroW
    2248182355U,	// STRBBroX
    2248182355U,	// STRBBui
    302112898U,	// STRBpost
    2449596546U,	// STRBpre
    2248188034U,	// STRBroW
    2248188034U,	// STRBroX
    2248188034U,	// STRBui
    302112898U,	// STRDpost
    2449596546U,	// STRDpre
    2248188034U,	// STRDroW
    2248188034U,	// STRDroX
    2248188034U,	// STRDui
    302111952U,	// STRHHpost
    2449595600U,	// STRHHpre
    2248187088U,	// STRHHroW
    2248187088U,	// STRHHroX
    2248187088U,	// STRHHui
    302112898U,	// STRHpost
    2449596546U,	// STRHpre
    2248188034U,	// STRHroW
    2248188034U,	// STRHroX
    2248188034U,	// STRHui
    302112898U,	// STRQpost
    2449596546U,	// STRQpre
    2248188034U,	// STRQroW
    2248188034U,	// STRQroX
    2248188034U,	// STRQui
    302112898U,	// STRSpost
    2449596546U,	// STRSpre
    2248188034U,	// STRSroW
    2248188034U,	// STRSroX
    2248188034U,	// STRSui
    302112898U,	// STRWpost
    2449596546U,	// STRWpre
    2248188034U,	// STRWroW
    2248188034U,	// STRWroX
    2248188034U,	// STRWui
    302112898U,	// STRXpost
    2449596546U,	// STRXpre
    2248188034U,	// STRXroW
    2248188034U,	// STRXroX
    2248188034U,	// STRXui
    2248182361U,	// STTRBi
    2248187094U,	// STTRHi
    2248188039U,	// STTRWi
    2248188039U,	// STTRXi
    2248182375U,	// STURBBi
    2248188057U,	// STURBi
    2248188057U,	// STURDi
    2248187108U,	// STURHHi
    2248188057U,	// STURHi
    2248188057U,	// STURQi
    2248188057U,	// STURSi
    2248188057U,	// STURWi
    2248188057U,	// STURXi
    2214633428U,	// STXPW
    2214633428U,	// STXPX
    67144325U,	// STXRB
    67149058U,	// STXRH
    67150003U,	// STXRW
    67150003U,	// STXRX
    2147509185U,	// SUBHNv2i64_v2i32
    2281760687U,	// SUBHNv2i64_v4i32
    2147505118U,	// SUBHNv4i32_v4i16
    2281756307U,	// SUBHNv4i32_v8i16
    2281750823U,	// SUBHNv8i16_v16i8
    2147501817U,	// SUBHNv8i16_v8i8
    2214637223U,	// SUBSWri
    0U,	// SUBSWrr
    2214637223U,	// SUBSWrs
    2214637223U,	// SUBSWrx
    2214637223U,	// SUBSXri
    0U,	// SUBSXrr
    2214637223U,	// SUBSXrs
    2214637223U,	// SUBSXrx
    2214637223U,	// SUBSXrx64
    2214628028U,	// SUBWri
    0U,	// SUBWrr
    2214628028U,	// SUBWrs
    2214628028U,	// SUBWrx
    2214628028U,	// SUBXri
    0U,	// SUBXrr
    2214628028U,	// SUBXrs
    2214628028U,	// SUBXrx
    2214628028U,	// SUBXrx64
    2147500597U,	// SUBv16i8
    2214628028U,	// SUBv1i64
    2147508686U,	// SUBv2i32
    2147503341U,	// SUBv2i64
    2147504779U,	// SUBv4i16
    2147510483U,	// SUBv4i32
    2147506092U,	// SUBv8i16
    2147501513U,	// SUBv8i8
    134267597U,	// SUQADDv16i8
    268554533U,	// SUQADDv1i16
    268554533U,	// SUQADDv1i32
    268554533U,	// SUQADDv1i64
    268554533U,	// SUQADDv1i8
    134275679U,	// SUQADDv2i32
    134270246U,	// SUQADDv2i64
    134271744U,	// SUQADDv4i16
    134277486U,	// SUQADDv4i32
    134273057U,	// SUQADDv8i16
    134268478U,	// SUQADDv8i8
    84752U,	// SVC
    805423453U,	// SWPALb
    805428641U,	// SWPALd
    805428158U,	// SWPALh
    805428641U,	// SWPALs
    805423343U,	// SWPAb
    805421190U,	// SWPAd
    805428048U,	// SWPAh
    805421190U,	// SWPAs
    805423550U,	// SWPLb
    805428844U,	// SWPLd
    805428255U,	// SWPLh
    805428844U,	// SWPLs
    805423634U,	// SWPb
    805429179U,	// SWPd
    805428367U,	// SWPh
    805429179U,	// SWPs
    2214633105U,	// SYSLxt
    1744875268U,	// SYSxt
    3995098590U,	// TBLv16i8Four
    3995098590U,	// TBLv16i8One
    3995098590U,	// TBLv16i8Three
    3995098590U,	// TBLv16i8Two
    1848663518U,	// TBLv8i8Four
    1848663518U,	// TBLv8i8One
    1848663518U,	// TBLv8i8Three
    1848663518U,	// TBLv8i8Two
    2214637619U,	// TBNZW
    2214637619U,	// TBNZX
    4062244850U,	// TBXv16i8Four
    4062244850U,	// TBXv16i8One
    4062244850U,	// TBXv16i8Three
    4062244850U,	// TBXv16i8Two
    1915809778U,	// TBXv8i8Four
    1915809778U,	// TBXv8i8One
    1915809778U,	// TBXv8i8Three
    1915809778U,	// TBXv8i8Two
    2214637603U,	// TBZW
    2214637603U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    1093703U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    2147500285U,	// TRN1v16i8
    2147508545U,	// TRN1v2i32
    2147502969U,	// TRN1v2i64
    2147504639U,	// TRN1v4i16
    2147509909U,	// TRN1v4i32
    2147505586U,	// TRN1v8i16
    2147501363U,	// TRN1v8i8
    2147500406U,	// TRN2v16i8
    2147508572U,	// TRN2v2i32
    2147503211U,	// TRN2v2i64
    2147504676U,	// TRN2v4i16
    2147510264U,	// TRN2v4i32
    2147505884U,	// TRN2v8i16
    2147501400U,	// TRN2v8i8
    2281756130U,	// UABALv16i8_v8i16
    2281754052U,	// UABALv2i32_v2i64
    2281761387U,	// UABALv4i16_v4i32
    2281753503U,	// UABALv4i32_v2i64
    2281760482U,	// UABALv8i16_v4i32
    2281756848U,	// UABALv8i8_v8i16
    2281751030U,	// UABAv16i8
    2281759114U,	// UABAv2i32
    2281755218U,	// UABAv4i16
    2281760911U,	// UABAv4i32
    2281756531U,	// UABAv8i16
    2281751952U,	// UABAv8i8
    2147505700U,	// UABDLv16i8_v8i16
    2147503628U,	// UABDLv2i32_v2i64
    2147510963U,	// UABDLv4i16_v4i32
    2147503086U,	// UABDLv4i32_v2i64
    2147510065U,	// UABDLv8i16_v4i32
    2147506412U,	// UABDLv8i8_v8i16
    2147500681U,	// UABDv16i8
    2147508760U,	// UABDv2i32
    2147504834U,	// UABDv4i16
    2147510567U,	// UABDv4i32
    2147506147U,	// UABDv8i16
    2147501568U,	// UABDv8i8
    134273486U,	// UADALPv16i8_v8i16
    134269784U,	// UADALPv2i32_v1i64
    134276215U,	// UADALPv4i16_v2i32
    134270753U,	// UADALPv4i32_v2i64
    134278126U,	// UADALPv8i16_v4i32
    134272127U,	// UADALPv8i8_v4i16
    23012U,	// UADDLPv16i8_v8i16
    19310U,	// UADDLPv2i32_v1i64
    25741U,	// UADDLPv4i16_v2i32
    20279U,	// UADDLPv4i32_v2i64
    27652U,	// UADDLPv8i16_v4i32
    21653U,	// UADDLPv8i8_v4i16
    34014U,	// UADDLVv16i8v
    38245U,	// UADDLVv4i16v
    44474U,	// UADDLVv4i32v
    39604U,	// UADDLVv8i16v
    34949U,	// UADDLVv8i8v
    2147505722U,	// UADDLv16i8_v8i16
    2147503648U,	// UADDLv2i32_v2i64
    2147510983U,	// UADDLv4i16_v4i32
    2147503108U,	// UADDLv4i32_v2i64
    2147510087U,	// UADDLv8i16_v4i32
    2147506432U,	// UADDLv8i8_v8i16
    2147506005U,	// UADDWv16i8_v8i16
    2147504328U,	// UADDWv2i32_v2i64
    2147511872U,	// UADDWv4i16_v4i32
    2147503271U,	// UADDWv4i32_v2i64
    2147510385U,	// UADDWv8i16_v4i32
    2147506949U,	// UADDWv8i8_v8i16
    2214633163U,	// UBFMWri
    2214633163U,	// UBFMXri
    2214629742U,	// UCVTFSWDri
    2214629742U,	// UCVTFSWSri
    2214629742U,	// UCVTFSXDri
    2214629742U,	// UCVTFSXSri
    67146094U,	// UCVTFUWDri
    67146094U,	// UCVTFUWSri
    67146094U,	// UCVTFUXDri
    67146094U,	// UCVTFUXSri
    2214629742U,	// UCVTFd
    2214629742U,	// UCVTFs
    67146094U,	// UCVTFv1i32
    67146094U,	// UCVTFv1i64
    25280U,	// UCVTFv2f32
    19824U,	// UCVTFv2f64
    2147508928U,	// UCVTFv2i32_shift
    2147503472U,	// UCVTFv2i64_shift
    27087U,	// UCVTFv4f32
    2147510735U,	// UCVTFv4i32_shift
    2214637458U,	// UDIVWr
    2214637458U,	// UDIVXr
    2214637458U,	// UDIV_IntWr
    2214637458U,	// UDIV_IntXr
    2147500726U,	// UHADDv16i8
    2147508810U,	// UHADDv2i32
    2147504875U,	// UHADDv4i16
    2147510617U,	// UHADDv4i32
    2147506188U,	// UHADDv8i16
    2147501609U,	// UHADDv8i8
    2147500606U,	// UHSUBv16i8
    2147508704U,	// UHSUBv2i32
    2147504787U,	// UHSUBv4i16
    2147510501U,	// UHSUBv4i32
    2147506100U,	// UHSUBv8i16
    2147501521U,	// UHSUBv8i8
    2214632963U,	// UMADDLrrr
    2147501056U,	// UMAXPv16i8
    2147509493U,	// UMAXPv2i32
    2147505350U,	// UMAXPv4i16
    2147511404U,	// UMAXPv4i32
    2147506709U,	// UMAXPv8i16
    2147502013U,	// UMAXPv8i8
    34059U,	// UMAXVv16i8v
    38286U,	// UMAXVv4i16v
    44568U,	// UMAXVv4i32v
    39645U,	// UMAXVv8i16v
    34990U,	// UMAXVv8i8v
    2147501344U,	// UMAXv16i8
    2147509834U,	// UMAXv2i32
    2147505569U,	// UMAXv4i16
    2147511900U,	// UMAXv4i32
    2147506968U,	// UMAXv8i16
    2147502273U,	// UMAXv8i8
    2147501025U,	// UMINPv16i8
    2147509444U,	// UMINPv2i32
    2147505322U,	// UMINPv4i16
    2147511355U,	// UMINPv4i32
    2147506681U,	// UMINPv8i16
    2147501985U,	// UMINPv8i8
    34037U,	// UMINVv16i8v
    38266U,	// UMINVv4i16v
    44529U,	// UMINVv4i32v
    39625U,	// UMINVv8i16v
    34970U,	// UMINVv8i8v
    2147500985U,	// UMINv16i8
    2147509224U,	// UMINv2i32
    2147505148U,	// UMINv4i16
    2147511227U,	// UMINv4i32
    2147506609U,	// UMINv8i16
    2147501847U,	// UMINv8i8
    2281756152U,	// UMLALv16i8_v8i16
    2281754084U,	// UMLALv2i32_indexed
    2281754084U,	// UMLALv2i32_v2i64
    2281761419U,	// UMLALv4i16_indexed
    2281761419U,	// UMLALv4i16_v4i32
    2281753538U,	// UMLALv4i32_indexed
    2281753538U,	// UMLALv4i32_v2i64
    2281760517U,	// UMLALv8i16_indexed
    2281760517U,	// UMLALv8i16_v4i32
    2281756868U,	// UMLALv8i8_v8i16
    2281756295U,	// UMLSLv16i8_v8i16
    2281754308U,	// UMLSLv2i32_indexed
    2281754308U,	// UMLSLv2i32_v2i64
    2281761643U,	// UMLSLv4i16_indexed
    2281761643U,	// UMLSLv4i16_v4i32
    2281753696U,	// UMLSLv4i32_indexed
    2281753696U,	// UMLSLv4i32_v2i64
    2281760675U,	// UMLSLv8i16_indexed
    2281760675U,	// UMLSLv8i16_v4i32
    2281757078U,	// UMLSLv8i8_v8i16
    37352U,	// UMOVvi16
    41264U,	// UMOVvi32
    35644U,	// UMOVvi64
    33005U,	// UMOVvi8
    2214632939U,	// UMSUBLrrr
    2214632546U,	// UMULHrr
    2147505777U,	// UMULLv16i8_v8i16
    2147503780U,	// UMULLv2i32_indexed
    2147503780U,	// UMULLv2i32_v2i64
    2147511115U,	// UMULLv4i16_indexed
    2147511115U,	// UMULLv4i16_v4i32
    2147503165U,	// UMULLv4i32_indexed
    2147503165U,	// UMULLv4i32_v2i64
    2147510144U,	// UMULLv8i16_indexed
    2147510144U,	// UMULLv8i16_v4i32
    2147506562U,	// UMULLv8i8_v8i16
    2147500750U,	// UQADDv16i8
    2214629670U,	// UQADDv1i16
    2214629670U,	// UQADDv1i32
    2214629670U,	// UQADDv1i64
    2214629670U,	// UQADDv1i8
    2147508832U,	// UQADDv2i32
    2147503399U,	// UQADDv2i64
    2147504897U,	// UQADDv4i16
    2147510639U,	// UQADDv4i32
    2147506210U,	// UQADDv8i16
    2147501631U,	// UQADDv8i8
    2147500902U,	// UQRSHLv16i8
    2214633000U,	// UQRSHLv1i16
    2214633000U,	// UQRSHLv1i32
    2214633000U,	// UQRSHLv1i64
    2214633000U,	// UQRSHLv1i8
    2147509093U,	// UQRSHLv2i32
    2147503689U,	// UQRSHLv2i64
    2147505060U,	// UQRSHLv4i16
    2147511024U,	// UQRSHLv4i32
    2147506473U,	// UQRSHLv8i16
    2147501750U,	// UQRSHLv8i8
    2214633264U,	// UQRSHRNb
    2214633264U,	// UQRSHRNh
    2214633264U,	// UQRSHRNs
    2281750888U,	// UQRSHRNv16i8_shift
    2147509267U,	// UQRSHRNv2i32_shift
    2147505191U,	// UQRSHRNv4i16_shift
    2281760747U,	// UQRSHRNv4i32_shift
    2281756367U,	// UQRSHRNv8i16_shift
    2147501890U,	// UQRSHRNv8i8_shift
    2214632985U,	// UQSHLb
    2214632985U,	// UQSHLd
    2214632985U,	// UQSHLh
    2214632985U,	// UQSHLs
    2147500879U,	// UQSHLv16i8
    2147500879U,	// UQSHLv16i8_shift
    2214632985U,	// UQSHLv1i16
    2214632985U,	// UQSHLv1i32
    2214632985U,	// UQSHLv1i64
    2214632985U,	// UQSHLv1i8
    2147509072U,	// UQSHLv2i32
    2147509072U,	// UQSHLv2i32_shift
    2147503668U,	// UQSHLv2i64
    2147503668U,	// UQSHLv2i64_shift
    2147505039U,	// UQSHLv4i16
    2147505039U,	// UQSHLv4i16_shift
    2147511003U,	// UQSHLv4i32
    2147511003U,	// UQSHLv4i32_shift
    2147506452U,	// UQSHLv8i16
    2147506452U,	// UQSHLv8i16_shift
    2147501729U,	// UQSHLv8i8
    2147501729U,	// UQSHLv8i8_shift
    2214633247U,	// UQSHRNb
    2214633247U,	// UQSHRNh
    2214633247U,	// UQSHRNs
    2281750861U,	// UQSHRNv16i8_shift
    2147509244U,	// UQSHRNv2i32_shift
    2147505168U,	// UQSHRNv4i16_shift
    2281760722U,	// UQSHRNv4i32_shift
    2281756342U,	// UQSHRNv8i16_shift
    2147501867U,	// UQSHRNv8i8_shift
    2147500628U,	// UQSUBv16i8
    2214628055U,	// UQSUBv1i16
    2214628055U,	// UQSUBv1i32
    2214628055U,	// UQSUBv1i64
    2214628055U,	// UQSUBv1i8
    2147508724U,	// UQSUBv2i32
    2147503359U,	// UQSUBv2i64
    2147504807U,	// UQSUBv4i16
    2147510521U,	// UQSUBv4i32
    2147506120U,	// UQSUBv8i16
    2147501541U,	// UQSUBv8i8
    134267276U,	// UQXTNv16i8
    67149652U,	// UQXTNv1i16
    67149652U,	// UQXTNv1i32
    67149652U,	// UQXTNv1i8
    25652U,	// UQXTNv2i32
    21565U,	// UQXTNv4i16
    134277132U,	// UQXTNv4i32
    134272752U,	// UQXTNv8i16
    18272U,	// UQXTNv8i8
    25235U,	// URECPEv2i32
    27042U,	// URECPEv4i32
    2147500703U,	// URHADDv16i8
    2147508789U,	// URHADDv2i32
    2147504854U,	// URHADDv4i16
    2147510596U,	// URHADDv4i32
    2147506167U,	// URHADDv8i16
    2147501588U,	// URHADDv8i8
    2147500925U,	// URSHLv16i8
    2214633015U,	// URSHLv1i64
    2147509114U,	// URSHLv2i32
    2147503710U,	// URSHLv2i64
    2147505081U,	// URSHLv4i16
    2147511045U,	// URSHLv4i32
    2147506494U,	// URSHLv8i16
    2147501771U,	// URSHLv8i8
    2214633520U,	// URSHRd
    2147501088U,	// URSHRv16i8_shift
    2147509523U,	// URSHRv2i32_shift
    2147504021U,	// URSHRv2i64_shift
    2147505379U,	// URSHRv4i16_shift
    2147511434U,	// URSHRv4i32_shift
    2147506738U,	// URSHRv8i16_shift
    2147502042U,	// URSHRv8i8_shift
    25258U,	// URSQRTEv2i32
    27065U,	// URSQRTEv4i32
    2416033955U,	// URSRAd
    2281751060U,	// URSRAv16i8_shift
    2281759142U,	// URSRAv2i32_shift
    2281753797U,	// URSRAv2i64_shift
    2281755245U,	// URSRAv4i16_shift
    2281760939U,	// URSRAv4i32_shift
    2281756558U,	// URSRAv8i16_shift
    2281751979U,	// URSRAv8i8_shift
    2147505744U,	// USHLLv16i8_shift
    2147503748U,	// USHLLv2i32_shift
    2147511083U,	// USHLLv4i16_shift
    2147503130U,	// USHLLv4i32_shift
    2147510109U,	// USHLLv8i16_shift
    2147506532U,	// USHLLv8i8_shift
    2147500946U,	// USHLv16i8
    2214633028U,	// USHLv1i64
    2147509133U,	// USHLv2i32
    2147503729U,	// USHLv2i64
    2147505100U,	// USHLv4i16
    2147511064U,	// USHLv4i32
    2147506513U,	// USHLv8i16
    2147501790U,	// USHLv8i8
    2214633533U,	// USHRd
    2147501109U,	// USHRv16i8_shift
    2147509542U,	// USHRv2i32_shift
    2147504040U,	// USHRv2i64_shift
    2147505398U,	// USHRv4i16_shift
    2147511453U,	// USHRv4i32_shift
    2147506757U,	// USHRv8i16_shift
    2147502061U,	// USHRv8i8_shift
    134267585U,	// USQADDv16i8
    268554525U,	// USQADDv1i16
    268554525U,	// USQADDv1i32
    268554525U,	// USQADDv1i64
    268554525U,	// USQADDv1i8
    134275668U,	// USQADDv2i32
    134270235U,	// USQADDv2i64
    134271733U,	// USQADDv4i16
    134277475U,	// USQADDv4i32
    134273046U,	// USQADDv8i16
    134268467U,	// USQADDv8i8
    2416033968U,	// USRAd
    2281751081U,	// USRAv16i8_shift
    2281759161U,	// USRAv2i32_shift
    2281753816U,	// USRAv2i64_shift
    2281755264U,	// USRAv4i16_shift
    2281760958U,	// USRAv4i32_shift
    2281756577U,	// USRAv8i16_shift
    2281751998U,	// USRAv8i8_shift
    2147505678U,	// USUBLv16i8_v8i16
    2147503608U,	// USUBLv2i32_v2i64
    2147510943U,	// USUBLv4i16_v4i32
    2147503064U,	// USUBLv4i32_v2i64
    2147510043U,	// USUBLv8i16_v4i32
    2147506392U,	// USUBLv8i8_v8i16
    2147505983U,	// USUBWv16i8_v8i16
    2147504308U,	// USUBWv2i32_v2i64
    2147511852U,	// USUBWv4i16_v4i32
    2147503249U,	// USUBWv4i32_v2i64
    2147510363U,	// USUBWv8i16_v4i32
    2147506929U,	// USUBWv8i8_v8i16
    2147500305U,	// UZP1v16i8
    2147508563U,	// UZP1v2i32
    2147502987U,	// UZP1v2i64
    2147504657U,	// UZP1v4i16
    2147509927U,	// UZP1v4i32
    2147505604U,	// UZP1v8i16
    2147501381U,	// UZP1v8i8
    2147500492U,	// UZP2v16i8
    2147508590U,	// UZP2v2i32
    2147503229U,	// UZP2v2i64
    2147504694U,	// UZP2v4i16
    2147510343U,	// UZP2v4i32
    2147505963U,	// UZP2v8i16
    2147501418U,	// UZP2v8i8
    134267266U,	// XTNv16i8
    25644U,	// XTNv2i32
    21557U,	// XTNv4i16
    134277123U,	// XTNv4i32
    134272743U,	// XTNv8i16
    18264U,	// XTNv8i8
    2147500295U,	// ZIP1v16i8
    2147508554U,	// ZIP1v2i32
    2147502978U,	// ZIP1v2i64
    2147504648U,	// ZIP1v4i16
    2147509918U,	// ZIP1v4i32
    2147505595U,	// ZIP1v8i16
    2147501372U,	// ZIP1v8i8
    2147500482U,	// ZIP2v16i8
    2147508581U,	// ZIP2v2i32
    2147503220U,	// ZIP2v2i64
    2147504685U,	// ZIP2v4i16
    2147510334U,	// ZIP2v4i32
    2147505954U,	// ZIP2v8i16
    2147501409U,	// ZIP2v8i8
    0U
  };

  static const uint32_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    16U,	// ADDHNv2i64_v2i32
    32U,	// ADDHNv2i64_v4i32
    16U,	// ADDHNv4i32_v4i16
    32U,	// ADDHNv4i32_v8i16
    32U,	// ADDHNv8i16_v16i8
    16U,	// ADDHNv8i16_v8i8
    16U,	// ADDPv16i8
    16U,	// ADDPv2i32
    16U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    16U,	// ADDPv4i16
    16U,	// ADDPv4i32
    16U,	// ADDPv8i16
    16U,	// ADDPv8i8
    48U,	// ADDSWri
    0U,	// ADDSWrr
    64U,	// ADDSWrs
    80U,	// ADDSWrx
    48U,	// ADDSXri
    0U,	// ADDSXrr
    64U,	// ADDSXrs
    80U,	// ADDSXrx
    256U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    48U,	// ADDWri
    0U,	// ADDWrr
    64U,	// ADDWrs
    80U,	// ADDWrx
    48U,	// ADDXri
    0U,	// ADDXrr
    64U,	// ADDXrs
    80U,	// ADDXrx
    256U,	// ADDXrx64
    16U,	// ADDv16i8
    0U,	// ADDv1i64
    16U,	// ADDv2i32
    16U,	// ADDv2i64
    16U,	// ADDv4i16
    16U,	// ADDv4i32
    16U,	// ADDv8i16
    16U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESMCrr
    96U,	// ANDSWri
    0U,	// ANDSWrr
    64U,	// ANDSWrs
    112U,	// ANDSXri
    0U,	// ANDSXrr
    64U,	// ANDSXrs
    96U,	// ANDWri
    0U,	// ANDWrr
    64U,	// ANDWrs
    112U,	// ANDXri
    0U,	// ANDXrr
    64U,	// ANDXrs
    16U,	// ANDv16i8
    16U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// B
    640U,	// BFMWri
    640U,	// BFMXri
    0U,	// BICSWrr
    64U,	// BICSWrs
    0U,	// BICSXrr
    64U,	// BICSXrs
    0U,	// BICWrr
    64U,	// BICWrs
    0U,	// BICXrr
    64U,	// BICXrs
    16U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    16U,	// BICv8i8
    16U,	// BIFv16i8
    16U,	// BIFv8i8
    32U,	// BITv16i8
    32U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BR
    0U,	// BRK
    32U,	// BSLv16i8
    32U,	// BSLv8i8
    0U,	// Bcc
    897U,	// CASALb
    897U,	// CASALd
    897U,	// CASALh
    897U,	// CASALs
    897U,	// CASAb
    897U,	// CASAd
    897U,	// CASAh
    897U,	// CASAs
    897U,	// CASLb
    897U,	// CASLd
    897U,	// CASLh
    897U,	// CASLs
    0U,	// CASPALd
    0U,	// CASPALs
    0U,	// CASPAd
    0U,	// CASPAs
    0U,	// CASPLd
    0U,	// CASPLs
    0U,	// CASPd
    0U,	// CASPs
    897U,	// CASb
    897U,	// CASd
    897U,	// CASh
    897U,	// CASs
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    4608U,	// CCMNWi
    4608U,	// CCMNWr
    4608U,	// CCMNXi
    4608U,	// CCMNXr
    4608U,	// CCMPWi
    4608U,	// CCMPWr
    4608U,	// CCMPXi
    4608U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    16U,	// CMEQv16i8
    1U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    1U,	// CMEQv1i64rz
    16U,	// CMEQv2i32
    1U,	// CMEQv2i32rz
    16U,	// CMEQv2i64
    1U,	// CMEQv2i64rz
    16U,	// CMEQv4i16
    1U,	// CMEQv4i16rz
    16U,	// CMEQv4i32
    1U,	// CMEQv4i32rz
    16U,	// CMEQv8i16
    1U,	// CMEQv8i16rz
    16U,	// CMEQv8i8
    1U,	// CMEQv8i8rz
    16U,	// CMGEv16i8
    1U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    1U,	// CMGEv1i64rz
    16U,	// CMGEv2i32
    1U,	// CMGEv2i32rz
    16U,	// CMGEv2i64
    1U,	// CMGEv2i64rz
    16U,	// CMGEv4i16
    1U,	// CMGEv4i16rz
    16U,	// CMGEv4i32
    1U,	// CMGEv4i32rz
    16U,	// CMGEv8i16
    1U,	// CMGEv8i16rz
    16U,	// CMGEv8i8
    1U,	// CMGEv8i8rz
    16U,	// CMGTv16i8
    1U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    1U,	// CMGTv1i64rz
    16U,	// CMGTv2i32
    1U,	// CMGTv2i32rz
    16U,	// CMGTv2i64
    1U,	// CMGTv2i64rz
    16U,	// CMGTv4i16
    1U,	// CMGTv4i16rz
    16U,	// CMGTv4i32
    1U,	// CMGTv4i32rz
    16U,	// CMGTv8i16
    1U,	// CMGTv8i16rz
    16U,	// CMGTv8i8
    1U,	// CMGTv8i8rz
    16U,	// CMHIv16i8
    0U,	// CMHIv1i64
    16U,	// CMHIv2i32
    16U,	// CMHIv2i64
    16U,	// CMHIv4i16
    16U,	// CMHIv4i32
    16U,	// CMHIv8i16
    16U,	// CMHIv8i8
    16U,	// CMHSv16i8
    0U,	// CMHSv1i64
    16U,	// CMHSv2i32
    16U,	// CMHSv2i64
    16U,	// CMHSv4i16
    16U,	// CMHSv4i32
    16U,	// CMHSv8i16
    16U,	// CMHSv8i8
    1U,	// CMLEv16i8rz
    1U,	// CMLEv1i64rz
    1U,	// CMLEv2i32rz
    1U,	// CMLEv2i64rz
    1U,	// CMLEv4i16rz
    1U,	// CMLEv4i32rz
    1U,	// CMLEv8i16rz
    1U,	// CMLEv8i8rz
    1U,	// CMLTv16i8rz
    1U,	// CMLTv1i64rz
    1U,	// CMLTv2i32rz
    1U,	// CMLTv2i64rz
    1U,	// CMLTv4i16rz
    1U,	// CMLTv4i32rz
    1U,	// CMLTv8i16rz
    1U,	// CMLTv8i8rz
    16U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    16U,	// CMTSTv2i32
    16U,	// CMTSTv2i64
    16U,	// CMTSTv4i16
    16U,	// CMTSTv4i32
    16U,	// CMTSTv8i16
    16U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    2U,	// CPYi16
    2U,	// CPYi32
    2U,	// CPYi64
    2U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    4608U,	// CSELWr
    4608U,	// CSELXr
    4608U,	// CSINCWr
    4608U,	// CSINCXr
    4608U,	// CSINVWr
    4608U,	// CSINVXr
    4608U,	// CSNEGWr
    4608U,	// CSNEGXr
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    2U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    2U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    2U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    2U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    2U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    2U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    2U,	// DUPv8i8lane
    0U,	// EONWrr
    64U,	// EONWrs
    0U,	// EONXrr
    64U,	// EONXrs
    96U,	// EORWri
    0U,	// EORWrr
    64U,	// EORWrs
    112U,	// EORXri
    0U,	// EORXrr
    64U,	// EORXrs
    16U,	// EORv16i8
    16U,	// EORv8i8
    0U,	// ERET
    8704U,	// EXTRWrri
    8704U,	// EXTRXrri
    8720U,	// EXTv16i8
    8720U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD32
    0U,	// FABD64
    16U,	// FABDv2f32
    16U,	// FABDv2f64
    16U,	// FABDv4f32
    0U,	// FABSDr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f32
    0U,	// FACGE32
    0U,	// FACGE64
    16U,	// FACGEv2f32
    16U,	// FACGEv2f64
    16U,	// FACGEv4f32
    0U,	// FACGT32
    0U,	// FACGT64
    16U,	// FACGTv2f32
    16U,	// FACGTv2f64
    16U,	// FACGTv4f32
    0U,	// FADDDrr
    16U,	// FADDPv2f32
    16U,	// FADDPv2f64
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    16U,	// FADDPv4f32
    0U,	// FADDSrr
    16U,	// FADDv2f32
    16U,	// FADDv2f64
    16U,	// FADDv4f32
    4608U,	// FCCMPDrr
    4608U,	// FCCMPEDrr
    4608U,	// FCCMPESrr
    4608U,	// FCCMPSrr
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    2U,	// FCMEQv1i32rz
    2U,	// FCMEQv1i64rz
    16U,	// FCMEQv2f32
    16U,	// FCMEQv2f64
    2U,	// FCMEQv2i32rz
    2U,	// FCMEQv2i64rz
    16U,	// FCMEQv4f32
    2U,	// FCMEQv4i32rz
    0U,	// FCMGE32
    0U,	// FCMGE64
    2U,	// FCMGEv1i32rz
    2U,	// FCMGEv1i64rz
    16U,	// FCMGEv2f32
    16U,	// FCMGEv2f64
    2U,	// FCMGEv2i32rz
    2U,	// FCMGEv2i64rz
    16U,	// FCMGEv4f32
    2U,	// FCMGEv4i32rz
    0U,	// FCMGT32
    0U,	// FCMGT64
    2U,	// FCMGTv1i32rz
    2U,	// FCMGTv1i64rz
    16U,	// FCMGTv2f32
    16U,	// FCMGTv2f64
    2U,	// FCMGTv2i32rz
    2U,	// FCMGTv2i64rz
    16U,	// FCMGTv4f32
    2U,	// FCMGTv4i32rz
    2U,	// FCMLEv1i32rz
    2U,	// FCMLEv1i64rz
    2U,	// FCMLEv2i32rz
    2U,	// FCMLEv2i64rz
    2U,	// FCMLEv4i32rz
    2U,	// FCMLTv1i32rz
    2U,	// FCMLTv1i64rz
    2U,	// FCMLTv2i32rz
    2U,	// FCMLTv2i64rz
    2U,	// FCMLTv4i32rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    4608U,	// FCSELDrrr
    4608U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f32
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f32
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    3U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    3U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f32
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f32
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f32
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f32
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    4U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f32
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f32
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    4U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZS_IntSWDri
    0U,	// FCVTZS_IntSWSri
    0U,	// FCVTZS_IntSXDri
    0U,	// FCVTZS_IntSXSri
    0U,	// FCVTZS_IntUWDr
    0U,	// FCVTZS_IntUWSr
    0U,	// FCVTZS_IntUXDr
    0U,	// FCVTZS_IntUXSr
    0U,	// FCVTZS_Intv2f32
    0U,	// FCVTZS_Intv2f64
    0U,	// FCVTZS_Intv4f32
    0U,	// FCVTZSd
    0U,	// FCVTZSs
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZU_IntSWDri
    0U,	// FCVTZU_IntSWSri
    0U,	// FCVTZU_IntSXDri
    0U,	// FCVTZU_IntSXSri
    0U,	// FCVTZU_IntUWDr
    0U,	// FCVTZU_IntUWSr
    0U,	// FCVTZU_IntUXDr
    0U,	// FCVTZU_IntUXSr
    0U,	// FCVTZU_Intv2f32
    0U,	// FCVTZU_Intv2f64
    0U,	// FCVTZU_Intv4f32
    0U,	// FCVTZUd
    0U,	// FCVTZUs
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i32_shift
    0U,	// FDIVDrr
    0U,	// FDIVSrr
    16U,	// FDIVv2f32
    16U,	// FDIVv2f64
    16U,	// FDIVv4f32
    8704U,	// FMADDDrrr
    8704U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXNMDrr
    16U,	// FMAXNMPv2f32
    16U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    16U,	// FMAXNMPv4f32
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i32v
    16U,	// FMAXNMv2f32
    16U,	// FMAXNMv2f64
    16U,	// FMAXNMv4f32
    16U,	// FMAXPv2f32
    16U,	// FMAXPv2f64
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    16U,	// FMAXPv4f32
    0U,	// FMAXSrr
    0U,	// FMAXVv4i32v
    16U,	// FMAXv2f32
    16U,	// FMAXv2f64
    16U,	// FMAXv4f32
    0U,	// FMINDrr
    0U,	// FMINNMDrr
    16U,	// FMINNMPv2f32
    16U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    16U,	// FMINNMPv4f32
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i32v
    16U,	// FMINNMv2f32
    16U,	// FMINNMv2f64
    16U,	// FMINNMv4f32
    16U,	// FMINPv2f32
    16U,	// FMINPv2f64
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    16U,	// FMINPv4f32
    0U,	// FMINSrr
    0U,	// FMINVv4i32v
    16U,	// FMINv2f32
    16U,	// FMINv2f64
    16U,	// FMINv4f32
    1056U,	// FMLAv1i32_indexed
    1056U,	// FMLAv1i64_indexed
    32U,	// FMLAv2f32
    32U,	// FMLAv2f64
    1056U,	// FMLAv2i32_indexed
    1056U,	// FMLAv2i64_indexed
    32U,	// FMLAv4f32
    1056U,	// FMLAv4i32_indexed
    1056U,	// FMLSv1i32_indexed
    1056U,	// FMLSv1i64_indexed
    32U,	// FMLSv2f32
    32U,	// FMLSv2f64
    1056U,	// FMLSv2i32_indexed
    1056U,	// FMLSv2i64_indexed
    32U,	// FMLSv4f32
    1056U,	// FMLSv4i32_indexed
    0U,	// FMOVD0
    2U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f32_ns
    8704U,	// FMSUBDrrr
    8704U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULSrr
    0U,	// FMULX32
    0U,	// FMULX64
    1296U,	// FMULXv1i32_indexed
    1296U,	// FMULXv1i64_indexed
    16U,	// FMULXv2f32
    16U,	// FMULXv2f64
    1296U,	// FMULXv2i32_indexed
    1296U,	// FMULXv2i64_indexed
    16U,	// FMULXv4f32
    1296U,	// FMULXv4i32_indexed
    1296U,	// FMULv1i32_indexed
    1296U,	// FMULv1i64_indexed
    16U,	// FMULv2f32
    16U,	// FMULv2f64
    1296U,	// FMULv2i32_indexed
    1296U,	// FMULv2i64_indexed
    16U,	// FMULv4f32
    1296U,	// FMULv4i32_indexed
    0U,	// FNEGDr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f32
    8704U,	// FNMADDDrrr
    8704U,	// FNMADDSrrr
    8704U,	// FNMSUBDrrr
    8704U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f32
    0U,	// FRECPS32
    0U,	// FRECPS64
    16U,	// FRECPSv2f32
    16U,	// FRECPSv2f64
    16U,	// FRECPSv4f32
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f32
    0U,	// FRINTIDr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f32
    0U,	// FRINTMDr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f32
    0U,	// FRINTNDr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f32
    0U,	// FRINTPDr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f32
    0U,	// FRINTXDr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f32
    0U,	// FRINTZDr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f32
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    16U,	// FRSQRTSv2f32
    16U,	// FRSQRTSv2f64
    16U,	// FRSQRTSv4f32
    0U,	// FSQRTDr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f32
    0U,	// FSUBDrr
    0U,	// FSUBSrr
    16U,	// FSUBv2f32
    16U,	// FSUBv2f64
    16U,	// FSUBv4f32
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDALb
    0U,	// LDADDALd
    0U,	// LDADDALh
    0U,	// LDADDALs
    0U,	// LDADDAb
    0U,	// LDADDAd
    0U,	// LDADDAh
    0U,	// LDADDAs
    0U,	// LDADDLb
    0U,	// LDADDLd
    0U,	// LDADDLh
    0U,	// LDADDLs
    0U,	// LDADDb
    0U,	// LDADDd
    0U,	// LDADDh
    0U,	// LDADDs
    4U,	// LDARB
    4U,	// LDARH
    4U,	// LDARW
    4U,	// LDARX
    769U,	// LDAXPW
    769U,	// LDAXPX
    4U,	// LDAXRB
    4U,	// LDAXRH
    4U,	// LDAXRW
    4U,	// LDAXRX
    0U,	// LDCLRALb
    0U,	// LDCLRALd
    0U,	// LDCLRALh
    0U,	// LDCLRALs
    0U,	// LDCLRAb
    0U,	// LDCLRAd
    0U,	// LDCLRAh
    0U,	// LDCLRAs
    0U,	// LDCLRLb
    0U,	// LDCLRLd
    0U,	// LDCLRLh
    0U,	// LDCLRLs
    0U,	// LDCLRb
    0U,	// LDCLRd
    0U,	// LDCLRh
    0U,	// LDCLRs
    0U,	// LDEORALb
    0U,	// LDEORALd
    0U,	// LDEORALh
    0U,	// LDEORALs
    0U,	// LDEORAb
    0U,	// LDEORAd
    0U,	// LDEORAh
    0U,	// LDEORAs
    0U,	// LDEORLb
    0U,	// LDEORLd
    0U,	// LDEORLh
    0U,	// LDEORLs
    0U,	// LDEORb
    0U,	// LDEORd
    0U,	// LDEORh
    0U,	// LDEORs
    4U,	// LDLARB
    4U,	// LDLARH
    4U,	// LDLARW
    4U,	// LDLARX
    12801U,	// LDNPDi
    16897U,	// LDNPQi
    20993U,	// LDNPSi
    20993U,	// LDNPWi
    12801U,	// LDNPXi
    12801U,	// LDPDi
    26241U,	// LDPDpost
    156289U,	// LDPDpre
    16897U,	// LDPQi
    30337U,	// LDPQpost
    160385U,	// LDPQpre
    20993U,	// LDPSWi
    34433U,	// LDPSWpost
    164481U,	// LDPSWpre
    20993U,	// LDPSi
    34433U,	// LDPSpost
    164481U,	// LDPSpre
    20993U,	// LDPWi
    34433U,	// LDPWpost
    164481U,	// LDPWpre
    12801U,	// LDPXi
    26241U,	// LDPXpost
    156289U,	// LDPXpre
    5U,	// LDRBBpost
    1920U,	// LDRBBpre
    37376U,	// LDRBBroW
    41472U,	// LDRBBroX
    144U,	// LDRBBui
    5U,	// LDRBpost
    1920U,	// LDRBpre
    37376U,	// LDRBroW
    41472U,	// LDRBroX
    144U,	// LDRBui
    0U,	// LDRDl
    5U,	// LDRDpost
    1920U,	// LDRDpre
    45568U,	// LDRDroW
    49664U,	// LDRDroX
    160U,	// LDRDui
    5U,	// LDRHHpost
    1920U,	// LDRHHpre
    53760U,	// LDRHHroW
    57856U,	// LDRHHroX
    176U,	// LDRHHui
    5U,	// LDRHpost
    1920U,	// LDRHpre
    53760U,	// LDRHroW
    57856U,	// LDRHroX
    176U,	// LDRHui
    0U,	// LDRQl
    5U,	// LDRQpost
    1920U,	// LDRQpre
    61952U,	// LDRQroW
    66048U,	// LDRQroX
    192U,	// LDRQui
    5U,	// LDRSBWpost
    1920U,	// LDRSBWpre
    37376U,	// LDRSBWroW
    41472U,	// LDRSBWroX
    144U,	// LDRSBWui
    5U,	// LDRSBXpost
    1920U,	// LDRSBXpre
    37376U,	// LDRSBXroW
    41472U,	// LDRSBXroX
    144U,	// LDRSBXui
    5U,	// LDRSHWpost
    1920U,	// LDRSHWpre
    53760U,	// LDRSHWroW
    57856U,	// LDRSHWroX
    176U,	// LDRSHWui
    5U,	// LDRSHXpost
    1920U,	// LDRSHXpre
    53760U,	// LDRSHXroW
    57856U,	// LDRSHXroX
    176U,	// LDRSHXui
    0U,	// LDRSWl
    5U,	// LDRSWpost
    1920U,	// LDRSWpre
    70144U,	// LDRSWroW
    74240U,	// LDRSWroX
    208U,	// LDRSWui
    0U,	// LDRSl
    5U,	// LDRSpost
    1920U,	// LDRSpre
    70144U,	// LDRSroW
    74240U,	// LDRSroX
    208U,	// LDRSui
    0U,	// LDRWl
    5U,	// LDRWpost
    1920U,	// LDRWpre
    70144U,	// LDRWroW
    74240U,	// LDRWroX
    208U,	// LDRWui
    0U,	// LDRXl
    5U,	// LDRXpost
    1920U,	// LDRXpre
    45568U,	// LDRXroW
    49664U,	// LDRXroX
    160U,	// LDRXui
    0U,	// LDSETALb
    0U,	// LDSETALd
    0U,	// LDSETALh
    0U,	// LDSETALs
    0U,	// LDSETAb
    0U,	// LDSETAd
    0U,	// LDSETAh
    0U,	// LDSETAs
    0U,	// LDSETLb
    0U,	// LDSETLd
    0U,	// LDSETLh
    0U,	// LDSETLs
    0U,	// LDSETb
    0U,	// LDSETd
    0U,	// LDSETh
    0U,	// LDSETs
    0U,	// LDSMAXALb
    0U,	// LDSMAXALd
    0U,	// LDSMAXALh
    0U,	// LDSMAXALs
    0U,	// LDSMAXAb
    0U,	// LDSMAXAd
    0U,	// LDSMAXAh
    0U,	// LDSMAXAs
    0U,	// LDSMAXLb
    0U,	// LDSMAXLd
    0U,	// LDSMAXLh
    0U,	// LDSMAXLs
    0U,	// LDSMAXb
    0U,	// LDSMAXd
    0U,	// LDSMAXh
    0U,	// LDSMAXs
    0U,	// LDSMINALb
    0U,	// LDSMINALd
    0U,	// LDSMINALh
    0U,	// LDSMINALs
    0U,	// LDSMINAb
    0U,	// LDSMINAd
    0U,	// LDSMINAh
    0U,	// LDSMINAs
    0U,	// LDSMINLb
    0U,	// LDSMINLd
    0U,	// LDSMINLh
    0U,	// LDSMINLs
    0U,	// LDSMINb
    0U,	// LDSMINd
    0U,	// LDSMINh
    0U,	// LDSMINs
    768U,	// LDTRBi
    768U,	// LDTRHi
    768U,	// LDTRSBWi
    768U,	// LDTRSBXi
    768U,	// LDTRSHWi
    768U,	// LDTRSHXi
    768U,	// LDTRSWi
    768U,	// LDTRWi
    768U,	// LDTRXi
    0U,	// LDUMAXALb
    0U,	// LDUMAXALd
    0U,	// LDUMAXALh
    0U,	// LDUMAXALs
    0U,	// LDUMAXAb
    0U,	// LDUMAXAd
    0U,	// LDUMAXAh
    0U,	// LDUMAXAs
    0U,	// LDUMAXLb
    0U,	// LDUMAXLd
    0U,	// LDUMAXLh
    0U,	// LDUMAXLs
    0U,	// LDUMAXb
    0U,	// LDUMAXd
    0U,	// LDUMAXh
    0U,	// LDUMAXs
    0U,	// LDUMINALb
    0U,	// LDUMINALd
    0U,	// LDUMINALh
    0U,	// LDUMINALs
    0U,	// LDUMINAb
    0U,	// LDUMINAd
    0U,	// LDUMINAh
    0U,	// LDUMINAs
    0U,	// LDUMINLb
    0U,	// LDUMINLd
    0U,	// LDUMINLh
    0U,	// LDUMINLs
    0U,	// LDUMINb
    0U,	// LDUMINd
    0U,	// LDUMINh
    0U,	// LDUMINs
    768U,	// LDURBBi
    768U,	// LDURBi
    768U,	// LDURDi
    768U,	// LDURHHi
    768U,	// LDURHi
    768U,	// LDURQi
    768U,	// LDURSBWi
    768U,	// LDURSBXi
    768U,	// LDURSHWi
    768U,	// LDURSHXi
    768U,	// LDURSWi
    768U,	// LDURSi
    768U,	// LDURWi
    768U,	// LDURXi
    769U,	// LDXPW
    769U,	// LDXPX
    4U,	// LDXRB
    4U,	// LDXRH
    4U,	// LDXRW
    4U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    8704U,	// MADDWrrr
    8704U,	// MADDXrrr
    32U,	// MLAv16i8
    32U,	// MLAv2i32
    1056U,	// MLAv2i32_indexed
    32U,	// MLAv4i16
    1056U,	// MLAv4i16_indexed
    32U,	// MLAv4i32
    1056U,	// MLAv4i32_indexed
    32U,	// MLAv8i16
    1056U,	// MLAv8i16_indexed
    32U,	// MLAv8i8
    32U,	// MLSv16i8
    32U,	// MLSv2i32
    1056U,	// MLSv2i32_indexed
    32U,	// MLSv4i16
    1056U,	// MLSv4i16_indexed
    32U,	// MLSv4i32
    1056U,	// MLSv4i32_indexed
    32U,	// MLSv8i16
    1056U,	// MLSv8i16_indexed
    32U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    5U,	// MOVIv2i32
    5U,	// MOVIv2s_msl
    5U,	// MOVIv4i16
    5U,	// MOVIv4i32
    5U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    5U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    5U,	// MOVNWi
    5U,	// MOVNXi
    5U,	// MOVZWi
    5U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstate
    8704U,	// MSUBWrrr
    8704U,	// MSUBXrrr
    16U,	// MULv16i8
    16U,	// MULv2i32
    1296U,	// MULv2i32_indexed
    16U,	// MULv4i16
    1296U,	// MULv4i16_indexed
    16U,	// MULv4i32
    1296U,	// MULv4i32_indexed
    16U,	// MULv8i16
    1296U,	// MULv8i16_indexed
    16U,	// MULv8i8
    5U,	// MVNIv2i32
    5U,	// MVNIv2s_msl
    5U,	// MVNIv4i16
    5U,	// MVNIv4i32
    5U,	// MVNIv4s_msl
    5U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    64U,	// ORNWrs
    0U,	// ORNXrr
    64U,	// ORNXrs
    16U,	// ORNv16i8
    16U,	// ORNv8i8
    96U,	// ORRWri
    0U,	// ORRWrr
    64U,	// ORRWrs
    112U,	// ORRXri
    0U,	// ORRXrr
    64U,	// ORRXrs
    16U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    16U,	// ORRv8i8
    16U,	// PMULLv16i8
    16U,	// PMULLv1i64
    16U,	// PMULLv2i64
    16U,	// PMULLv8i8
    16U,	// PMULv16i8
    16U,	// PMULv8i8
    0U,	// PRFMl
    45568U,	// PRFMroW
    49664U,	// PRFMroX
    160U,	// PRFMui
    768U,	// PRFUMi
    16U,	// RADDHNv2i64_v2i32
    32U,	// RADDHNv2i64_v4i32
    16U,	// RADDHNv4i32_v4i16
    32U,	// RADDHNv4i32_v8i16
    32U,	// RADDHNv8i16_v16i8
    16U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    128U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    128U,	// RSHRNv4i32_shift
    128U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    16U,	// RSUBHNv2i64_v2i32
    32U,	// RSUBHNv2i64_v4i32
    16U,	// RSUBHNv4i32_v4i16
    32U,	// RSUBHNv4i32_v8i16
    32U,	// RSUBHNv8i16_v16i8
    16U,	// RSUBHNv8i16_v8i8
    32U,	// SABALv16i8_v8i16
    32U,	// SABALv2i32_v2i64
    32U,	// SABALv4i16_v4i32
    32U,	// SABALv4i32_v2i64
    32U,	// SABALv8i16_v4i32
    32U,	// SABALv8i8_v8i16
    32U,	// SABAv16i8
    32U,	// SABAv2i32
    32U,	// SABAv4i16
    32U,	// SABAv4i32
    32U,	// SABAv8i16
    32U,	// SABAv8i8
    16U,	// SABDLv16i8_v8i16
    16U,	// SABDLv2i32_v2i64
    16U,	// SABDLv4i16_v4i32
    16U,	// SABDLv4i32_v2i64
    16U,	// SABDLv8i16_v4i32
    16U,	// SABDLv8i8_v8i16
    16U,	// SABDv16i8
    16U,	// SABDv2i32
    16U,	// SABDv4i16
    16U,	// SABDv4i32
    16U,	// SABDv8i16
    16U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    16U,	// SADDLv16i8_v8i16
    16U,	// SADDLv2i32_v2i64
    16U,	// SADDLv4i16_v4i32
    16U,	// SADDLv4i32_v2i64
    16U,	// SADDLv8i16_v4i32
    16U,	// SADDLv8i8_v8i16
    16U,	// SADDWv16i8_v8i16
    16U,	// SADDWv2i32_v2i64
    16U,	// SADDWv4i16_v4i32
    16U,	// SADDWv4i32_v2i64
    16U,	// SADDWv8i16_v4i32
    16U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    8704U,	// SBFMWri
    8704U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFs
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i32_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    0U,	// SDIV_IntWr
    0U,	// SDIV_IntXr
    32U,	// SHA1Crrr
    0U,	// SHA1Hrr
    32U,	// SHA1Mrrr
    32U,	// SHA1Prrr
    32U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    32U,	// SHA256H2rrr
    32U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    32U,	// SHA256SU1rrr
    16U,	// SHADDv16i8
    16U,	// SHADDv2i32
    16U,	// SHADDv4i16
    16U,	// SHADDv4i32
    16U,	// SHADDv8i16
    16U,	// SHADDv8i8
    6U,	// SHLLv16i8
    6U,	// SHLLv2i32
    7U,	// SHLLv4i16
    6U,	// SHLLv4i32
    7U,	// SHLLv8i16
    6U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    128U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    128U,	// SHRNv4i32_shift
    128U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    16U,	// SHSUBv16i8
    16U,	// SHSUBv2i32
    16U,	// SHSUBv4i16
    16U,	// SHSUBv4i32
    16U,	// SHSUBv8i16
    16U,	// SHSUBv8i8
    128U,	// SLId
    128U,	// SLIv16i8_shift
    128U,	// SLIv2i32_shift
    128U,	// SLIv2i64_shift
    128U,	// SLIv4i16_shift
    128U,	// SLIv4i32_shift
    128U,	// SLIv8i16_shift
    128U,	// SLIv8i8_shift
    8704U,	// SMADDLrrr
    16U,	// SMAXPv16i8
    16U,	// SMAXPv2i32
    16U,	// SMAXPv4i16
    16U,	// SMAXPv4i32
    16U,	// SMAXPv8i16
    16U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    16U,	// SMAXv16i8
    16U,	// SMAXv2i32
    16U,	// SMAXv4i16
    16U,	// SMAXv4i32
    16U,	// SMAXv8i16
    16U,	// SMAXv8i8
    0U,	// SMC
    16U,	// SMINPv16i8
    16U,	// SMINPv2i32
    16U,	// SMINPv4i16
    16U,	// SMINPv4i32
    16U,	// SMINPv8i16
    16U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    16U,	// SMINv16i8
    16U,	// SMINv2i32
    16U,	// SMINv4i16
    16U,	// SMINv4i32
    16U,	// SMINv8i16
    16U,	// SMINv8i8
    32U,	// SMLALv16i8_v8i16
    1056U,	// SMLALv2i32_indexed
    32U,	// SMLALv2i32_v2i64
    1056U,	// SMLALv4i16_indexed
    32U,	// SMLALv4i16_v4i32
    1056U,	// SMLALv4i32_indexed
    32U,	// SMLALv4i32_v2i64
    1056U,	// SMLALv8i16_indexed
    32U,	// SMLALv8i16_v4i32
    32U,	// SMLALv8i8_v8i16
    32U,	// SMLSLv16i8_v8i16
    1056U,	// SMLSLv2i32_indexed
    32U,	// SMLSLv2i32_v2i64
    1056U,	// SMLSLv4i16_indexed
    32U,	// SMLSLv4i16_v4i32
    1056U,	// SMLSLv4i32_indexed
    32U,	// SMLSLv4i32_v2i64
    1056U,	// SMLSLv8i16_indexed
    32U,	// SMLSLv8i16_v4i32
    32U,	// SMLSLv8i8_v8i16
    2U,	// SMOVvi16to32
    2U,	// SMOVvi16to64
    2U,	// SMOVvi32to64
    2U,	// SMOVvi8to32
    2U,	// SMOVvi8to64
    8704U,	// SMSUBLrrr
    0U,	// SMULHrr
    16U,	// SMULLv16i8_v8i16
    1296U,	// SMULLv2i32_indexed
    16U,	// SMULLv2i32_v2i64
    1296U,	// SMULLv4i16_indexed
    16U,	// SMULLv4i16_v4i32
    1296U,	// SMULLv4i32_indexed
    16U,	// SMULLv4i32_v2i64
    1296U,	// SMULLv8i16_indexed
    16U,	// SMULLv8i16_v4i32
    16U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    16U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    16U,	// SQADDv2i32
    16U,	// SQADDv2i64
    16U,	// SQADDv4i16
    16U,	// SQADDv4i32
    16U,	// SQADDv8i16
    16U,	// SQADDv8i8
    128U,	// SQDMLALi16
    128U,	// SQDMLALi32
    1056U,	// SQDMLALv1i32_indexed
    1056U,	// SQDMLALv1i64_indexed
    1056U,	// SQDMLALv2i32_indexed
    32U,	// SQDMLALv2i32_v2i64
    1056U,	// SQDMLALv4i16_indexed
    32U,	// SQDMLALv4i16_v4i32
    1056U,	// SQDMLALv4i32_indexed
    32U,	// SQDMLALv4i32_v2i64
    1056U,	// SQDMLALv8i16_indexed
    32U,	// SQDMLALv8i16_v4i32
    128U,	// SQDMLSLi16
    128U,	// SQDMLSLi32
    1056U,	// SQDMLSLv1i32_indexed
    1056U,	// SQDMLSLv1i64_indexed
    1056U,	// SQDMLSLv2i32_indexed
    32U,	// SQDMLSLv2i32_v2i64
    1056U,	// SQDMLSLv4i16_indexed
    32U,	// SQDMLSLv4i16_v4i32
    1056U,	// SQDMLSLv4i32_indexed
    32U,	// SQDMLSLv4i32_v2i64
    1056U,	// SQDMLSLv8i16_indexed
    32U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    1296U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    1296U,	// SQDMULHv1i32_indexed
    16U,	// SQDMULHv2i32
    1296U,	// SQDMULHv2i32_indexed
    16U,	// SQDMULHv4i16
    1296U,	// SQDMULHv4i16_indexed
    16U,	// SQDMULHv4i32
    1296U,	// SQDMULHv4i32_indexed
    16U,	// SQDMULHv8i16
    1296U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    1296U,	// SQDMULLv1i32_indexed
    1296U,	// SQDMULLv1i64_indexed
    1296U,	// SQDMULLv2i32_indexed
    16U,	// SQDMULLv2i32_v2i64
    1296U,	// SQDMULLv4i16_indexed
    16U,	// SQDMULLv4i16_v4i32
    1296U,	// SQDMULLv4i32_indexed
    16U,	// SQDMULLv4i32_v2i64
    1296U,	// SQDMULLv8i16_indexed
    16U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    1056U,	// SQRDMLAHi16_indexed
    1056U,	// SQRDMLAHi32_indexed
    128U,	// SQRDMLAHv1i16
    128U,	// SQRDMLAHv1i32
    32U,	// SQRDMLAHv2i32
    1056U,	// SQRDMLAHv2i32_indexed
    32U,	// SQRDMLAHv4i16
    1056U,	// SQRDMLAHv4i16_indexed
    32U,	// SQRDMLAHv4i32
    1056U,	// SQRDMLAHv4i32_indexed
    32U,	// SQRDMLAHv8i16
    1056U,	// SQRDMLAHv8i16_indexed
    1056U,	// SQRDMLSHi16_indexed
    1056U,	// SQRDMLSHi32_indexed
    128U,	// SQRDMLSHv1i16
    128U,	// SQRDMLSHv1i32
    32U,	// SQRDMLSHv2i32
    1056U,	// SQRDMLSHv2i32_indexed
    32U,	// SQRDMLSHv4i16
    1056U,	// SQRDMLSHv4i16_indexed
    32U,	// SQRDMLSHv4i32
    1056U,	// SQRDMLSHv4i32_indexed
    32U,	// SQRDMLSHv8i16
    1056U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    1296U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    1296U,	// SQRDMULHv1i32_indexed
    16U,	// SQRDMULHv2i32
    1296U,	// SQRDMULHv2i32_indexed
    16U,	// SQRDMULHv4i16
    1296U,	// SQRDMULHv4i16_indexed
    16U,	// SQRDMULHv4i32
    1296U,	// SQRDMULHv4i32_indexed
    16U,	// SQRDMULHv8i16
    1296U,	// SQRDMULHv8i16_indexed
    16U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    16U,	// SQRSHLv2i32
    16U,	// SQRSHLv2i64
    16U,	// SQRSHLv4i16
    16U,	// SQRSHLv4i32
    16U,	// SQRSHLv8i16
    16U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    128U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    128U,	// SQRSHRNv4i32_shift
    128U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    128U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    128U,	// SQRSHRUNv4i32_shift
    128U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    16U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    16U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    16U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    16U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    16U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    16U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    16U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    128U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    128U,	// SQSHRNv4i32_shift
    128U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    128U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    128U,	// SQSHRUNv4i32_shift
    128U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    16U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    16U,	// SQSUBv2i32
    16U,	// SQSUBv2i64
    16U,	// SQSUBv4i16
    16U,	// SQSUBv4i32
    16U,	// SQSUBv8i16
    16U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    16U,	// SRHADDv16i8
    16U,	// SRHADDv2i32
    16U,	// SRHADDv4i16
    16U,	// SRHADDv4i32
    16U,	// SRHADDv8i16
    16U,	// SRHADDv8i8
    128U,	// SRId
    128U,	// SRIv16i8_shift
    128U,	// SRIv2i32_shift
    128U,	// SRIv2i64_shift
    128U,	// SRIv4i16_shift
    128U,	// SRIv4i32_shift
    128U,	// SRIv8i16_shift
    128U,	// SRIv8i8_shift
    16U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    16U,	// SRSHLv2i32
    16U,	// SRSHLv2i64
    16U,	// SRSHLv4i16
    16U,	// SRSHLv4i32
    16U,	// SRSHLv8i16
    16U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    128U,	// SRSRAd
    128U,	// SRSRAv16i8_shift
    128U,	// SRSRAv2i32_shift
    128U,	// SRSRAv2i64_shift
    128U,	// SRSRAv4i16_shift
    128U,	// SRSRAv4i32_shift
    128U,	// SRSRAv8i16_shift
    128U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    16U,	// SSHLv16i8
    0U,	// SSHLv1i64
    16U,	// SSHLv2i32
    16U,	// SSHLv2i64
    16U,	// SSHLv4i16
    16U,	// SSHLv4i32
    16U,	// SSHLv8i16
    16U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    128U,	// SSRAd
    128U,	// SSRAv16i8_shift
    128U,	// SSRAv2i32_shift
    128U,	// SSRAv2i64_shift
    128U,	// SSRAv4i16_shift
    128U,	// SSRAv4i32_shift
    128U,	// SSRAv8i16_shift
    128U,	// SSRAv8i8_shift
    16U,	// SSUBLv16i8_v8i16
    16U,	// SSUBLv2i32_v2i64
    16U,	// SSUBLv4i16_v4i32
    16U,	// SSUBLv4i32_v2i64
    16U,	// SSUBLv8i16_v4i32
    16U,	// SSUBLv8i8_v8i16
    16U,	// SSUBWv16i8_v8i16
    16U,	// SSUBWv2i32_v2i64
    16U,	// SSUBWv4i16_v4i32
    16U,	// SSUBWv4i32_v2i64
    16U,	// SSUBWv8i16_v4i32
    16U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    4U,	// STLLRB
    4U,	// STLLRH
    4U,	// STLLRW
    4U,	// STLLRX
    4U,	// STLRB
    4U,	// STLRH
    4U,	// STLRW
    4U,	// STLRX
    2048U,	// STLXPW
    2048U,	// STLXPX
    769U,	// STLXRB
    769U,	// STLXRH
    769U,	// STLXRW
    769U,	// STLXRX
    12801U,	// STNPDi
    16897U,	// STNPQi
    20993U,	// STNPSi
    20993U,	// STNPWi
    12801U,	// STNPXi
    12801U,	// STPDi
    26241U,	// STPDpost
    156289U,	// STPDpre
    16897U,	// STPQi
    30337U,	// STPQpost
    160385U,	// STPQpre
    20993U,	// STPSi
    34433U,	// STPSpost
    164481U,	// STPSpre
    20993U,	// STPWi
    34433U,	// STPWpost
    164481U,	// STPWpre
    12801U,	// STPXi
    26241U,	// STPXpost
    156289U,	// STPXpre
    5U,	// STRBBpost
    1920U,	// STRBBpre
    37376U,	// STRBBroW
    41472U,	// STRBBroX
    144U,	// STRBBui
    5U,	// STRBpost
    1920U,	// STRBpre
    37376U,	// STRBroW
    41472U,	// STRBroX
    144U,	// STRBui
    5U,	// STRDpost
    1920U,	// STRDpre
    45568U,	// STRDroW
    49664U,	// STRDroX
    160U,	// STRDui
    5U,	// STRHHpost
    1920U,	// STRHHpre
    53760U,	// STRHHroW
    57856U,	// STRHHroX
    176U,	// STRHHui
    5U,	// STRHpost
    1920U,	// STRHpre
    53760U,	// STRHroW
    57856U,	// STRHroX
    176U,	// STRHui
    5U,	// STRQpost
    1920U,	// STRQpre
    61952U,	// STRQroW
    66048U,	// STRQroX
    192U,	// STRQui
    5U,	// STRSpost
    1920U,	// STRSpre
    70144U,	// STRSroW
    74240U,	// STRSroX
    208U,	// STRSui
    5U,	// STRWpost
    1920U,	// STRWpre
    70144U,	// STRWroW
    74240U,	// STRWroX
    208U,	// STRWui
    5U,	// STRXpost
    1920U,	// STRXpre
    45568U,	// STRXroW
    49664U,	// STRXroX
    160U,	// STRXui
    768U,	// STTRBi
    768U,	// STTRHi
    768U,	// STTRWi
    768U,	// STTRXi
    768U,	// STURBBi
    768U,	// STURBi
    768U,	// STURDi
    768U,	// STURHHi
    768U,	// STURHi
    768U,	// STURQi
    768U,	// STURSi
    768U,	// STURWi
    768U,	// STURXi
    2048U,	// STXPW
    2048U,	// STXPX
    769U,	// STXRB
    769U,	// STXRH
    769U,	// STXRW
    769U,	// STXRX
    16U,	// SUBHNv2i64_v2i32
    32U,	// SUBHNv2i64_v4i32
    16U,	// SUBHNv4i32_v4i16
    32U,	// SUBHNv4i32_v8i16
    32U,	// SUBHNv8i16_v16i8
    16U,	// SUBHNv8i16_v8i8
    48U,	// SUBSWri
    0U,	// SUBSWrr
    64U,	// SUBSWrs
    80U,	// SUBSWrx
    48U,	// SUBSXri
    0U,	// SUBSXrr
    64U,	// SUBSXrs
    80U,	// SUBSXrx
    256U,	// SUBSXrx64
    48U,	// SUBWri
    0U,	// SUBWrr
    64U,	// SUBWrs
    80U,	// SUBWrx
    48U,	// SUBXri
    0U,	// SUBXrr
    64U,	// SUBXrs
    80U,	// SUBXrx
    256U,	// SUBXrx64
    16U,	// SUBv16i8
    0U,	// SUBv1i64
    16U,	// SUBv2i32
    16U,	// SUBv2i64
    16U,	// SUBv4i16
    16U,	// SUBv4i32
    16U,	// SUBv8i16
    16U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPALb
    0U,	// SWPALd
    0U,	// SWPALh
    0U,	// SWPALs
    0U,	// SWPAb
    0U,	// SWPAd
    0U,	// SWPAh
    0U,	// SWPAs
    0U,	// SWPLb
    0U,	// SWPLd
    0U,	// SWPLh
    0U,	// SWPLs
    0U,	// SWPb
    0U,	// SWPd
    0U,	// SWPh
    0U,	// SWPs
    224U,	// SYSLxt
    0U,	// SYSxt
    7U,	// TBLv16i8Four
    7U,	// TBLv16i8One
    7U,	// TBLv16i8Three
    7U,	// TBLv16i8Two
    8U,	// TBLv8i8Four
    8U,	// TBLv8i8One
    8U,	// TBLv8i8Three
    8U,	// TBLv8i8Two
    240U,	// TBNZW
    240U,	// TBNZX
    7U,	// TBXv16i8Four
    7U,	// TBXv16i8One
    7U,	// TBXv16i8Three
    7U,	// TBXv16i8Two
    8U,	// TBXv8i8Four
    8U,	// TBXv8i8One
    8U,	// TBXv8i8Three
    8U,	// TBXv8i8Two
    240U,	// TBZW
    240U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    16U,	// TRN1v16i8
    16U,	// TRN1v2i32
    16U,	// TRN1v2i64
    16U,	// TRN1v4i16
    16U,	// TRN1v4i32
    16U,	// TRN1v8i16
    16U,	// TRN1v8i8
    16U,	// TRN2v16i8
    16U,	// TRN2v2i32
    16U,	// TRN2v2i64
    16U,	// TRN2v4i16
    16U,	// TRN2v4i32
    16U,	// TRN2v8i16
    16U,	// TRN2v8i8
    32U,	// UABALv16i8_v8i16
    32U,	// UABALv2i32_v2i64
    32U,	// UABALv4i16_v4i32
    32U,	// UABALv4i32_v2i64
    32U,	// UABALv8i16_v4i32
    32U,	// UABALv8i8_v8i16
    32U,	// UABAv16i8
    32U,	// UABAv2i32
    32U,	// UABAv4i16
    32U,	// UABAv4i32
    32U,	// UABAv8i16
    32U,	// UABAv8i8
    16U,	// UABDLv16i8_v8i16
    16U,	// UABDLv2i32_v2i64
    16U,	// UABDLv4i16_v4i32
    16U,	// UABDLv4i32_v2i64
    16U,	// UABDLv8i16_v4i32
    16U,	// UABDLv8i8_v8i16
    16U,	// UABDv16i8
    16U,	// UABDv2i32
    16U,	// UABDv4i16
    16U,	// UABDv4i32
    16U,	// UABDv8i16
    16U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    16U,	// UADDLv16i8_v8i16
    16U,	// UADDLv2i32_v2i64
    16U,	// UADDLv4i16_v4i32
    16U,	// UADDLv4i32_v2i64
    16U,	// UADDLv8i16_v4i32
    16U,	// UADDLv8i8_v8i16
    16U,	// UADDWv16i8_v8i16
    16U,	// UADDWv2i32_v2i64
    16U,	// UADDWv4i16_v4i32
    16U,	// UADDWv4i32_v2i64
    16U,	// UADDWv8i16_v4i32
    16U,	// UADDWv8i8_v8i16
    8704U,	// UBFMWri
    8704U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFs
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i32_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    0U,	// UDIV_IntWr
    0U,	// UDIV_IntXr
    16U,	// UHADDv16i8
    16U,	// UHADDv2i32
    16U,	// UHADDv4i16
    16U,	// UHADDv4i32
    16U,	// UHADDv8i16
    16U,	// UHADDv8i8
    16U,	// UHSUBv16i8
    16U,	// UHSUBv2i32
    16U,	// UHSUBv4i16
    16U,	// UHSUBv4i32
    16U,	// UHSUBv8i16
    16U,	// UHSUBv8i8
    8704U,	// UMADDLrrr
    16U,	// UMAXPv16i8
    16U,	// UMAXPv2i32
    16U,	// UMAXPv4i16
    16U,	// UMAXPv4i32
    16U,	// UMAXPv8i16
    16U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    16U,	// UMAXv16i8
    16U,	// UMAXv2i32
    16U,	// UMAXv4i16
    16U,	// UMAXv4i32
    16U,	// UMAXv8i16
    16U,	// UMAXv8i8
    16U,	// UMINPv16i8
    16U,	// UMINPv2i32
    16U,	// UMINPv4i16
    16U,	// UMINPv4i32
    16U,	// UMINPv8i16
    16U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    16U,	// UMINv16i8
    16U,	// UMINv2i32
    16U,	// UMINv4i16
    16U,	// UMINv4i32
    16U,	// UMINv8i16
    16U,	// UMINv8i8
    32U,	// UMLALv16i8_v8i16
    1056U,	// UMLALv2i32_indexed
    32U,	// UMLALv2i32_v2i64
    1056U,	// UMLALv4i16_indexed
    32U,	// UMLALv4i16_v4i32
    1056U,	// UMLALv4i32_indexed
    32U,	// UMLALv4i32_v2i64
    1056U,	// UMLALv8i16_indexed
    32U,	// UMLALv8i16_v4i32
    32U,	// UMLALv8i8_v8i16
    32U,	// UMLSLv16i8_v8i16
    1056U,	// UMLSLv2i32_indexed
    32U,	// UMLSLv2i32_v2i64
    1056U,	// UMLSLv4i16_indexed
    32U,	// UMLSLv4i16_v4i32
    1056U,	// UMLSLv4i32_indexed
    32U,	// UMLSLv4i32_v2i64
    1056U,	// UMLSLv8i16_indexed
    32U,	// UMLSLv8i16_v4i32
    32U,	// UMLSLv8i8_v8i16
    2U,	// UMOVvi16
    2U,	// UMOVvi32
    2U,	// UMOVvi64
    2U,	// UMOVvi8
    8704U,	// UMSUBLrrr
    0U,	// UMULHrr
    16U,	// UMULLv16i8_v8i16
    1296U,	// UMULLv2i32_indexed
    16U,	// UMULLv2i32_v2i64
    1296U,	// UMULLv4i16_indexed
    16U,	// UMULLv4i16_v4i32
    1296U,	// UMULLv4i32_indexed
    16U,	// UMULLv4i32_v2i64
    1296U,	// UMULLv8i16_indexed
    16U,	// UMULLv8i16_v4i32
    16U,	// UMULLv8i8_v8i16
    16U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    16U,	// UQADDv2i32
    16U,	// UQADDv2i64
    16U,	// UQADDv4i16
    16U,	// UQADDv4i32
    16U,	// UQADDv8i16
    16U,	// UQADDv8i8
    16U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    16U,	// UQRSHLv2i32
    16U,	// UQRSHLv2i64
    16U,	// UQRSHLv4i16
    16U,	// UQRSHLv4i32
    16U,	// UQRSHLv8i16
    16U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    128U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    128U,	// UQRSHRNv4i32_shift
    128U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    16U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    16U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    16U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    16U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    16U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    16U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    16U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    128U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    128U,	// UQSHRNv4i32_shift
    128U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    16U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    16U,	// UQSUBv2i32
    16U,	// UQSUBv2i64
    16U,	// UQSUBv4i16
    16U,	// UQSUBv4i32
    16U,	// UQSUBv8i16
    16U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    16U,	// URHADDv16i8
    16U,	// URHADDv2i32
    16U,	// URHADDv4i16
    16U,	// URHADDv4i32
    16U,	// URHADDv8i16
    16U,	// URHADDv8i8
    16U,	// URSHLv16i8
    0U,	// URSHLv1i64
    16U,	// URSHLv2i32
    16U,	// URSHLv2i64
    16U,	// URSHLv4i16
    16U,	// URSHLv4i32
    16U,	// URSHLv8i16
    16U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    128U,	// URSRAd
    128U,	// URSRAv16i8_shift
    128U,	// URSRAv2i32_shift
    128U,	// URSRAv2i64_shift
    128U,	// URSRAv4i16_shift
    128U,	// URSRAv4i32_shift
    128U,	// URSRAv8i16_shift
    128U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    16U,	// USHLv16i8
    0U,	// USHLv1i64
    16U,	// USHLv2i32
    16U,	// USHLv2i64
    16U,	// USHLv4i16
    16U,	// USHLv4i32
    16U,	// USHLv8i16
    16U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    128U,	// USRAd
    128U,	// USRAv16i8_shift
    128U,	// USRAv2i32_shift
    128U,	// USRAv2i64_shift
    128U,	// USRAv4i16_shift
    128U,	// USRAv4i32_shift
    128U,	// USRAv8i16_shift
    128U,	// USRAv8i8_shift
    16U,	// USUBLv16i8_v8i16
    16U,	// USUBLv2i32_v2i64
    16U,	// USUBLv4i16_v4i32
    16U,	// USUBLv4i32_v2i64
    16U,	// USUBLv8i16_v4i32
    16U,	// USUBLv8i8_v8i16
    16U,	// USUBWv16i8_v8i16
    16U,	// USUBWv2i32_v2i64
    16U,	// USUBWv4i16_v4i32
    16U,	// USUBWv4i32_v2i64
    16U,	// USUBWv8i16_v4i32
    16U,	// USUBWv8i8_v8i16
    16U,	// UZP1v16i8
    16U,	// UZP1v2i32
    16U,	// UZP1v2i64
    16U,	// UZP1v4i16
    16U,	// UZP1v4i32
    16U,	// UZP1v8i16
    16U,	// UZP1v8i8
    16U,	// UZP2v16i8
    16U,	// UZP2v2i32
    16U,	// UZP2v2i64
    16U,	// UZP2v4i16
    16U,	// UZP2v4i32
    16U,	// UZP2v8i16
    16U,	// UZP2v8i8
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    16U,	// ZIP1v16i8
    16U,	// ZIP1v2i32
    16U,	// ZIP1v2i64
    16U,	// ZIP1v4i16
    16U,	// ZIP1v4i32
    16U,	// ZIP1v8i16
    16U,	// ZIP1v8i8
    16U,	// ZIP2v16i8
    16U,	// ZIP2v2i32
    16U,	// ZIP2v2i64
    16U,	// ZIP2v4i16
    16U,	// ZIP2v4i32
    16U,	// ZIP2v8i16
    16U,	// ZIP2v8i8
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ 'l', 'd', '1', 9, 0,
  /* 5 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 12 */ 's', 't', '1', 9, 0,
  /* 17 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 24 */ 'l', 'd', '2', 9, 0,
  /* 29 */ 'f', 'c', 'v', 't', 'l', '2', 9, 0,
  /* 37 */ 'f', 'c', 'v', 't', 'n', '2', 9, 0,
  /* 45 */ 'f', 'c', 'v', 't', 'x', 'n', '2', 9, 0,
  /* 54 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 61 */ 's', 't', '2', 9, 0,
  /* 66 */ 'l', 'd', '3', 9, 0,
  /* 71 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 78 */ 's', 't', '3', 9, 0,
  /* 83 */ 'l', 'd', '4', 9, 0,
  /* 88 */ 's', 't', '4', 9, 0,
  /* 93 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 100 */ 'l', 'd', 'a', 'd', 'd', 'a', 9, 0,
  /* 108 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 9, 0,
  /* 117 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 9, 0,
  /* 126 */ 'c', 'a', 's', 'p', 'a', 9, 0,
  /* 133 */ 's', 'w', 'p', 'a', 9, 0,
  /* 139 */ 'l', 'd', 'c', 'l', 'r', 'a', 9, 0,
  /* 147 */ 'l', 'd', 'e', 'o', 'r', 'a', 9, 0,
  /* 155 */ 's', 'r', 's', 'r', 'a', 9, 0,
  /* 162 */ 'u', 'r', 's', 'r', 'a', 9, 0,
  /* 169 */ 's', 's', 'r', 'a', 9, 0,
  /* 175 */ 'u', 's', 'r', 'a', 9, 0,
  /* 181 */ 'c', 'a', 's', 'a', 9, 0,
  /* 187 */ 'l', 'd', 's', 'e', 't', 'a', 9, 0,
  /* 195 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 203 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 9, 0,
  /* 212 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 9, 0,
  /* 221 */ 'i', 'n', 's', '.', 'b', 9, 0,
  /* 228 */ 's', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 236 */ 'u', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 244 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 252 */ 't', 'r', 'n', '1', '.', '1', '6', 'b', 9, 0,
  /* 262 */ 'z', 'i', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 272 */ 'u', 'z', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 282 */ 'r', 'e', 'v', '3', '2', '.', '1', '6', 'b', 9, 0,
  /* 293 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 306 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 319 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 332 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 345 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 359 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 373 */ 't', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 383 */ 's', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 395 */ 'u', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 407 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 421 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 436 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 449 */ 'z', 'i', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 459 */ 'u', 'z', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 469 */ 'r', 'e', 'v', '6', '4', '.', '1', '6', 'b', 9, 0,
  /* 480 */ 'r', 'e', 'v', '1', '6', '.', '1', '6', 'b', 9, 0,
  /* 491 */ 's', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 501 */ 'u', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 511 */ 'm', 'l', 'a', '.', '1', '6', 'b', 9, 0,
  /* 520 */ 's', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 531 */ 'u', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 542 */ 's', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 552 */ 'u', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 562 */ 's', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 573 */ 'u', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 584 */ 's', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 595 */ 'u', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 606 */ 'b', 'i', 'c', '.', '1', '6', 'b', 9, 0,
  /* 615 */ 'a', 'e', 's', 'i', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 627 */ 'a', 'e', 's', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 638 */ 's', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 648 */ 'u', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 658 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 670 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 682 */ 's', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 693 */ 'u', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 704 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 716 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 728 */ 'a', 'n', 'd', '.', '1', '6', 'b', 9, 0,
  /* 737 */ 'a', 'e', 's', 'd', '.', '1', '6', 'b', 9, 0,
  /* 747 */ 'c', 'm', 'g', 'e', '.', '1', '6', 'b', 9, 0,
  /* 757 */ 'c', 'm', 'l', 'e', '.', '1', '6', 'b', 9, 0,
  /* 767 */ 'a', 'e', 's', 'e', '.', '1', '6', 'b', 9, 0,
  /* 777 */ 'b', 'i', 'f', '.', '1', '6', 'b', 9, 0,
  /* 786 */ 's', 'q', 'n', 'e', 'g', '.', '1', '6', 'b', 9, 0,
  /* 797 */ 'c', 'm', 'h', 'i', '.', '1', '6', 'b', 9, 0,
  /* 807 */ 's', 'l', 'i', '.', '1', '6', 'b', 9, 0,
  /* 816 */ 's', 'r', 'i', '.', '1', '6', 'b', 9, 0,
  /* 825 */ 'm', 'o', 'v', 'i', '.', '1', '6', 'b', 9, 0,
  /* 835 */ 's', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 846 */ 'u', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 857 */ 's', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 869 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 881 */ 's', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 892 */ 'u', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 903 */ 's', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 913 */ 'u', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 923 */ 'b', 's', 'l', '.', '1', '6', 'b', 9, 0,
  /* 932 */ 'p', 'm', 'u', 'l', '.', '1', '6', 'b', 9, 0,
  /* 942 */ 's', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 952 */ 'u', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 962 */ 'o', 'r', 'n', '.', '1', '6', 'b', 9, 0,
  /* 971 */ 'a', 'd', 'd', 'p', '.', '1', '6', 'b', 9, 0,
  /* 981 */ 's', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 992 */ 'u', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1003 */ 'd', 'u', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1012 */ 's', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1023 */ 'u', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1034 */ 'c', 'm', 'e', 'q', '.', '1', '6', 'b', 9, 0,
  /* 1044 */ 's', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1055 */ 'u', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1066 */ 's', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1076 */ 'u', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1086 */ 'e', 'o', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1095 */ 'o', 'r', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1104 */ 's', 'q', 'a', 'b', 's', '.', '1', '6', 'b', 9, 0,
  /* 1115 */ 'c', 'm', 'h', 's', '.', '1', '6', 'b', 9, 0,
  /* 1125 */ 'c', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1134 */ 'm', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1143 */ 'c', 'm', 'g', 't', '.', '1', '6', 'b', 9, 0,
  /* 1153 */ 'r', 'b', 'i', 't', '.', '1', '6', 'b', 9, 0,
  /* 1163 */ 'c', 'm', 'l', 't', '.', '1', '6', 'b', 9, 0,
  /* 1173 */ 'c', 'n', 't', '.', '1', '6', 'b', 9, 0,
  /* 1182 */ 'n', 'o', 't', '.', '1', '6', 'b', 9, 0,
  /* 1191 */ 'c', 'm', 't', 's', 't', '.', '1', '6', 'b', 9, 0,
  /* 1202 */ 'e', 'x', 't', '.', '1', '6', 'b', 9, 0,
  /* 1211 */ 's', 'q', 's', 'h', 'l', 'u', '.', '1', '6', 'b', 9, 0,
  /* 1223 */ 'a', 'd', 'd', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1233 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1245 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1257 */ 's', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1268 */ 'u', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1279 */ 's', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1290 */ 'u', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1301 */ 's', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1311 */ 'u', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1321 */ 'c', 'l', 'z', '.', '1', '6', 'b', 9, 0,
  /* 1330 */ 't', 'r', 'n', '1', '.', '8', 'b', 9, 0,
  /* 1339 */ 'z', 'i', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1348 */ 'u', 'z', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1357 */ 'r', 'e', 'v', '3', '2', '.', '8', 'b', 9, 0,
  /* 1367 */ 't', 'r', 'n', '2', '.', '8', 'b', 9, 0,
  /* 1376 */ 'z', 'i', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1385 */ 'u', 'z', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1394 */ 'r', 'e', 'v', '6', '4', '.', '8', 'b', 9, 0,
  /* 1404 */ 'r', 'e', 'v', '1', '6', '.', '8', 'b', 9, 0,
  /* 1414 */ 's', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1423 */ 'u', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1432 */ 'm', 'l', 'a', '.', '8', 'b', 9, 0,
  /* 1440 */ 's', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1450 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1460 */ 's', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1469 */ 'u', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1478 */ 's', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1488 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1498 */ 's', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1508 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1518 */ 'b', 'i', 'c', '.', '8', 'b', 9, 0,
  /* 1526 */ 's', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1535 */ 'u', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1544 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1555 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1566 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1576 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1586 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1597 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1608 */ 'a', 'n', 'd', '.', '8', 'b', 9, 0,
  /* 1616 */ 'c', 'm', 'g', 'e', '.', '8', 'b', 9, 0,
  /* 1625 */ 'c', 'm', 'l', 'e', '.', '8', 'b', 9, 0,
  /* 1634 */ 'b', 'i', 'f', '.', '8', 'b', 9, 0,
  /* 1642 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'b', 9, 0,
  /* 1652 */ 'c', 'm', 'h', 'i', '.', '8', 'b', 9, 0,
  /* 1661 */ 's', 'l', 'i', '.', '8', 'b', 9, 0,
  /* 1669 */ 's', 'r', 'i', '.', '8', 'b', 9, 0,
  /* 1677 */ 'm', 'o', 'v', 'i', '.', '8', 'b', 9, 0,
  /* 1686 */ 's', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1696 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1706 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1717 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1728 */ 's', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1738 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1748 */ 's', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1757 */ 'u', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1766 */ 'b', 's', 'l', '.', '8', 'b', 9, 0,
  /* 1774 */ 'p', 'm', 'u', 'l', '.', '8', 'b', 9, 0,
  /* 1783 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1794 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1805 */ 's', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1814 */ 'u', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1823 */ 's', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1834 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1845 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1857 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1869 */ 'o', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1877 */ 's', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1887 */ 'u', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1897 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1909 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1922 */ 's', 'q', 'x', 't', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1933 */ 'a', 'd', 'd', 'p', '.', '8', 'b', 9, 0,
  /* 1942 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 1952 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 1962 */ 'd', 'u', 'p', '.', '8', 'b', 9, 0,
  /* 1970 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 1980 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 1990 */ 'c', 'm', 'e', 'q', '.', '8', 'b', 9, 0,
  /* 1999 */ 's', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2009 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2019 */ 's', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2028 */ 'u', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2037 */ 'e', 'o', 'r', '.', '8', 'b', 9, 0,
  /* 2045 */ 'o', 'r', 'r', '.', '8', 'b', 9, 0,
  /* 2053 */ 's', 'q', 'a', 'b', 's', '.', '8', 'b', 9, 0,
  /* 2063 */ 'c', 'm', 'h', 's', '.', '8', 'b', 9, 0,
  /* 2072 */ 'c', 'l', 's', '.', '8', 'b', 9, 0,
  /* 2080 */ 'm', 'l', 's', '.', '8', 'b', 9, 0,
  /* 2088 */ 'c', 'm', 'g', 't', '.', '8', 'b', 9, 0,
  /* 2097 */ 'r', 'b', 'i', 't', '.', '8', 'b', 9, 0,
  /* 2106 */ 'c', 'm', 'l', 't', '.', '8', 'b', 9, 0,
  /* 2115 */ 'c', 'n', 't', '.', '8', 'b', 9, 0,
  /* 2123 */ 'n', 'o', 't', '.', '8', 'b', 9, 0,
  /* 2131 */ 'c', 'm', 't', 's', 't', '.', '8', 'b', 9, 0,
  /* 2141 */ 'e', 'x', 't', '.', '8', 'b', 9, 0,
  /* 2149 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'b', 9, 0,
  /* 2160 */ 'a', 'd', 'd', 'v', '.', '8', 'b', 9, 0,
  /* 2169 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2180 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2191 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2201 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2211 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2221 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2231 */ 's', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2240 */ 'u', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2249 */ 'c', 'l', 'z', '.', '8', 'b', 9, 0,
  /* 2257 */ 'l', 'd', 'a', 'd', 'd', 'a', 'b', 9, 0,
  /* 2266 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 2276 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 2286 */ 's', 'w', 'p', 'a', 'b', 9, 0,
  /* 2293 */ 'l', 'd', 'c', 'l', 'r', 'a', 'b', 9, 0,
  /* 2302 */ 'l', 'd', 'e', 'o', 'r', 'a', 'b', 9, 0,
  /* 2311 */ 'c', 'a', 's', 'a', 'b', 9, 0,
  /* 2318 */ 'l', 'd', 's', 'e', 't', 'a', 'b', 9, 0,
  /* 2327 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 2337 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 2347 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 2356 */ 'l', 'd', 'a', 'd', 'd', 'b', 9, 0,
  /* 2364 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'b', 9, 0,
  /* 2374 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 2385 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 2396 */ 's', 'w', 'p', 'a', 'l', 'b', 9, 0,
  /* 2404 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'b', 9, 0,
  /* 2414 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'b', 9, 0,
  /* 2424 */ 'c', 'a', 's', 'a', 'l', 'b', 9, 0,
  /* 2432 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'b', 9, 0,
  /* 2442 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 2453 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 2464 */ 'l', 'd', 'a', 'd', 'd', 'l', 'b', 9, 0,
  /* 2473 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 2483 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 2493 */ 's', 'w', 'p', 'l', 'b', 9, 0,
  /* 2500 */ 'l', 'd', 'c', 'l', 'r', 'l', 'b', 9, 0,
  /* 2509 */ 'l', 'd', 'e', 'o', 'r', 'l', 'b', 9, 0,
  /* 2518 */ 'c', 'a', 's', 'l', 'b', 9, 0,
  /* 2525 */ 'l', 'd', 's', 'e', 't', 'l', 'b', 9, 0,
  /* 2534 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 2544 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 2554 */ 'd', 'm', 'b', 9, 0,
  /* 2559 */ 'l', 'd', 's', 'm', 'i', 'n', 'b', 9, 0,
  /* 2568 */ 'l', 'd', 'u', 'm', 'i', 'n', 'b', 9, 0,
  /* 2577 */ 's', 'w', 'p', 'b', 9, 0,
  /* 2583 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 2590 */ 'l', 'd', 'l', 'a', 'r', 'b', 9, 0,
  /* 2598 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 2604 */ 'l', 'd', 'c', 'l', 'r', 'b', 9, 0,
  /* 2612 */ 's', 't', 'l', 'l', 'r', 'b', 9, 0,
  /* 2620 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 2627 */ 'l', 'd', 'e', 'o', 'r', 'b', 9, 0,
  /* 2635 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 2642 */ 's', 't', 'r', 'b', 9, 0,
  /* 2648 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 2655 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 2662 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 2669 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 2677 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 2684 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 2692 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 2699 */ 'c', 'a', 's', 'b', 9, 0,
  /* 2705 */ 'd', 's', 'b', 9, 0,
  /* 2710 */ 'i', 's', 'b', 9, 0,
  /* 2715 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 2722 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 2730 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 2738 */ 'l', 'd', 's', 'e', 't', 'b', 9, 0,
  /* 2746 */ 'f', 's', 'u', 'b', 9, 0,
  /* 2752 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 2759 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 2767 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 2774 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 2781 */ 'l', 'd', 's', 'm', 'a', 'x', 'b', 9, 0,
  /* 2790 */ 'l', 'd', 'u', 'm', 'a', 'x', 'b', 9, 0,
  /* 2799 */ 's', 'b', 'c', 9, 0,
  /* 2804 */ 'a', 'd', 'c', 9, 0,
  /* 2809 */ 'b', 'i', 'c', 9, 0,
  /* 2814 */ 's', 'm', 'c', 9, 0,
  /* 2819 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 2826 */ 'h', 'v', 'c', 9, 0,
  /* 2831 */ 's', 'v', 'c', 9, 0,
  /* 2836 */ 'f', 'm', 'l', 'a', '.', 'd', 9, 0,
  /* 2844 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2852 */ 'f', 'm', 'l', 's', '.', 'd', 9, 0,
  /* 2860 */ 'i', 'n', 's', '.', 'd', 9, 0,
  /* 2867 */ 'f', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 2875 */ 'u', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 2883 */ 'f', 'm', 'u', 'l', 'x', '.', 'd', 9, 0,
  /* 2892 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2903 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2914 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2925 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2936 */ 't', 'r', 'n', '1', '.', '2', 'd', 9, 0,
  /* 2945 */ 'z', 'i', 'p', '1', '.', '2', 'd', 9, 0,
  /* 2954 */ 'u', 'z', 'p', '1', '.', '2', 'd', 9, 0,
  /* 2963 */ 's', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2974 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2985 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2998 */ 's', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3009 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3020 */ 's', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3031 */ 'u', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3042 */ 's', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3053 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3064 */ 's', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3075 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3086 */ 's', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3097 */ 'u', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3108 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3121 */ 's', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3132 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3143 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3156 */ 's', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3167 */ 'u', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3178 */ 't', 'r', 'n', '2', '.', '2', 'd', 9, 0,
  /* 3187 */ 'z', 'i', 'p', '2', '.', '2', 'd', 9, 0,
  /* 3196 */ 'u', 'z', 'p', '2', '.', '2', 'd', 9, 0,
  /* 3205 */ 's', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3216 */ 'u', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3227 */ 's', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3238 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3249 */ 'f', 'm', 'l', 'a', '.', '2', 'd', 9, 0,
  /* 3258 */ 's', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3268 */ 'u', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3278 */ 's', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3287 */ 'u', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3296 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 'd', 9, 0,
  /* 3307 */ 'f', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3316 */ 's', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3326 */ 'u', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3336 */ 'f', 'a', 'b', 'd', '.', '2', 'd', 9, 0,
  /* 3345 */ 'f', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3354 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3365 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3376 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 3386 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 3396 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 'd', 9, 0,
  /* 3406 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 'd', 9, 0,
  /* 3417 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 'd', 9, 0,
  /* 3429 */ 's', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 3439 */ 'u', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 3449 */ 'f', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3458 */ 's', 'q', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3468 */ 'c', 'm', 'h', 'i', '.', '2', 'd', 9, 0,
  /* 3477 */ 's', 'l', 'i', '.', '2', 'd', 9, 0,
  /* 3485 */ 's', 'r', 'i', '.', '2', 'd', 9, 0,
  /* 3493 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 'd', 9, 0,
  /* 3504 */ 'm', 'o', 'v', 'i', '.', '2', 'd', 9, 0,
  /* 3513 */ 's', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3523 */ 'u', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3533 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3545 */ 's', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3555 */ 'u', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3565 */ 's', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3575 */ 'u', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3585 */ 's', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3595 */ 'u', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3605 */ 's', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3615 */ 'u', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3625 */ 's', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3635 */ 'u', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3645 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3656 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3667 */ 's', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3677 */ 'u', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3687 */ 's', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3696 */ 'u', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3705 */ 's', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3715 */ 'u', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3725 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3737 */ 's', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3747 */ 'u', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3757 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3769 */ 's', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3779 */ 'u', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3789 */ 'f', 'm', 'u', 'l', '.', '2', 'd', 9, 0,
  /* 3798 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 3809 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 3820 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 'd', 9, 0,
  /* 3831 */ 'f', 'm', 'i', 'n', '.', '2', 'd', 9, 0,
  /* 3840 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 'd', 9, 0,
  /* 3851 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 'd', 9, 0,
  /* 3861 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3872 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3883 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3894 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3905 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 3917 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 3929 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 'd', 9, 0,
  /* 3939 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 'd', 9, 0,
  /* 3950 */ 'd', 'u', 'p', '.', '2', 'd', 9, 0,
  /* 3958 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 'd', 9, 0,
  /* 3968 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 'd', 9, 0,
  /* 3978 */ 's', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3988 */ 'u', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3998 */ 's', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4007 */ 'u', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4016 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 'd', 9, 0,
  /* 4027 */ 'f', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 4036 */ 's', 'q', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 4046 */ 'c', 'm', 'h', 's', '.', '2', 'd', 9, 0,
  /* 4055 */ 'f', 'm', 'l', 's', '.', '2', 'd', 9, 0,
  /* 4064 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 'd', 9, 0,
  /* 4075 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 'd', 9, 0,
  /* 4086 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 'd', 9, 0,
  /* 4097 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 'd', 9, 0,
  /* 4108 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 'd', 9, 0,
  /* 4120 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 'd', 9, 0,
  /* 4131 */ 'f', 'a', 'c', 'g', 't', '.', '2', 'd', 9, 0,
  /* 4141 */ 'f', 'c', 'm', 'g', 't', '.', '2', 'd', 9, 0,
  /* 4151 */ 'f', 'c', 'm', 'l', 't', '.', '2', 'd', 9, 0,
  /* 4161 */ 'f', 's', 'q', 'r', 't', '.', '2', 'd', 9, 0,
  /* 4171 */ 'c', 'm', 't', 's', 't', '.', '2', 'd', 9, 0,
  /* 4181 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 'd', 9, 0,
  /* 4192 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 'd', 9, 0,
  /* 4203 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 'd', 9, 0,
  /* 4214 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 'd', 9, 0,
  /* 4225 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 'd', 9, 0,
  /* 4236 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 'd', 9, 0,
  /* 4247 */ 'f', 'd', 'i', 'v', '.', '2', 'd', 9, 0,
  /* 4256 */ 'f', 'm', 'o', 'v', '.', '2', 'd', 9, 0,
  /* 4265 */ 's', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 4275 */ 'u', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 4285 */ 's', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 4295 */ 'u', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 4305 */ 'f', 'm', 'a', 'x', '.', '2', 'd', 9, 0,
  /* 4314 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 'd', 9, 0,
  /* 4324 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 'd', 9, 0,
  /* 4335 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 'd', 9, 0,
  /* 4346 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 4352 */ 'l', 'd', 'a', 'd', 'd', 9, 0,
  /* 4359 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 4365 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 4372 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 4380 */ 'u', 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 4388 */ 's', 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 4396 */ 'a', 'n', 'd', 9, 0,
  /* 4401 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 4408 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 4415 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 4422 */ 'f', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 4430 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 4438 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 4445 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 4454 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 4461 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 4468 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 4474 */ 's', 'q', 'n', 'e', 'g', 9, 0,
  /* 4481 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 4488 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', 'h', 9, 0,
  /* 4500 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4511 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4523 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', 'h', 9, 0,
  /* 4535 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 'h', 9, 0,
  /* 4546 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 'h', 9, 0,
  /* 4557 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 'h', 9, 0,
  /* 4568 */ 'i', 'n', 's', '.', 'h', 9, 0,
  /* 4575 */ 's', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4583 */ 'u', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4591 */ 's', 'h', 'a', '1', 'h', 9, 0,
  /* 4598 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 4606 */ 't', 'r', 'n', '1', '.', '4', 'h', 9, 0,
  /* 4615 */ 'z', 'i', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4624 */ 'u', 'z', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4633 */ 'r', 'e', 'v', '3', '2', '.', '4', 'h', 9, 0,
  /* 4643 */ 't', 'r', 'n', '2', '.', '4', 'h', 9, 0,
  /* 4652 */ 'z', 'i', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4661 */ 'u', 'z', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4670 */ 'r', 'e', 'v', '6', '4', '.', '4', 'h', 9, 0,
  /* 4680 */ 's', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4689 */ 'u', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4698 */ 'm', 'l', 'a', '.', '4', 'h', 9, 0,
  /* 4706 */ 's', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4716 */ 'u', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4726 */ 's', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4735 */ 'u', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4744 */ 's', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4754 */ 'u', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4764 */ 's', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4774 */ 'u', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4784 */ 'b', 'i', 'c', '.', '4', 'h', 9, 0,
  /* 4792 */ 's', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 4801 */ 'u', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 4810 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4821 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4832 */ 's', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4842 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4852 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4863 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4874 */ 'c', 'm', 'g', 'e', '.', '4', 'h', 9, 0,
  /* 4883 */ 'c', 'm', 'l', 'e', '.', '4', 'h', 9, 0,
  /* 4892 */ 's', 'q', 'n', 'e', 'g', '.', '4', 'h', 9, 0,
  /* 4902 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '4', 'h', 9, 0,
  /* 4915 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 4927 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 4940 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '4', 'h', 9, 0,
  /* 4953 */ 'c', 'm', 'h', 'i', '.', '4', 'h', 9, 0,
  /* 4962 */ 's', 'l', 'i', '.', '4', 'h', 9, 0,
  /* 4970 */ 'm', 'v', 'n', 'i', '.', '4', 'h', 9, 0,
  /* 4979 */ 's', 'r', 'i', '.', '4', 'h', 9, 0,
  /* 4987 */ 'm', 'o', 'v', 'i', '.', '4', 'h', 9, 0,
  /* 4996 */ 's', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5006 */ 'u', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5016 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5027 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5038 */ 's', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5048 */ 'u', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5058 */ 's', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5067 */ 'u', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5076 */ 'm', 'u', 'l', '.', '4', 'h', 9, 0,
  /* 5084 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 5095 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 5106 */ 's', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5115 */ 'u', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5124 */ 's', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5135 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5146 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5158 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5170 */ 's', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5180 */ 'u', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5190 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5202 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5215 */ 's', 'q', 'x', 't', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5226 */ 'a', 'd', 'd', 'p', '.', '4', 'h', 9, 0,
  /* 5235 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5246 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5257 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5268 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5279 */ 's', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5289 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5299 */ 'd', 'u', 'p', '.', '4', 'h', 9, 0,
  /* 5307 */ 's', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5317 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5327 */ 'c', 'm', 'e', 'q', '.', '4', 'h', 9, 0,
  /* 5336 */ 's', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5346 */ 'u', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5356 */ 's', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5365 */ 'u', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5374 */ 'o', 'r', 'r', '.', '4', 'h', 9, 0,
  /* 5382 */ 's', 'q', 'a', 'b', 's', '.', '4', 'h', 9, 0,
  /* 5392 */ 'c', 'm', 'h', 's', '.', '4', 'h', 9, 0,
  /* 5401 */ 'c', 'l', 's', '.', '4', 'h', 9, 0,
  /* 5409 */ 'm', 'l', 's', '.', '4', 'h', 9, 0,
  /* 5417 */ 'c', 'm', 'g', 't', '.', '4', 'h', 9, 0,
  /* 5426 */ 'c', 'm', 'l', 't', '.', '4', 'h', 9, 0,
  /* 5435 */ 'c', 'm', 't', 's', 't', '.', '4', 'h', 9, 0,
  /* 5445 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 'h', 9, 0,
  /* 5456 */ 'a', 'd', 'd', 'v', '.', '4', 'h', 9, 0,
  /* 5465 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 5476 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 5487 */ 's', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 5497 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 5507 */ 's', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 5517 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 5527 */ 's', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 5536 */ 'u', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 5545 */ 'c', 'l', 'z', '.', '4', 'h', 9, 0,
  /* 5553 */ 't', 'r', 'n', '1', '.', '8', 'h', 9, 0,
  /* 5562 */ 'z', 'i', 'p', '1', '.', '8', 'h', 9, 0,
  /* 5571 */ 'u', 'z', 'p', '1', '.', '8', 'h', 9, 0,
  /* 5580 */ 'r', 'e', 'v', '3', '2', '.', '8', 'h', 9, 0,
  /* 5590 */ 's', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5601 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5612 */ 's', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5623 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5634 */ 's', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5645 */ 'u', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5656 */ 's', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5667 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5678 */ 's', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5689 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5700 */ 's', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5711 */ 'u', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5722 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5733 */ 's', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5744 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5755 */ 's', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5766 */ 'u', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5777 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5789 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5801 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5813 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5825 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5838 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5851 */ 't', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5860 */ 's', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5871 */ 'u', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5882 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5895 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5909 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5921 */ 'z', 'i', 'p', '2', '.', '8', 'h', 9, 0,
  /* 5930 */ 'u', 'z', 'p', '2', '.', '8', 'h', 9, 0,
  /* 5939 */ 's', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5950 */ 'u', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5961 */ 's', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5972 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5983 */ 'r', 'e', 'v', '6', '4', '.', '8', 'h', 9, 0,
  /* 5993 */ 's', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 6002 */ 'u', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 6011 */ 'm', 'l', 'a', '.', '8', 'h', 9, 0,
  /* 6019 */ 's', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6029 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6039 */ 's', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6048 */ 'u', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6057 */ 's', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6067 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6077 */ 's', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6087 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6097 */ 'b', 'i', 'c', '.', '8', 'h', 9, 0,
  /* 6105 */ 's', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6114 */ 'u', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6123 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6134 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6145 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6155 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6165 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6176 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6187 */ 'c', 'm', 'g', 'e', '.', '8', 'h', 9, 0,
  /* 6196 */ 'c', 'm', 'l', 'e', '.', '8', 'h', 9, 0,
  /* 6205 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'h', 9, 0,
  /* 6215 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '8', 'h', 9, 0,
  /* 6228 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 6240 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 6253 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '8', 'h', 9, 0,
  /* 6266 */ 'c', 'm', 'h', 'i', '.', '8', 'h', 9, 0,
  /* 6275 */ 's', 'l', 'i', '.', '8', 'h', 9, 0,
  /* 6283 */ 'm', 'v', 'n', 'i', '.', '8', 'h', 9, 0,
  /* 6292 */ 's', 'r', 'i', '.', '8', 'h', 9, 0,
  /* 6300 */ 'm', 'o', 'v', 'i', '.', '8', 'h', 9, 0,
  /* 6309 */ 's', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 6319 */ 'u', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 6329 */ 's', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 6339 */ 'u', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 6349 */ 's', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 6359 */ 'u', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 6369 */ 's', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 6379 */ 'u', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 6389 */ 's', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 6399 */ 'u', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 6409 */ 's', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6419 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6429 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6440 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6451 */ 's', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6461 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6471 */ 's', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6480 */ 'u', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6489 */ 's', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 6499 */ 'u', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 6509 */ 'p', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 6519 */ 's', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 6529 */ 'u', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 6539 */ 's', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 6549 */ 'u', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 6559 */ 'm', 'u', 'l', '.', '8', 'h', 9, 0,
  /* 6567 */ 's', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 6576 */ 'u', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 6585 */ 'a', 'd', 'd', 'p', '.', '8', 'h', 9, 0,
  /* 6594 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6605 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6616 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6627 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6638 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 6648 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 6658 */ 'd', 'u', 'p', '.', '8', 'h', 9, 0,
  /* 6666 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 6676 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 6686 */ 'c', 'm', 'e', 'q', '.', '8', 'h', 9, 0,
  /* 6695 */ 's', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6705 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6715 */ 's', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6724 */ 'u', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6733 */ 'o', 'r', 'r', '.', '8', 'h', 9, 0,
  /* 6741 */ 's', 'q', 'a', 'b', 's', '.', '8', 'h', 9, 0,
  /* 6751 */ 'c', 'm', 'h', 's', '.', '8', 'h', 9, 0,
  /* 6760 */ 'c', 'l', 's', '.', '8', 'h', 9, 0,
  /* 6768 */ 'm', 'l', 's', '.', '8', 'h', 9, 0,
  /* 6776 */ 'c', 'm', 'g', 't', '.', '8', 'h', 9, 0,
  /* 6785 */ 'c', 'm', 'l', 't', '.', '8', 'h', 9, 0,
  /* 6794 */ 'c', 'm', 't', 's', 't', '.', '8', 'h', 9, 0,
  /* 6804 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'h', 9, 0,
  /* 6815 */ 'a', 'd', 'd', 'v', '.', '8', 'h', 9, 0,
  /* 6824 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 6835 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 6846 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 6856 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 6866 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 6876 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 6886 */ 's', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 6896 */ 'u', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 6906 */ 's', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 6916 */ 'u', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 6926 */ 's', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 6935 */ 'u', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 6944 */ 'c', 'l', 'z', '.', '8', 'h', 9, 0,
  /* 6952 */ 'l', 'd', 'a', 'd', 'd', 'a', 'h', 9, 0,
  /* 6961 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', 9, 0,
  /* 6971 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 6981 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 6991 */ 's', 'w', 'p', 'a', 'h', 9, 0,
  /* 6998 */ 'l', 'd', 'c', 'l', 'r', 'a', 'h', 9, 0,
  /* 7007 */ 'l', 'd', 'e', 'o', 'r', 'a', 'h', 9, 0,
  /* 7016 */ 'c', 'a', 's', 'a', 'h', 9, 0,
  /* 7023 */ 'l', 'd', 's', 'e', 't', 'a', 'h', 9, 0,
  /* 7032 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 7042 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 7052 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 7061 */ 'l', 'd', 'a', 'd', 'd', 'h', 9, 0,
  /* 7069 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'h', 9, 0,
  /* 7079 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 7090 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 7101 */ 's', 'w', 'p', 'a', 'l', 'h', 9, 0,
  /* 7109 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'h', 9, 0,
  /* 7119 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'h', 9, 0,
  /* 7129 */ 'c', 'a', 's', 'a', 'l', 'h', 9, 0,
  /* 7137 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'h', 9, 0,
  /* 7147 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 7158 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 7169 */ 'l', 'd', 'a', 'd', 'd', 'l', 'h', 9, 0,
  /* 7178 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 7188 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 7198 */ 's', 'w', 'p', 'l', 'h', 9, 0,
  /* 7205 */ 'l', 'd', 'c', 'l', 'r', 'l', 'h', 9, 0,
  /* 7214 */ 'l', 'd', 'e', 'o', 'r', 'l', 'h', 9, 0,
  /* 7223 */ 'c', 'a', 's', 'l', 'h', 9, 0,
  /* 7230 */ 'l', 'd', 's', 'e', 't', 'l', 'h', 9, 0,
  /* 7239 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 7248 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 7258 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 7265 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 7272 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 7282 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 7292 */ 'l', 'd', 's', 'm', 'i', 'n', 'h', 9, 0,
  /* 7301 */ 'l', 'd', 'u', 'm', 'i', 'n', 'h', 9, 0,
  /* 7310 */ 's', 'w', 'p', 'h', 9, 0,
  /* 7316 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 7323 */ 'l', 'd', 'l', 'a', 'r', 'h', 9, 0,
  /* 7331 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 7337 */ 'l', 'd', 'c', 'l', 'r', 'h', 9, 0,
  /* 7345 */ 's', 't', 'l', 'l', 'r', 'h', 9, 0,
  /* 7353 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 7360 */ 'l', 'd', 'e', 'o', 'r', 'h', 9, 0,
  /* 7368 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 7375 */ 's', 't', 'r', 'h', 9, 0,
  /* 7381 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 7388 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 7395 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 7402 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 7410 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 7417 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 7425 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 7432 */ 'c', 'a', 's', 'h', 9, 0,
  /* 7438 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', 9, 0,
  /* 7448 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 7455 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 7463 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 7471 */ 'l', 'd', 's', 'e', 't', 'h', 9, 0,
  /* 7479 */ 'l', 'd', 's', 'm', 'a', 'x', 'h', 9, 0,
  /* 7488 */ 'l', 'd', 'u', 'm', 'a', 'x', 'h', 9, 0,
  /* 7497 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 7503 */ 's', 'l', 'i', 9, 0,
  /* 7508 */ 's', 'r', 'i', 9, 0,
  /* 7513 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 7521 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 7527 */ 'b', 'r', 'k', 9, 0,
  /* 7532 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 7538 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 9, 0,
  /* 7547 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', 9, 0,
  /* 7556 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 7566 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 7576 */ 'c', 'a', 's', 'p', 'a', 'l', 9, 0,
  /* 7584 */ 's', 'w', 'p', 'a', 'l', 9, 0,
  /* 7591 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 9, 0,
  /* 7600 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 9, 0,
  /* 7609 */ 'c', 'a', 's', 'a', 'l', 9, 0,
  /* 7616 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 9, 0,
  /* 7625 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 7635 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 7645 */ 't', 'b', 'l', 9, 0,
  /* 7650 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 7658 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 7666 */ 'l', 'd', 'a', 'd', 'd', 'l', 9, 0,
  /* 7674 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 7682 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 7690 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 7697 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 7704 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 7711 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 7719 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 7727 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 7734 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 7741 */ 's', 's', 'h', 'l', 9, 0,
  /* 7747 */ 'u', 's', 'h', 'l', 9, 0,
  /* 7753 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', 9, 0,
  /* 7762 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 9, 0,
  /* 7771 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 9, 0,
  /* 7780 */ 'c', 'a', 's', 'p', 'l', 9, 0,
  /* 7787 */ 's', 'w', 'p', 'l', 9, 0,
  /* 7793 */ 'l', 'd', 'c', 'l', 'r', 'l', 9, 0,
  /* 7801 */ 'l', 'd', 'e', 'o', 'r', 'l', 9, 0,
  /* 7809 */ 'c', 'a', 's', 'l', 9, 0,
  /* 7815 */ 's', 'q', 'd', 'm', 'l', 's', 'l', 9, 0,
  /* 7824 */ 's', 'y', 's', 'l', 9, 0,
  /* 7830 */ 'l', 'd', 's', 'e', 't', 'l', 9, 0,
  /* 7838 */ 'f', 'c', 'v', 't', 'l', 9, 0,
  /* 7845 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 7851 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 7858 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 9, 0,
  /* 7867 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 9, 0,
  /* 7876 */ 's', 'b', 'f', 'm', 9, 0,
  /* 7882 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 7888 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 7894 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 7902 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 7910 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 7918 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 7925 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 7931 */ 'l', 'd', 's', 'm', 'i', 'n', 9, 0,
  /* 7939 */ 'l', 'd', 'u', 'm', 'i', 'n', 9, 0,
  /* 7947 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 7953 */ 'e', 'o', 'n', 9, 0,
  /* 7958 */ 's', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 7966 */ 'u', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 7974 */ 's', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 7983 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 7992 */ 'o', 'r', 'n', 9, 0,
  /* 7997 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 8005 */ 'f', 'c', 'v', 't', 'n', 9, 0,
  /* 8012 */ 's', 'q', 'x', 't', 'n', 9, 0,
  /* 8019 */ 'u', 'q', 'x', 't', 'n', 9, 0,
  /* 8026 */ 's', 'q', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 8035 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 8045 */ 's', 'q', 'x', 't', 'u', 'n', 9, 0,
  /* 8053 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 8059 */ 'f', 'c', 'v', 't', 'x', 'n', 9, 0,
  /* 8067 */ 'l', 'd', 'p', 9, 0,
  /* 8072 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 8079 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 8085 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 8091 */ 's', 't', 'n', 'p', 9, 0,
  /* 8097 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 8103 */ 'c', 'a', 's', 'p', 9, 0,
  /* 8109 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 8117 */ 's', 't', 'p', 9, 0,
  /* 8122 */ 's', 'w', 'p', 9, 0,
  /* 8127 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 8134 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 8140 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 8147 */ 's', 't', 'x', 'p', 9, 0,
  /* 8153 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '1', 'q', 9, 0,
  /* 8164 */ 'p', 'm', 'u', 'l', 'l', '.', '1', 'q', 9, 0,
  /* 8174 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 8181 */ 'l', 'd', '1', 'r', 9, 0,
  /* 8187 */ 'l', 'd', '2', 'r', 9, 0,
  /* 8193 */ 'l', 'd', '3', 'r', 9, 0,
  /* 8199 */ 'l', 'd', '4', 'r', 9, 0,
  /* 8205 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 8211 */ 'l', 'd', 'l', 'a', 'r', 9, 0,
  /* 8218 */ 'b', 'r', 9, 0,
  /* 8222 */ 'a', 'd', 'r', 9, 0,
  /* 8227 */ 'l', 'd', 'r', 9, 0,
  /* 8232 */ 's', 'r', 's', 'h', 'r', 9, 0,
  /* 8239 */ 'u', 'r', 's', 'h', 'r', 9, 0,
  /* 8246 */ 's', 's', 'h', 'r', 9, 0,
  /* 8252 */ 'u', 's', 'h', 'r', 9, 0,
  /* 8258 */ 'b', 'l', 'r', 9, 0,
  /* 8263 */ 'l', 'd', 'c', 'l', 'r', 9, 0,
  /* 8270 */ 's', 't', 'l', 'l', 'r', 9, 0,
  /* 8277 */ 's', 't', 'l', 'r', 9, 0,
  /* 8283 */ 'l', 'd', 'e', 'o', 'r', 9, 0,
  /* 8290 */ 'r', 'o', 'r', 9, 0,
  /* 8295 */ 'o', 'r', 'r', 9, 0,
  /* 8300 */ 'a', 's', 'r', 9, 0,
  /* 8305 */ 'l', 's', 'r', 9, 0,
  /* 8310 */ 'm', 's', 'r', 9, 0,
  /* 8315 */ 'l', 'd', 't', 'r', 9, 0,
  /* 8321 */ 's', 't', 'r', 9, 0,
  /* 8326 */ 's', 't', 't', 'r', 9, 0,
  /* 8332 */ 'e', 'x', 't', 'r', 9, 0,
  /* 8338 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 8344 */ 's', 't', 'u', 'r', 9, 0,
  /* 8350 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 8357 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 8363 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 8370 */ 's', 't', 'x', 'r', 9, 0,
  /* 8376 */ 'f', 'm', 'l', 'a', '.', 's', 9, 0,
  /* 8384 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', 's', 9, 0,
  /* 8396 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 8407 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 8419 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', 's', 9, 0,
  /* 8431 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 's', 9, 0,
  /* 8442 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 's', 9, 0,
  /* 8453 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 's', 9, 0,
  /* 8464 */ 'f', 'm', 'u', 'l', '.', 's', 9, 0,
  /* 8472 */ 'f', 'm', 'l', 's', '.', 's', 9, 0,
  /* 8480 */ 'i', 'n', 's', '.', 's', 9, 0,
  /* 8487 */ 's', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 8495 */ 'u', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 8503 */ 'f', 'm', 'u', 'l', 'x', '.', 's', 9, 0,
  /* 8512 */ 't', 'r', 'n', '1', '.', '2', 's', 9, 0,
  /* 8521 */ 'z', 'i', 'p', '1', '.', '2', 's', 9, 0,
  /* 8530 */ 'u', 'z', 'p', '1', '.', '2', 's', 9, 0,
  /* 8539 */ 't', 'r', 'n', '2', '.', '2', 's', 9, 0,
  /* 8548 */ 'z', 'i', 'p', '2', '.', '2', 's', 9, 0,
  /* 8557 */ 'u', 'z', 'p', '2', '.', '2', 's', 9, 0,
  /* 8566 */ 'r', 'e', 'v', '6', '4', '.', '2', 's', 9, 0,
  /* 8576 */ 's', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 8585 */ 'u', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 8594 */ 'f', 'm', 'l', 'a', '.', '2', 's', 9, 0,
  /* 8603 */ 's', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 8613 */ 'u', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 8623 */ 's', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 8632 */ 'u', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 8641 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 's', 9, 0,
  /* 8652 */ 'f', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 8661 */ 's', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 8671 */ 'u', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 8681 */ 's', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 8691 */ 'u', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 8701 */ 'b', 'i', 'c', '.', '2', 's', 9, 0,
  /* 8709 */ 'f', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 8718 */ 's', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 8727 */ 'u', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 8736 */ 'f', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 8745 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 8756 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 8767 */ 's', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 8777 */ 'u', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 8787 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 8798 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 8809 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 's', 9, 0,
  /* 8819 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 's', 9, 0,
  /* 8829 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 's', 9, 0,
  /* 8839 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 8850 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 8861 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 8873 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 8885 */ 's', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 8895 */ 'u', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 8905 */ 'f', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 8914 */ 's', 'q', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 8924 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '2', 's', 9, 0,
  /* 8937 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 8949 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 8962 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '2', 's', 9, 0,
  /* 8975 */ 'c', 'm', 'h', 'i', '.', '2', 's', 9, 0,
  /* 8984 */ 's', 'l', 'i', '.', '2', 's', 9, 0,
  /* 8992 */ 'm', 'v', 'n', 'i', '.', '2', 's', 9, 0,
  /* 9001 */ 's', 'r', 'i', '.', '2', 's', 9, 0,
  /* 9009 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 's', 9, 0,
  /* 9020 */ 'm', 'o', 'v', 'i', '.', '2', 's', 9, 0,
  /* 9029 */ 's', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 9039 */ 'u', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 9049 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 9060 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 9071 */ 's', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 9081 */ 'u', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 9091 */ 's', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 9100 */ 'u', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 9109 */ 'f', 'm', 'u', 'l', '.', '2', 's', 9, 0,
  /* 9118 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 's', 9, 0,
  /* 9129 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 's', 9, 0,
  /* 9140 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 's', 9, 0,
  /* 9151 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '2', 's', 9, 0,
  /* 9162 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '2', 's', 9, 0,
  /* 9173 */ 'f', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 9182 */ 's', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 9191 */ 'u', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 9200 */ 's', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 9211 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 9222 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 9234 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 9246 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 's', 9, 0,
  /* 9257 */ 's', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 9267 */ 'u', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 9277 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 9289 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 9302 */ 's', 'q', 'x', 't', 'u', 'n', '.', '2', 's', 9, 0,
  /* 9313 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 's', 9, 0,
  /* 9323 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 9334 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 9345 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 9356 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 9367 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 9379 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 9391 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 9401 */ 's', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 9411 */ 'u', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 9421 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 's', 9, 0,
  /* 9432 */ 'd', 'u', 'p', '.', '2', 's', 9, 0,
  /* 9440 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 9450 */ 's', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 9460 */ 'u', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 9470 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 's', 9, 0,
  /* 9480 */ 's', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 9490 */ 'u', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 9500 */ 's', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 9509 */ 'u', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 9518 */ 'o', 'r', 'r', '.', '2', 's', 9, 0,
  /* 9526 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 's', 9, 0,
  /* 9537 */ 'f', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 9546 */ 's', 'q', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 9556 */ 'c', 'm', 'h', 's', '.', '2', 's', 9, 0,
  /* 9565 */ 'c', 'l', 's', '.', '2', 's', 9, 0,
  /* 9573 */ 'f', 'm', 'l', 's', '.', '2', 's', 9, 0,
  /* 9582 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 's', 9, 0,
  /* 9593 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 's', 9, 0,
  /* 9604 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 's', 9, 0,
  /* 9615 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 's', 9, 0,
  /* 9626 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 's', 9, 0,
  /* 9638 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 's', 9, 0,
  /* 9649 */ 'f', 'a', 'c', 'g', 't', '.', '2', 's', 9, 0,
  /* 9659 */ 'f', 'c', 'm', 'g', 't', '.', '2', 's', 9, 0,
  /* 9669 */ 'f', 'c', 'm', 'l', 't', '.', '2', 's', 9, 0,
  /* 9679 */ 'f', 's', 'q', 'r', 't', '.', '2', 's', 9, 0,
  /* 9689 */ 'c', 'm', 't', 's', 't', '.', '2', 's', 9, 0,
  /* 9699 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 's', 9, 0,
  /* 9710 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 's', 9, 0,
  /* 9721 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 's', 9, 0,
  /* 9732 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 's', 9, 0,
  /* 9743 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 's', 9, 0,
  /* 9754 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 's', 9, 0,
  /* 9765 */ 'f', 'd', 'i', 'v', '.', '2', 's', 9, 0,
  /* 9774 */ 'f', 'm', 'o', 'v', '.', '2', 's', 9, 0,
  /* 9783 */ 'f', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 9792 */ 's', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 9801 */ 'u', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 9810 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 's', 9, 0,
  /* 9820 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 's', 9, 0,
  /* 9831 */ 'c', 'l', 'z', '.', '2', 's', 9, 0,
  /* 9839 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 's', 9, 0,
  /* 9850 */ 's', 'h', 'a', '1', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 9862 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 9876 */ 't', 'r', 'n', '1', '.', '4', 's', 9, 0,
  /* 9885 */ 'z', 'i', 'p', '1', '.', '4', 's', 9, 0,
  /* 9894 */ 'u', 'z', 'p', '1', '.', '4', 's', 9, 0,
  /* 9903 */ 's', 'h', 'a', '1', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 9915 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 9929 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', '.', '4', 's', 9, 0,
  /* 9942 */ 's', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 9953 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 9964 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 9977 */ 's', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 9988 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 9999 */ 's', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 10010 */ 'u', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 10021 */ 's', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 10032 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 10043 */ 's', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 10054 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 10065 */ 's', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 10076 */ 'u', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 10087 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 10100 */ 's', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 10111 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 10122 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 10135 */ 's', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 10146 */ 'u', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 10157 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 10169 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 10181 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 10193 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 10205 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 10218 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 10231 */ 't', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 10240 */ 's', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 10251 */ 'u', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 10262 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 10275 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 10289 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 10301 */ 'z', 'i', 'p', '2', '.', '4', 's', 9, 0,
  /* 10310 */ 'u', 'z', 'p', '2', '.', '4', 's', 9, 0,
  /* 10319 */ 's', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 10330 */ 'u', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 10341 */ 's', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 10352 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 10363 */ 'r', 'e', 'v', '6', '4', '.', '4', 's', 9, 0,
  /* 10373 */ 's', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 10382 */ 'u', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 10391 */ 'f', 'm', 'l', 'a', '.', '4', 's', 9, 0,
  /* 10400 */ 's', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 10410 */ 'u', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 10420 */ 's', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 10429 */ 'u', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 10438 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '4', 's', 9, 0,
  /* 10449 */ 'f', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 10458 */ 's', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 10468 */ 'u', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 10478 */ 's', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 10488 */ 'u', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 10498 */ 's', 'h', 'a', '1', 'c', '.', '4', 's', 9, 0,
  /* 10508 */ 'b', 'i', 'c', '.', '4', 's', 9, 0,
  /* 10516 */ 'f', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 10525 */ 's', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 10534 */ 'u', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 10543 */ 'f', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 10552 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 10563 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 10574 */ 's', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 10584 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 10594 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 10605 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 10616 */ 'f', 'a', 'c', 'g', 'e', '.', '4', 's', 9, 0,
  /* 10626 */ 'f', 'c', 'm', 'g', 'e', '.', '4', 's', 9, 0,
  /* 10636 */ 'f', 'c', 'm', 'l', 'e', '.', '4', 's', 9, 0,
  /* 10646 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 10657 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 10668 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 10680 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 10692 */ 's', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 10702 */ 'u', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 10712 */ 'f', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 10721 */ 's', 'q', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 10731 */ 's', 'h', 'a', '2', '5', '6', 'h', '.', '4', 's', 9, 0,
  /* 10743 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '4', 's', 9, 0,
  /* 10756 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 10768 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 10781 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '4', 's', 9, 0,
  /* 10794 */ 'c', 'm', 'h', 'i', '.', '4', 's', 9, 0,
  /* 10803 */ 's', 'l', 'i', '.', '4', 's', 9, 0,
  /* 10811 */ 'm', 'v', 'n', 'i', '.', '4', 's', 9, 0,
  /* 10820 */ 's', 'r', 'i', '.', '4', 's', 9, 0,
  /* 10828 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '4', 's', 9, 0,
  /* 10839 */ 'm', 'o', 'v', 'i', '.', '4', 's', 9, 0,
  /* 10848 */ 's', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 10858 */ 'u', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 10868 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 10880 */ 's', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 10890 */ 'u', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 10900 */ 's', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 10910 */ 'u', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 10920 */ 's', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 10930 */ 'u', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 10940 */ 's', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 10950 */ 'u', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 10960 */ 's', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 10970 */ 'u', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 10980 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 10991 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 11002 */ 's', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 11012 */ 'u', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 11022 */ 's', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 11031 */ 'u', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 11040 */ 's', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 11050 */ 'u', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 11060 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 11072 */ 's', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 11082 */ 'u', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 11092 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 11104 */ 's', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 11114 */ 'u', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 11124 */ 'f', 'm', 'u', 'l', '.', '4', 's', 9, 0,
  /* 11133 */ 's', 'h', 'a', '1', 'm', '.', '4', 's', 9, 0,
  /* 11143 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '4', 's', 9, 0,
  /* 11154 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '4', 's', 9, 0,
  /* 11165 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '4', 's', 9, 0,
  /* 11176 */ 'f', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 11185 */ 's', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 11194 */ 'u', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 11203 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '4', 's', 9, 0,
  /* 11214 */ 's', 'h', 'a', '1', 'p', '.', '4', 's', 9, 0,
  /* 11224 */ 'f', 'a', 'd', 'd', 'p', '.', '4', 's', 9, 0,
  /* 11234 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 11245 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 11256 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 11267 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 11278 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 11290 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 11302 */ 'f', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 11312 */ 's', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 11322 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 11332 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '4', 's', 9, 0,
  /* 11343 */ 'd', 'u', 'p', '.', '4', 's', 9, 0,
  /* 11351 */ 'f', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 11361 */ 's', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 11371 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 11381 */ 'f', 'c', 'm', 'e', 'q', '.', '4', 's', 9, 0,
  /* 11391 */ 's', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 11401 */ 'u', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 11411 */ 's', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 11420 */ 'u', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 11429 */ 'o', 'r', 'r', '.', '4', 's', 9, 0,
  /* 11437 */ 'f', 'c', 'v', 't', 'a', 's', '.', '4', 's', 9, 0,
  /* 11448 */ 'f', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 11457 */ 's', 'q', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 11467 */ 'c', 'm', 'h', 's', '.', '4', 's', 9, 0,
  /* 11476 */ 'c', 'l', 's', '.', '4', 's', 9, 0,
  /* 11484 */ 'f', 'm', 'l', 's', '.', '4', 's', 9, 0,
  /* 11493 */ 'f', 'c', 'v', 't', 'm', 's', '.', '4', 's', 9, 0,
  /* 11504 */ 'f', 'c', 'v', 't', 'n', 's', '.', '4', 's', 9, 0,
  /* 11515 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '4', 's', 9, 0,
  /* 11526 */ 'f', 'c', 'v', 't', 'p', 's', '.', '4', 's', 9, 0,
  /* 11537 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '4', 's', 9, 0,
  /* 11549 */ 'f', 'c', 'v', 't', 'z', 's', '.', '4', 's', 9, 0,
  /* 11560 */ 'f', 'a', 'c', 'g', 't', '.', '4', 's', 9, 0,
  /* 11570 */ 'f', 'c', 'm', 'g', 't', '.', '4', 's', 9, 0,
  /* 11580 */ 'f', 'c', 'm', 'l', 't', '.', '4', 's', 9, 0,
  /* 11590 */ 'f', 's', 'q', 'r', 't', '.', '4', 's', 9, 0,
  /* 11600 */ 'c', 'm', 't', 's', 't', '.', '4', 's', 9, 0,
  /* 11610 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '4', 's', 9, 0,
  /* 11621 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 's', 9, 0,
  /* 11632 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '4', 's', 9, 0,
  /* 11643 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '4', 's', 9, 0,
  /* 11654 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '4', 's', 9, 0,
  /* 11665 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '4', 's', 9, 0,
  /* 11676 */ 'a', 'd', 'd', 'v', '.', '4', 's', 9, 0,
  /* 11685 */ 'f', 'd', 'i', 'v', '.', '4', 's', 9, 0,
  /* 11694 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 11705 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 11716 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 11728 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 11740 */ 'f', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 11750 */ 's', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 11760 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 11770 */ 'f', 'm', 'o', 'v', '.', '4', 's', 9, 0,
  /* 11779 */ 'f', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 11789 */ 's', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 11799 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 11809 */ 's', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 11819 */ 'u', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 11829 */ 's', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 11839 */ 'u', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 11849 */ 'f', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 11858 */ 's', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 11867 */ 'u', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 11876 */ 'f', 'm', 'u', 'l', 'x', '.', '4', 's', 9, 0,
  /* 11886 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '4', 's', 9, 0,
  /* 11897 */ 'c', 'l', 'z', '.', '4', 's', 9, 0,
  /* 11905 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '4', 's', 9, 0,
  /* 11916 */ 'c', 'a', 's', 9, 0,
  /* 11921 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 11929 */ 'f', 'a', 'b', 's', 9, 0,
  /* 11935 */ 's', 'q', 'a', 'b', 's', 9, 0,
  /* 11942 */ 's', 'u', 'b', 's', 9, 0,
  /* 11948 */ 's', 'b', 'c', 's', 9, 0,
  /* 11954 */ 'a', 'd', 'c', 's', 9, 0,
  /* 11960 */ 'b', 'i', 'c', 's', 9, 0,
  /* 11966 */ 'a', 'd', 'd', 's', 9, 0,
  /* 11972 */ 'a', 'n', 'd', 's', 9, 0,
  /* 11978 */ 'c', 'm', 'h', 's', 9, 0,
  /* 11984 */ 'c', 'l', 's', 9, 0,
  /* 11989 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 11997 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 12005 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 12013 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 12021 */ 'm', 'r', 's', 9, 0,
  /* 12026 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 12035 */ 's', 'y', 's', 9, 0,
  /* 12040 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 12048 */ 'r', 'e', 't', 9, 0,
  /* 12053 */ 'l', 'd', 's', 'e', 't', 9, 0,
  /* 12060 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 12067 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 12074 */ 'r', 'b', 'i', 't', 9, 0,
  /* 12080 */ 'h', 'l', 't', 9, 0,
  /* 12085 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 12092 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 12099 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 12106 */ 'f', 'c', 'v', 't', 9, 0,
  /* 12112 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 12120 */ 's', 'q', 's', 'h', 'l', 'u', 9, 0,
  /* 12128 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 12136 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 12144 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 12152 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 12160 */ 'r', 'e', 'v', 9, 0,
  /* 12165 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 12171 */ 's', 'd', 'i', 'v', 9, 0,
  /* 12177 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 12183 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 12190 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 12196 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 12204 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 12213 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 12220 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 12227 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 12235 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 12243 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 12251 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 12257 */ 'l', 'd', 's', 'm', 'a', 'x', 9, 0,
  /* 12265 */ 'l', 'd', 'u', 'm', 'a', 'x', 9, 0,
  /* 12273 */ 't', 'b', 'x', 9, 0,
  /* 12278 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 12287 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 12294 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 12301 */ 'f', 'r', 'e', 'c', 'p', 'x', 9, 0,
  /* 12309 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 12317 */ 'c', 'b', 'z', 9, 0,
  /* 12322 */ 't', 'b', 'z', 9, 0,
  /* 12327 */ 'c', 'l', 'z', 9, 0,
  /* 12332 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 12338 */ 't', 'b', 'n', 'z', 9, 0,
  /* 12344 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 12352 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 12358 */ '.', 't', 'l', 's', 'd', 'e', 's', 'c', 'c', 'a', 'l', 'l', 32, 0,
  /* 12372 */ 'h', 'i', 'n', 't', 32, 0,
  /* 12378 */ 'b', '.', 0,
  /* 12381 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 12394 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 12401 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 12411 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 12426 */ 'd', 'r', 'p', 's', 0,
  /* 12431 */ 'e', 'r', 'e', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 6 bits for 42 unique commands.
  switch ((Bits >> 14) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, DRPS, ERET
    return;
    break;
  case 1:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 0, STI, O); 
    break;
  case 2:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPv2i64p, ADDSWri, ADDSWrs, ...
    printOperand(MI, 0, STI, O); 
    break;
  case 3:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 1, STI, O); 
    break;
  case 4:
    // B, BL
    printAlignedLabel(MI, 0, STI, O); 
    return;
    break;
  case 5:
    // BRK, DCPS1, DCPS2, DCPS3, HINT, HLT, HVC, SMC, SVC
    printHexImm(MI, 0, STI, O); 
    return;
    break;
  case 6:
    // Bcc
    printCondCode(MI, 0, STI, O); 
    O << "\t"; 
    printAlignedLabel(MI, 1, STI, O); 
    return;
    break;
  case 7:
    // CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, CASAs, CASLb, CAS...
    printOperand(MI, 1, STI, O); 
    break;
  case 8:
    // CASPALd, CASPAd, CASPLd, CASPd
    printGPRSeqPairsClassOperand<64>(MI, 1, STI, O); 
    O << ", "; 
    printGPRSeqPairsClassOperand<64>(MI, 2, STI, O); 
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 9:
    // CASPALs, CASPAs, CASPLs, CASPs
    printGPRSeqPairsClassOperand<32>(MI, 1, STI, O); 
    O << ", "; 
    printGPRSeqPairsClassOperand<32>(MI, 2, STI, O); 
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 10:
    // DMB, DSB, ISB
    printBarrierOption(MI, 0, STI, O); 
    return;
    break;
  case 11:
    // LD1Fourv16b, LD1Onev16b, LD1Rv16b, LD1Threev16b, LD1Twov16b, LD2Rv16b,...
    printTypedVectorList<16, 'b'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 12:
    // LD1Fourv16b_POST, LD1Onev16b_POST, LD1Rv16b_POST, LD1Threev16b_POST, L...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 13:
    // LD1Fourv1d, LD1Onev1d, LD1Rv1d, LD1Threev1d, LD1Twov1d, LD2Rv1d, LD3Rv...
    printTypedVectorList<1, 'd'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 14:
    // LD1Fourv1d_POST, LD1Onev1d_POST, LD1Rv1d_POST, LD1Threev1d_POST, LD1Tw...
    printTypedVectorList<1, 'd'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 15:
    // LD1Fourv2d, LD1Onev2d, LD1Rv2d, LD1Threev2d, LD1Twov2d, LD2Rv2d, LD2Tw...
    printTypedVectorList<2, 'd'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 16:
    // LD1Fourv2d_POST, LD1Onev2d_POST, LD1Rv2d_POST, LD1Threev2d_POST, LD1Tw...
    printTypedVectorList<2, 'd'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 17:
    // LD1Fourv2s, LD1Onev2s, LD1Rv2s, LD1Threev2s, LD1Twov2s, LD2Rv2s, LD2Tw...
    printTypedVectorList<2, 's'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 18:
    // LD1Fourv2s_POST, LD1Onev2s_POST, LD1Rv2s_POST, LD1Threev2s_POST, LD1Tw...
    printTypedVectorList<2, 's'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 19:
    // LD1Fourv4h, LD1Onev4h, LD1Rv4h, LD1Threev4h, LD1Twov4h, LD2Rv4h, LD2Tw...
    printTypedVectorList<4, 'h'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 20:
    // LD1Fourv4h_POST, LD1Onev4h_POST, LD1Rv4h_POST, LD1Threev4h_POST, LD1Tw...
    printTypedVectorList<4, 'h'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 21:
    // LD1Fourv4s, LD1Onev4s, LD1Rv4s, LD1Threev4s, LD1Twov4s, LD2Rv4s, LD2Tw...
    printTypedVectorList<4, 's'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 22:
    // LD1Fourv4s_POST, LD1Onev4s_POST, LD1Rv4s_POST, LD1Threev4s_POST, LD1Tw...
    printTypedVectorList<4, 's'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 23:
    // LD1Fourv8b, LD1Onev8b, LD1Rv8b, LD1Threev8b, LD1Twov8b, LD2Rv8b, LD2Tw...
    printTypedVectorList<8, 'b'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 24:
    // LD1Fourv8b_POST, LD1Onev8b_POST, LD1Rv8b_POST, LD1Threev8b_POST, LD1Tw...
    printTypedVectorList<8, 'b'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 25:
    // LD1Fourv8h, LD1Onev8h, LD1Rv8h, LD1Threev8h, LD1Twov8h, LD2Rv8h, LD2Tw...
    printTypedVectorList<8, 'h'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 26:
    // LD1Fourv8h_POST, LD1Onev8h_POST, LD1Rv8h_POST, LD1Threev8h_POST, LD1Tw...
    printTypedVectorList<8, 'h'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 27:
    // LD1i16, LD2i16, LD3i16, LD4i16, ST1i16_POST, ST2i16_POST, ST3i16_POST,...
    printTypedVectorList<0, 'h'>(MI, 1, STI, O); 
    printVectorIndex(MI, 2, STI, O); 
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    break;
  case 28:
    // LD1i16_POST, LD2i16_POST, LD3i16_POST, LD4i16_POST
    printTypedVectorList<0, 'h'>(MI, 2, STI, O); 
    printVectorIndex(MI, 3, STI, O); 
    O << ", ["; 
    printOperand(MI, 4, STI, O); 
    O << "], "; 
    break;
  case 29:
    // LD1i32, LD2i32, LD3i32, LD4i32, ST1i32_POST, ST2i32_POST, ST3i32_POST,...
    printTypedVectorList<0, 's'>(MI, 1, STI, O); 
    printVectorIndex(MI, 2, STI, O); 
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    break;
  case 30:
    // LD1i32_POST, LD2i32_POST, LD3i32_POST, LD4i32_POST
    printTypedVectorList<0, 's'>(MI, 2, STI, O); 
    printVectorIndex(MI, 3, STI, O); 
    O << ", ["; 
    printOperand(MI, 4, STI, O); 
    O << "], "; 
    break;
  case 31:
    // LD1i64, LD2i64, LD3i64, LD4i64, ST1i64_POST, ST2i64_POST, ST3i64_POST,...
    printTypedVectorList<0, 'd'>(MI, 1, STI, O); 
    printVectorIndex(MI, 2, STI, O); 
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    break;
  case 32:
    // LD1i64_POST, LD2i64_POST, LD3i64_POST, LD4i64_POST
    printTypedVectorList<0, 'd'>(MI, 2, STI, O); 
    printVectorIndex(MI, 3, STI, O); 
    O << ", ["; 
    printOperand(MI, 4, STI, O); 
    O << "], "; 
    break;
  case 33:
    // LD1i8, LD2i8, LD3i8, LD4i8, ST1i8_POST, ST2i8_POST, ST3i8_POST, ST4i8_...
    printTypedVectorList<0, 'b'>(MI, 1, STI, O); 
    printVectorIndex(MI, 2, STI, O); 
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    break;
  case 34:
    // LD1i8_POST, LD2i8_POST, LD3i8_POST, LD4i8_POST
    printTypedVectorList<0, 'b'>(MI, 2, STI, O); 
    printVectorIndex(MI, 3, STI, O); 
    O << ", ["; 
    printOperand(MI, 4, STI, O); 
    O << "], "; 
    break;
  case 35:
    // MSR
    printMSRSystemRegister(MI, 0, STI, O); 
    O << ", "; 
    printOperand(MI, 1, STI, O); 
    return;
    break;
  case 36:
    // MSRpstate
    printSystemPStateField(MI, 0, STI, O); 
    O << ", "; 
    printOperand(MI, 1, STI, O); 
    return;
    break;
  case 37:
    // PRFMl, PRFMroW, PRFMroX, PRFMui, PRFUMi
    printPrefetchOp(MI, 0, STI, O); 
    break;
  case 38:
    // ST1i16, ST2i16, ST3i16, ST4i16
    printTypedVectorList<0, 'h'>(MI, 0, STI, O); 
    printVectorIndex(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 39:
    // ST1i32, ST2i32, ST3i32, ST4i32
    printTypedVectorList<0, 's'>(MI, 0, STI, O); 
    printVectorIndex(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 40:
    // ST1i64, ST2i64, ST3i64, ST4i64
    printTypedVectorList<0, 'd'>(MI, 0, STI, O); 
    printVectorIndex(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 41:
    // ST1i8, ST2i8, ST3i8, ST4i8
    printTypedVectorList<0, 'b'>(MI, 0, STI, O); 
    printVectorIndex(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 36 unique commands.
  switch ((Bits >> 20) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    O << ", "; 
    break;
  case 1:
    // BLR, BR, CLREX, RET, TLSDESCCALL
    return;
    break;
  case 2:
    // FCMPDri, FCMPEDri, FCMPESri, FCMPSri
    O << ", #0.0"; 
    return;
    break;
  case 3:
    // FCVTLv2i32, FCVTLv4i32
    O << ".2d, "; 
    printVRegOperand(MI, 1, STI, O); 
    break;
  case 4:
    // FCVTLv4i16, FCVTLv8i16, FCVTNv4i32, FCVTXNv4f32
    O << ".4s, "; 
    break;
  case 5:
    // FCVTNv2i32, FCVTXNv2f32
    O << ".2s, "; 
    printVRegOperand(MI, 1, STI, O); 
    O << ".2d"; 
    return;
    break;
  case 6:
    // FCVTNv4i16
    O << ".4h, "; 
    printVRegOperand(MI, 1, STI, O); 
    O << ".4s"; 
    return;
    break;
  case 7:
    // FCVTNv8i16
    O << ".8h, "; 
    printVRegOperand(MI, 2, STI, O); 
    O << ".4s"; 
    return;
    break;
  case 8:
    // FMOVXDHighr, INSvi16gpr, INSvi16lane, INSvi32gpr, INSvi32lane, INSvi64...
    printVectorIndex(MI, 2, STI, O); 
    O << ", "; 
    break;
  case 9:
    // LD1Fourv16b_POST, LD1Fourv2d_POST, LD1Fourv4s_POST, LD1Fourv8h_POST, L...
    printPostIncOperand<64>(MI, 3, STI, O); 
    return;
    break;
  case 10:
    // LD1Fourv1d_POST, LD1Fourv2s_POST, LD1Fourv4h_POST, LD1Fourv8b_POST, LD...
    printPostIncOperand<32>(MI, 3, STI, O); 
    return;
    break;
  case 11:
    // LD1Onev16b_POST, LD1Onev2d_POST, LD1Onev4s_POST, LD1Onev8h_POST, LD1Tw...
    printPostIncOperand<16>(MI, 3, STI, O); 
    return;
    break;
  case 12:
    // LD1Onev1d_POST, LD1Onev2s_POST, LD1Onev4h_POST, LD1Onev8b_POST, LD1Rv1...
    printPostIncOperand<8>(MI, 3, STI, O); 
    return;
    break;
  case 13:
    // LD1Rv16b_POST, LD1Rv8b_POST
    printPostIncOperand<1>(MI, 3, STI, O); 
    return;
    break;
  case 14:
    // LD1Rv2s_POST, LD1Rv4s_POST, LD2Rv4h_POST, LD2Rv8h_POST, LD4Rv16b_POST,...
    printPostIncOperand<4>(MI, 3, STI, O); 
    return;
    break;
  case 15:
    // LD1Rv4h_POST, LD1Rv8h_POST, LD2Rv16b_POST, LD2Rv8b_POST
    printPostIncOperand<2>(MI, 3, STI, O); 
    return;
    break;
  case 16:
    // LD1Threev16b_POST, LD1Threev2d_POST, LD1Threev4s_POST, LD1Threev8h_POS...
    printPostIncOperand<48>(MI, 3, STI, O); 
    return;
    break;
  case 17:
    // LD1Threev1d_POST, LD1Threev2s_POST, LD1Threev4h_POST, LD1Threev8b_POST...
    printPostIncOperand<24>(MI, 3, STI, O); 
    return;
    break;
  case 18:
    // LD1i16, LD1i32, LD1i64, LD1i8, LD2i16, LD2i32, LD2i64, LD2i8, LD3i16, ...
    O << ']'; 
    return;
    break;
  case 19:
    // LD1i16_POST, LD2i8_POST
    printPostIncOperand<2>(MI, 5, STI, O); 
    return;
    break;
  case 20:
    // LD1i32_POST, LD2i16_POST, LD4i8_POST
    printPostIncOperand<4>(MI, 5, STI, O); 
    return;
    break;
  case 21:
    // LD1i64_POST, LD2i32_POST, LD4i16_POST
    printPostIncOperand<8>(MI, 5, STI, O); 
    return;
    break;
  case 22:
    // LD1i8_POST
    printPostIncOperand<1>(MI, 5, STI, O); 
    return;
    break;
  case 23:
    // LD2i64_POST, LD4i32_POST
    printPostIncOperand<16>(MI, 5, STI, O); 
    return;
    break;
  case 24:
    // LD3Rv16b_POST, LD3Rv8b_POST
    printPostIncOperand<3>(MI, 3, STI, O); 
    return;
    break;
  case 25:
    // LD3Rv2s_POST, LD3Rv4s_POST
    printPostIncOperand<12>(MI, 3, STI, O); 
    return;
    break;
  case 26:
    // LD3Rv4h_POST, LD3Rv8h_POST
    printPostIncOperand<6>(MI, 3, STI, O); 
    return;
    break;
  case 27:
    // LD3i16_POST
    printPostIncOperand<6>(MI, 5, STI, O); 
    return;
    break;
  case 28:
    // LD3i32_POST
    printPostIncOperand<12>(MI, 5, STI, O); 
    return;
    break;
  case 29:
    // LD3i64_POST
    printPostIncOperand<24>(MI, 5, STI, O); 
    return;
    break;
  case 30:
    // LD3i8_POST
    printPostIncOperand<3>(MI, 5, STI, O); 
    return;
    break;
  case 31:
    // LD4i64_POST
    printPostIncOperand<32>(MI, 5, STI, O); 
    return;
    break;
  case 32:
    // LDARB, LDARH, LDARW, LDARX, LDAXRB, LDAXRH, LDAXRW, LDAXRX, LDLARB, LD...
    O << ", ["; 
    break;
  case 33:
    // ST1i16_POST, ST1i32_POST, ST1i64_POST, ST1i8_POST, ST2i16_POST, ST2i32...
    O << "], "; 
    break;
  case 34:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b, "; 
    break;
  case 35:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b, "; 
    break;
  }


  // Fragment 2 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 26) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 1, STI, O); 
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSWri, ADDSWrs, ADDSWrx, ADD...
    printOperand(MI, 1, STI, O); 
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 2, STI, O); 
    break;
  case 3:
    // ADRP
    printAdrpLabel(MI, 1, STI, O); 
    return;
    break;
  case 4:
    // BFMWri, BFMXri, CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, C...
    printOperand(MI, 2, STI, O); 
    break;
  case 5:
    // BICv2i32, BICv4i16, BICv4i32, BICv8i16, MOVKWi, MOVKXi, ORRv2i32, ORRv...
    printHexImm(MI, 2, STI, O); 
    printShifter(MI, 3, STI, O); 
    return;
    break;
  case 6:
    // CBNZW, CBNZX, CBZW, CBZX, LDRDl, LDRQl, LDRSWl, LDRSl, LDRWl, LDRXl, P...
    printAlignedLabel(MI, 1, STI, O); 
    return;
    break;
  case 7:
    // FCVTLv2i32
    O << ".2s"; 
    return;
    break;
  case 8:
    // FCVTLv4i32
    O << ".4s"; 
    return;
    break;
  case 9:
    // FMOVDi, FMOVSi, FMOVv2f32_ns, FMOVv2f64_ns, FMOVv4f32_ns
    printFPImmOperand(MI, 1, STI, O); 
    return;
    break;
  case 10:
    // INSvi16gpr, INSvi32gpr, INSvi64gpr, INSvi8gpr
    printOperand(MI, 3, STI, O); 
    return;
    break;
  case 11:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVRegOperand(MI, 3, STI, O); 
    printVectorIndex(MI, 4, STI, O); 
    return;
    break;
  case 12:
    // LDADDALb, LDADDALd, LDADDALh, LDADDALs, LDADDAb, LDADDAd, LDADDAh, LDA...
    printOperand(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 13:
    // MOVID, MOVIv2d_ns
    printSIMDType10Operand(MI, 1, STI, O); 
    return;
    break;
  case 14:
    // MOVIv16b_ns, MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl...
    printHexImm(MI, 1, STI, O); 
    break;
  case 15:
    // MRS
    printMRSSystemRegister(MI, 1, STI, O); 
    return;
    break;
  case 16:
    // ST1i16_POST, ST2i8_POST
    printPostIncOperand<2>(MI, 4, STI, O); 
    return;
    break;
  case 17:
    // ST1i32_POST, ST2i16_POST, ST4i8_POST
    printPostIncOperand<4>(MI, 4, STI, O); 
    return;
    break;
  case 18:
    // ST1i64_POST, ST2i32_POST, ST4i16_POST
    printPostIncOperand<8>(MI, 4, STI, O); 
    return;
    break;
  case 19:
    // ST1i8_POST
    printPostIncOperand<1>(MI, 4, STI, O); 
    return;
    break;
  case 20:
    // ST2i64_POST, ST4i32_POST
    printPostIncOperand<16>(MI, 4, STI, O); 
    return;
    break;
  case 21:
    // ST3i16_POST
    printPostIncOperand<6>(MI, 4, STI, O); 
    return;
    break;
  case 22:
    // ST3i32_POST
    printPostIncOperand<12>(MI, 4, STI, O); 
    return;
    break;
  case 23:
    // ST3i64_POST
    printPostIncOperand<24>(MI, 4, STI, O); 
    return;
    break;
  case 24:
    // ST3i8_POST
    printPostIncOperand<3>(MI, 4, STI, O); 
    return;
    break;
  case 25:
    // ST4i64_POST
    printPostIncOperand<32>(MI, 4, STI, O); 
    return;
    break;
  case 26:
    // SYSxt
    printSysCROperand(MI, 1, STI, O); 
    O << ", "; 
    printSysCROperand(MI, 2, STI, O); 
    O << ", "; 
    printOperand(MI, 3, STI, O); 
    O << ", "; 
    printOperand(MI, 4, STI, O); 
    return;
    break;
  case 27:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBLv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O); 
    O << ", "; 
    printVRegOperand(MI, 2, STI, O); 
    break;
  case 28:
    // TBXv16i8Four, TBXv16i8One, TBXv16i8Three, TBXv16i8Two, TBXv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 2, STI, O); 
    O << ", "; 
    printVRegOperand(MI, 3, STI, O); 
    break;
  }


  // Fragment 3 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 31) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    return;
    break;
  case 1:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    O << ", "; 
    break;
  case 2:
    // CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, CASAs, CASLb, CAS...
    O << ", ["; 
    break;
  case 3:
    // CMEQv16i8rz, CMEQv1i64rz, CMEQv2i32rz, CMEQv2i64rz, CMEQv4i16rz, CMEQv...
    O << ", #0"; 
    return;
    break;
  case 4:
    // CPYi16, CPYi32, CPYi64, CPYi8, DUPv16i8lane, DUPv2i32lane, DUPv2i64lan...
    printVectorIndex(MI, 2, STI, O); 
    return;
    break;
  case 5:
    // FCMEQv1i32rz, FCMEQv1i64rz, FCMEQv2i32rz, FCMEQv2i64rz, FCMEQv4i32rz, ...
    O << ", #0.0"; 
    return;
    break;
  case 6:
    // FCVTLv4i16
    O << ".4h"; 
    return;
    break;
  case 7:
    // FCVTLv8i16
    O << ".8h"; 
    return;
    break;
  case 8:
    // FCVTNv4i32, FCVTXNv4f32
    O << ".2d"; 
    return;
    break;
  case 9:
    // LDARB, LDARH, LDARW, LDARX, LDAXRB, LDAXRH, LDAXRW, LDAXRX, LDLARB, LD...
    O << ']'; 
    return;
    break;
  case 10:
    // LDRBBpost, LDRBpost, LDRDpost, LDRHHpost, LDRHpost, LDRQpost, LDRSBWpo...
    O << "], "; 
    printOperand(MI, 3, STI, O); 
    return;
    break;
  case 11:
    // MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl, MOVIv8i16, ...
    printShifter(MI, 2, STI, O); 
    return;
    break;
  case 12:
    // SHLLv16i8, SHLLv8i8
    O << ", #8"; 
    return;
    break;
  case 13:
    // SHLLv2i32, SHLLv4i32
    O << ", #32"; 
    return;
    break;
  case 14:
    // SHLLv4i16, SHLLv8i16
    O << ", #16"; 
    return;
    break;
  case 15:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b"; 
    return;
    break;
  case 16:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b"; 
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 36) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSXrx64, ADDXrx64, ADDv1i64, ASRVWr, A...
    printOperand(MI, 2, STI, O); 
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv4i32_v4i16, ADDHNv8i16_v8i8, ADDPv16i8, ADDPv2...
    printVRegOperand(MI, 2, STI, O); 
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, BITv16i8, BITv8i...
    printVRegOperand(MI, 3, STI, O); 
    break;
  case 3:
    // ADDSWri, ADDSXri, ADDWri, ADDXri, SUBSWri, SUBSXri, SUBWri, SUBXri
    printAddSubImm(MI, 2, STI, O); 
    return;
    break;
  case 4:
    // ADDSWrs, ADDSXrs, ADDWrs, ADDXrs, ANDSWrs, ANDSXrs, ANDWrs, ANDXrs, BI...
    printShiftedRegister(MI, 2, STI, O); 
    return;
    break;
  case 5:
    // ADDSWrx, ADDSXrx, ADDWrx, ADDXrx, SUBSWrx, SUBSXrx, SUBWrx, SUBXrx
    printExtendedRegister(MI, 2, STI, O); 
    return;
    break;
  case 6:
    // ANDSWri, ANDWri, EORWri, ORRWri
    printLogicalImm32(MI, 2, STI, O); 
    return;
    break;
  case 7:
    // ANDSXri, ANDXri, EORXri, ORRXri
    printLogicalImm64(MI, 2, STI, O); 
    return;
    break;
  case 8:
    // BFMWri, BFMXri, CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, C...
    printOperand(MI, 3, STI, O); 
    break;
  case 9:
    // LDRBBui, LDRBui, LDRSBWui, LDRSBXui, STRBBui, STRBui
    printUImm12Offset<1>(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 10:
    // LDRDui, LDRXui, PRFMui, STRDui, STRXui
    printUImm12Offset<8>(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 11:
    // LDRHHui, LDRHui, LDRSHWui, LDRSHXui, STRHHui, STRHui
    printUImm12Offset<2>(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 12:
    // LDRQui, STRQui
    printUImm12Offset<16>(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 13:
    // LDRSWui, LDRSui, LDRWui, STRSui, STRWui
    printUImm12Offset<4>(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 14:
    // SYSLxt
    printSysCROperand(MI, 2, STI, O); 
    O << ", "; 
    printSysCROperand(MI, 3, STI, O); 
    O << ", "; 
    printOperand(MI, 4, STI, O); 
    return;
    break;
  case 15:
    // TBNZW, TBNZX, TBZW, TBZX
    printAlignedLabel(MI, 2, STI, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 40) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    return;
    break;
  case 1:
    // ADDSXrx64, ADDXrx64, SUBSXrx64, SUBXrx64
    printArithExtend(MI, 3, STI, O); 
    return;
    break;
  case 2:
    // BFMWri, BFMXri, CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi...
    O << ", "; 
    break;
  case 3:
    // CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, CASAs, CASLb, CAS...
    O << ']'; 
    return;
    break;
  case 4:
    // FMLAv1i32_indexed, FMLAv1i64_indexed, FMLAv2i32_indexed, FMLAv2i64_ind...
    printVectorIndex(MI, 4, STI, O); 
    return;
    break;
  case 5:
    // FMULXv1i32_indexed, FMULXv1i64_indexed, FMULXv2i32_indexed, FMULXv2i64...
    printVectorIndex(MI, 3, STI, O); 
    return;
    break;
  case 6:
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    O << "], "; 
    break;
  case 7:
    // LDRBBpre, LDRBpre, LDRDpre, LDRHHpre, LDRHpre, LDRQpre, LDRSBWpre, LDR...
    O << "]!"; 
    return;
    break;
  case 8:
    // STLXPW, STLXPX, STXPW, STXPX
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 6 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 44) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BFMWri, BFMXri
    printOperand(MI, 4, STI, O); 
    return;
    break;
  case 1:
    // CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi, CCMPXr, CSELWr...
    printCondCode(MI, 3, STI, O); 
    return;
    break;
  case 2:
    // EXTRWrri, EXTRXrri, EXTv16i8, EXTv8i8, FMADDDrrr, FMADDSrrr, FMSUBDrrr...
    printOperand(MI, 3, STI, O); 
    return;
    break;
  case 3:
    // LDNPDi, LDNPXi, LDPDi, LDPXi, STNPDi, STNPXi, STPDi, STPXi
    printImmScale<8>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 4:
    // LDNPQi, LDPQi, STNPQi, STPQi
    printImmScale<16>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 5:
    // LDNPSi, LDNPWi, LDPSWi, LDPSi, LDPWi, STNPSi, STNPWi, STPSi, STPWi
    printImmScale<4>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 6:
    // LDPDpost, LDPDpre, LDPXpost, LDPXpre, STPDpost, STPDpre, STPXpost, STP...
    printImmScale<8>(MI, 4, STI, O); 
    break;
  case 7:
    // LDPQpost, LDPQpre, STPQpost, STPQpre
    printImmScale<16>(MI, 4, STI, O); 
    break;
  case 8:
    // LDPSWpost, LDPSWpre, LDPSpost, LDPSpre, LDPWpost, LDPWpre, STPSpost, S...
    printImmScale<4>(MI, 4, STI, O); 
    break;
  case 9:
    // LDRBBroW, LDRBroW, LDRSBWroW, LDRSBXroW, STRBBroW, STRBroW
    printMemExtend<'w', 8>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 10:
    // LDRBBroX, LDRBroX, LDRSBWroX, LDRSBXroX, STRBBroX, STRBroX
    printMemExtend<'x', 8>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 11:
    // LDRDroW, LDRXroW, PRFMroW, STRDroW, STRXroW
    printMemExtend<'w', 64>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 12:
    // LDRDroX, LDRXroX, PRFMroX, STRDroX, STRXroX
    printMemExtend<'x', 64>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 13:
    // LDRHHroW, LDRHroW, LDRSHWroW, LDRSHXroW, STRHHroW, STRHroW
    printMemExtend<'w', 16>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 14:
    // LDRHHroX, LDRHroX, LDRSHWroX, LDRSHXroX, STRHHroX, STRHroX
    printMemExtend<'x', 16>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 15:
    // LDRQroW, STRQroW
    printMemExtend<'w', 128>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 16:
    // LDRQroX, STRQroX
    printMemExtend<'x', 128>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 17:
    // LDRSWroW, LDRSroW, LDRWroW, STRSroW, STRWroW
    printMemExtend<'w', 32>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 18:
    // LDRSWroX, LDRSroX, LDRWroX, STRSroX, STRWroX
    printMemExtend<'x', 32>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 49) & 1) {
    // LDPDpre, LDPQpre, LDPSWpre, LDPSpre, LDPWpre, LDPXpre, STPDpre, STPQpr...
    O << "]!"; 
    return;
  } else {
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64AppleInstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 484 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 13 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 26 */ 'W', '9', '_', 'W', '1', '0', 0,
  /* 33 */ 'X', '9', '_', 'X', '1', '0', 0,
  /* 40 */ 'b', '1', '0', 0,
  /* 44 */ 'd', '1', '0', 0,
  /* 48 */ 'h', '1', '0', 0,
  /* 52 */ 'q', '1', '0', 0,
  /* 56 */ 's', '1', '0', 0,
  /* 60 */ 'w', '1', '0', 0,
  /* 64 */ 'x', '1', '0', 0,
  /* 68 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 84 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 100 */ 'W', '1', '9', '_', 'W', '2', '0', 0,
  /* 108 */ 'X', '1', '9', '_', 'X', '2', '0', 0,
  /* 116 */ 'b', '2', '0', 0,
  /* 120 */ 'd', '2', '0', 0,
  /* 124 */ 'h', '2', '0', 0,
  /* 128 */ 'q', '2', '0', 0,
  /* 132 */ 's', '2', '0', 0,
  /* 136 */ 'w', '2', '0', 0,
  /* 140 */ 'x', '2', '0', 0,
  /* 144 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 160 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 176 */ 'W', '2', '9', '_', 'W', '3', '0', 0,
  /* 184 */ 'b', '3', '0', 0,
  /* 188 */ 'd', '3', '0', 0,
  /* 192 */ 'h', '3', '0', 0,
  /* 196 */ 'q', '3', '0', 0,
  /* 200 */ 's', '3', '0', 0,
  /* 204 */ 'w', '3', '0', 0,
  /* 208 */ 'x', '3', '0', 0,
  /* 212 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 227 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 242 */ 'W', 'Z', 'R', '_', 'W', '0', 0,
  /* 249 */ 'X', 'Z', 'R', '_', 'X', '0', 0,
  /* 256 */ 'b', '0', 0,
  /* 259 */ 'd', '0', 0,
  /* 262 */ 'h', '0', 0,
  /* 265 */ 'q', '0', 0,
  /* 268 */ 's', '0', 0,
  /* 271 */ 'w', '0', 0,
  /* 274 */ 'x', '0', 0,
  /* 277 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 291 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 305 */ 'W', '1', '0', '_', 'W', '1', '1', 0,
  /* 313 */ 'X', '1', '0', '_', 'X', '1', '1', 0,
  /* 321 */ 'b', '1', '1', 0,
  /* 325 */ 'd', '1', '1', 0,
  /* 329 */ 'h', '1', '1', 0,
  /* 333 */ 'q', '1', '1', 0,
  /* 337 */ 's', '1', '1', 0,
  /* 341 */ 'w', '1', '1', 0,
  /* 345 */ 'x', '1', '1', 0,
  /* 349 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 365 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 381 */ 'W', '2', '0', '_', 'W', '2', '1', 0,
  /* 389 */ 'X', '2', '0', '_', 'X', '2', '1', 0,
  /* 397 */ 'b', '2', '1', 0,
  /* 401 */ 'd', '2', '1', 0,
  /* 405 */ 'h', '2', '1', 0,
  /* 409 */ 'q', '2', '1', 0,
  /* 413 */ 's', '2', '1', 0,
  /* 417 */ 'w', '2', '1', 0,
  /* 421 */ 'x', '2', '1', 0,
  /* 425 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 441 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 457 */ 'b', '3', '1', 0,
  /* 461 */ 'd', '3', '1', 0,
  /* 465 */ 'h', '3', '1', 0,
  /* 469 */ 'q', '3', '1', 0,
  /* 473 */ 's', '3', '1', 0,
  /* 477 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 491 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 505 */ 'W', '0', '_', 'W', '1', 0,
  /* 511 */ 'X', '0', '_', 'X', '1', 0,
  /* 517 */ 'b', '1', 0,
  /* 520 */ 'd', '1', 0,
  /* 523 */ 'h', '1', 0,
  /* 526 */ 'q', '1', 0,
  /* 529 */ 's', '1', 0,
  /* 532 */ 'w', '1', 0,
  /* 535 */ 'x', '1', 0,
  /* 538 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 553 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 568 */ 'W', '1', '1', '_', 'W', '1', '2', 0,
  /* 576 */ 'X', '1', '1', '_', 'X', '1', '2', 0,
  /* 584 */ 'b', '1', '2', 0,
  /* 588 */ 'd', '1', '2', 0,
  /* 592 */ 'h', '1', '2', 0,
  /* 596 */ 'q', '1', '2', 0,
  /* 600 */ 's', '1', '2', 0,
  /* 604 */ 'w', '1', '2', 0,
  /* 608 */ 'x', '1', '2', 0,
  /* 612 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 628 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 644 */ 'W', '2', '1', '_', 'W', '2', '2', 0,
  /* 652 */ 'X', '2', '1', '_', 'X', '2', '2', 0,
  /* 660 */ 'b', '2', '2', 0,
  /* 664 */ 'd', '2', '2', 0,
  /* 668 */ 'h', '2', '2', 0,
  /* 672 */ 'q', '2', '2', 0,
  /* 676 */ 's', '2', '2', 0,
  /* 680 */ 'w', '2', '2', 0,
  /* 684 */ 'x', '2', '2', 0,
  /* 688 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 701 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 714 */ 'W', '1', '_', 'W', '2', 0,
  /* 720 */ 'X', '1', '_', 'X', '2', 0,
  /* 726 */ 'b', '2', 0,
  /* 729 */ 'd', '2', 0,
  /* 732 */ 'h', '2', 0,
  /* 735 */ 'q', '2', 0,
  /* 738 */ 's', '2', 0,
  /* 741 */ 'w', '2', 0,
  /* 744 */ 'x', '2', 0,
  /* 747 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 763 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 779 */ 'W', '1', '2', '_', 'W', '1', '3', 0,
  /* 787 */ 'X', '1', '2', '_', 'X', '1', '3', 0,
  /* 795 */ 'b', '1', '3', 0,
  /* 799 */ 'd', '1', '3', 0,
  /* 803 */ 'h', '1', '3', 0,
  /* 807 */ 'q', '1', '3', 0,
  /* 811 */ 's', '1', '3', 0,
  /* 815 */ 'w', '1', '3', 0,
  /* 819 */ 'x', '1', '3', 0,
  /* 823 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 839 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 855 */ 'W', '2', '2', '_', 'W', '2', '3', 0,
  /* 863 */ 'X', '2', '2', '_', 'X', '2', '3', 0,
  /* 871 */ 'b', '2', '3', 0,
  /* 875 */ 'd', '2', '3', 0,
  /* 879 */ 'h', '2', '3', 0,
  /* 883 */ 'q', '2', '3', 0,
  /* 887 */ 's', '2', '3', 0,
  /* 891 */ 'w', '2', '3', 0,
  /* 895 */ 'x', '2', '3', 0,
  /* 899 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 911 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 923 */ 'W', '2', '_', 'W', '3', 0,
  /* 929 */ 'X', '2', '_', 'X', '3', 0,
  /* 935 */ 'b', '3', 0,
  /* 938 */ 'd', '3', 0,
  /* 941 */ 'h', '3', 0,
  /* 944 */ 'q', '3', 0,
  /* 947 */ 's', '3', 0,
  /* 950 */ 'w', '3', 0,
  /* 953 */ 'x', '3', 0,
  /* 956 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 972 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 988 */ 'W', '1', '3', '_', 'W', '1', '4', 0,
  /* 996 */ 'X', '1', '3', '_', 'X', '1', '4', 0,
  /* 1004 */ 'b', '1', '4', 0,
  /* 1008 */ 'd', '1', '4', 0,
  /* 1012 */ 'h', '1', '4', 0,
  /* 1016 */ 'q', '1', '4', 0,
  /* 1020 */ 's', '1', '4', 0,
  /* 1024 */ 'w', '1', '4', 0,
  /* 1028 */ 'x', '1', '4', 0,
  /* 1032 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 1048 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 1064 */ 'W', '2', '3', '_', 'W', '2', '4', 0,
  /* 1072 */ 'X', '2', '3', '_', 'X', '2', '4', 0,
  /* 1080 */ 'b', '2', '4', 0,
  /* 1084 */ 'd', '2', '4', 0,
  /* 1088 */ 'h', '2', '4', 0,
  /* 1092 */ 'q', '2', '4', 0,
  /* 1096 */ 's', '2', '4', 0,
  /* 1100 */ 'w', '2', '4', 0,
  /* 1104 */ 'x', '2', '4', 0,
  /* 1108 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 1120 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 1132 */ 'W', '3', '_', 'W', '4', 0,
  /* 1138 */ 'X', '3', '_', 'X', '4', 0,
  /* 1144 */ 'b', '4', 0,
  /* 1147 */ 'd', '4', 0,
  /* 1150 */ 'h', '4', 0,
  /* 1153 */ 'q', '4', 0,
  /* 1156 */ 's', '4', 0,
  /* 1159 */ 'w', '4', 0,
  /* 1162 */ 'x', '4', 0,
  /* 1165 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 1181 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 1197 */ 'W', '1', '4', '_', 'W', '1', '5', 0,
  /* 1205 */ 'X', '1', '4', '_', 'X', '1', '5', 0,
  /* 1213 */ 'b', '1', '5', 0,
  /* 1217 */ 'd', '1', '5', 0,
  /* 1221 */ 'h', '1', '5', 0,
  /* 1225 */ 'q', '1', '5', 0,
  /* 1229 */ 's', '1', '5', 0,
  /* 1233 */ 'w', '1', '5', 0,
  /* 1237 */ 'x', '1', '5', 0,
  /* 1241 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 1257 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 1273 */ 'W', '2', '4', '_', 'W', '2', '5', 0,
  /* 1281 */ 'X', '2', '4', '_', 'X', '2', '5', 0,
  /* 1289 */ 'b', '2', '5', 0,
  /* 1293 */ 'd', '2', '5', 0,
  /* 1297 */ 'h', '2', '5', 0,
  /* 1301 */ 'q', '2', '5', 0,
  /* 1305 */ 's', '2', '5', 0,
  /* 1309 */ 'w', '2', '5', 0,
  /* 1313 */ 'x', '2', '5', 0,
  /* 1317 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 1329 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 1341 */ 'W', '4', '_', 'W', '5', 0,
  /* 1347 */ 'X', '4', '_', 'X', '5', 0,
  /* 1353 */ 'b', '5', 0,
  /* 1356 */ 'd', '5', 0,
  /* 1359 */ 'h', '5', 0,
  /* 1362 */ 'q', '5', 0,
  /* 1365 */ 's', '5', 0,
  /* 1368 */ 'w', '5', 0,
  /* 1371 */ 'x', '5', 0,
  /* 1374 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 1390 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 1406 */ 'W', '1', '5', '_', 'W', '1', '6', 0,
  /* 1414 */ 'X', '1', '5', '_', 'X', '1', '6', 0,
  /* 1422 */ 'b', '1', '6', 0,
  /* 1426 */ 'd', '1', '6', 0,
  /* 1430 */ 'h', '1', '6', 0,
  /* 1434 */ 'q', '1', '6', 0,
  /* 1438 */ 's', '1', '6', 0,
  /* 1442 */ 'w', '1', '6', 0,
  /* 1446 */ 'x', '1', '6', 0,
  /* 1450 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1466 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1482 */ 'W', '2', '5', '_', 'W', '2', '6', 0,
  /* 1490 */ 'X', '2', '5', '_', 'X', '2', '6', 0,
  /* 1498 */ 'b', '2', '6', 0,
  /* 1502 */ 'd', '2', '6', 0,
  /* 1506 */ 'h', '2', '6', 0,
  /* 1510 */ 'q', '2', '6', 0,
  /* 1514 */ 's', '2', '6', 0,
  /* 1518 */ 'w', '2', '6', 0,
  /* 1522 */ 'x', '2', '6', 0,
  /* 1526 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1538 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 1550 */ 'W', '5', '_', 'W', '6', 0,
  /* 1556 */ 'X', '5', '_', 'X', '6', 0,
  /* 1562 */ 'b', '6', 0,
  /* 1565 */ 'd', '6', 0,
  /* 1568 */ 'h', '6', 0,
  /* 1571 */ 'q', '6', 0,
  /* 1574 */ 's', '6', 0,
  /* 1577 */ 'w', '6', 0,
  /* 1580 */ 'x', '6', 0,
  /* 1583 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1599 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 1615 */ 'W', '1', '6', '_', 'W', '1', '7', 0,
  /* 1623 */ 'X', '1', '6', '_', 'X', '1', '7', 0,
  /* 1631 */ 'b', '1', '7', 0,
  /* 1635 */ 'd', '1', '7', 0,
  /* 1639 */ 'h', '1', '7', 0,
  /* 1643 */ 'q', '1', '7', 0,
  /* 1647 */ 's', '1', '7', 0,
  /* 1651 */ 'w', '1', '7', 0,
  /* 1655 */ 'x', '1', '7', 0,
  /* 1659 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1675 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 1691 */ 'W', '2', '6', '_', 'W', '2', '7', 0,
  /* 1699 */ 'X', '2', '6', '_', 'X', '2', '7', 0,
  /* 1707 */ 'b', '2', '7', 0,
  /* 1711 */ 'd', '2', '7', 0,
  /* 1715 */ 'h', '2', '7', 0,
  /* 1719 */ 'q', '2', '7', 0,
  /* 1723 */ 's', '2', '7', 0,
  /* 1727 */ 'w', '2', '7', 0,
  /* 1731 */ 'x', '2', '7', 0,
  /* 1735 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1747 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1759 */ 'W', '6', '_', 'W', '7', 0,
  /* 1765 */ 'X', '6', '_', 'X', '7', 0,
  /* 1771 */ 'b', '7', 0,
  /* 1774 */ 'd', '7', 0,
  /* 1777 */ 'h', '7', 0,
  /* 1780 */ 'q', '7', 0,
  /* 1783 */ 's', '7', 0,
  /* 1786 */ 'w', '7', 0,
  /* 1789 */ 'x', '7', 0,
  /* 1792 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1808 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 1824 */ 'W', '1', '7', '_', 'W', '1', '8', 0,
  /* 1832 */ 'X', '1', '7', '_', 'X', '1', '8', 0,
  /* 1840 */ 'b', '1', '8', 0,
  /* 1844 */ 'd', '1', '8', 0,
  /* 1848 */ 'h', '1', '8', 0,
  /* 1852 */ 'q', '1', '8', 0,
  /* 1856 */ 's', '1', '8', 0,
  /* 1860 */ 'w', '1', '8', 0,
  /* 1864 */ 'x', '1', '8', 0,
  /* 1868 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1884 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 1900 */ 'W', '2', '7', '_', 'W', '2', '8', 0,
  /* 1908 */ 'X', '2', '7', '_', 'X', '2', '8', 0,
  /* 1916 */ 'b', '2', '8', 0,
  /* 1920 */ 'd', '2', '8', 0,
  /* 1924 */ 'h', '2', '8', 0,
  /* 1928 */ 'q', '2', '8', 0,
  /* 1932 */ 's', '2', '8', 0,
  /* 1936 */ 'w', '2', '8', 0,
  /* 1940 */ 'x', '2', '8', 0,
  /* 1944 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1956 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1968 */ 'W', '7', '_', 'W', '8', 0,
  /* 1974 */ 'X', '7', '_', 'X', '8', 0,
  /* 1980 */ 'b', '8', 0,
  /* 1983 */ 'd', '8', 0,
  /* 1986 */ 'h', '8', 0,
  /* 1989 */ 'q', '8', 0,
  /* 1992 */ 's', '8', 0,
  /* 1995 */ 'w', '8', 0,
  /* 1998 */ 'x', '8', 0,
  /* 2001 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 2017 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 2033 */ 'W', '1', '8', '_', 'W', '1', '9', 0,
  /* 2041 */ 'X', '1', '8', '_', 'X', '1', '9', 0,
  /* 2049 */ 'b', '1', '9', 0,
  /* 2053 */ 'd', '1', '9', 0,
  /* 2057 */ 'h', '1', '9', 0,
  /* 2061 */ 'q', '1', '9', 0,
  /* 2065 */ 's', '1', '9', 0,
  /* 2069 */ 'w', '1', '9', 0,
  /* 2073 */ 'x', '1', '9', 0,
  /* 2077 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 2093 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 2109 */ 'W', '2', '8', '_', 'W', '2', '9', 0,
  /* 2117 */ 'b', '2', '9', 0,
  /* 2121 */ 'd', '2', '9', 0,
  /* 2125 */ 'h', '2', '9', 0,
  /* 2129 */ 'q', '2', '9', 0,
  /* 2133 */ 's', '2', '9', 0,
  /* 2137 */ 'w', '2', '9', 0,
  /* 2141 */ 'x', '2', '9', 0,
  /* 2145 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 2157 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 2169 */ 'W', '8', '_', 'W', '9', 0,
  /* 2175 */ 'X', '8', '_', 'X', '9', 0,
  /* 2181 */ 'b', '9', 0,
  /* 2184 */ 'd', '9', 0,
  /* 2187 */ 'h', '9', 0,
  /* 2190 */ 'q', '9', 0,
  /* 2193 */ 's', '9', 0,
  /* 2196 */ 'w', '9', 0,
  /* 2199 */ 'x', '9', 0,
  /* 2202 */ 'X', '2', '8', '_', 'F', 'P', 0,
  /* 2209 */ 'F', 'P', '_', 'L', 'R', 0,
  /* 2215 */ 'W', '3', '0', '_', 'W', 'Z', 'R', 0,
  /* 2223 */ 'L', 'R', '_', 'X', 'Z', 'R', 0,
  /* 2230 */ 'w', 's', 'p', 0,
  /* 2234 */ 'w', 'z', 'r', 0,
  /* 2238 */ 'x', 'z', 'r', 0,
  /* 2242 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint16_t RegAsmOffsetNoRegAltName[] = {
    2141, 208, 2242, 2231, 2230, 2234, 2238, 256, 517, 726, 935, 1144, 1353, 1562, 
    1771, 1980, 2181, 40, 321, 584, 795, 1004, 1213, 1422, 1631, 1840, 2049, 116, 
    397, 660, 871, 1080, 1289, 1498, 1707, 1916, 2117, 184, 457, 259, 520, 729, 
    938, 1147, 1356, 1565, 1774, 1983, 2184, 44, 325, 588, 799, 1008, 1217, 1426, 
    1635, 1844, 2053, 120, 401, 664, 875, 1084, 1293, 1502, 1711, 1920, 2121, 188, 
    461, 262, 523, 732, 941, 1150, 1359, 1568, 1777, 1986, 2187, 48, 329, 592, 
    803, 1012, 1221, 1430, 1639, 1848, 2057, 124, 405, 668, 879, 1088, 1297, 1506, 
    1715, 1924, 2125, 192, 465, 265, 526, 735, 944, 1153, 1362, 1571, 1780, 1989, 
    2190, 52, 333, 596, 807, 1016, 1225, 1434, 1643, 1852, 2061, 128, 409, 672, 
    883, 1092, 1301, 1510, 1719, 1928, 2129, 196, 469, 268, 529, 738, 947, 1156, 
    1365, 1574, 1783, 1992, 2193, 56, 337, 600, 811, 1020, 1229, 1438, 1647, 1856, 
    2065, 132, 413, 676, 887, 1096, 1305, 1514, 1723, 1932, 2133, 200, 473, 271, 
    532, 741, 950, 1159, 1368, 1577, 1786, 1995, 2196, 60, 341, 604, 815, 1024, 
    1233, 1442, 1651, 1860, 2069, 136, 417, 680, 891, 1100, 1309, 1518, 1727, 1936, 
    2137, 204, 274, 535, 744, 953, 1162, 1371, 1580, 1789, 1998, 2199, 64, 345, 
    608, 819, 1028, 1237, 1446, 1655, 1864, 2073, 140, 421, 684, 895, 1104, 1313, 
    1522, 1731, 1940, 485, 695, 905, 1114, 1323, 1532, 1741, 1950, 2151, 6, 283, 
    545, 755, 964, 1173, 1382, 1591, 1800, 2009, 76, 357, 620, 831, 1040, 1249, 
    1458, 1667, 1876, 2085, 152, 433, 220, 899, 1108, 1317, 1526, 1735, 1944, 2145, 
    0, 277, 538, 747, 956, 1165, 1374, 1583, 1792, 2001, 68, 349, 612, 823, 
    1032, 1241, 1450, 1659, 1868, 2077, 144, 425, 212, 477, 688, 692, 902, 1111, 
    1320, 1529, 1738, 1947, 2148, 3, 280, 541, 751, 960, 1169, 1378, 1587, 1796, 
    2005, 72, 353, 616, 827, 1036, 1245, 1454, 1663, 1872, 2081, 148, 429, 216, 
    481, 499, 708, 917, 1126, 1335, 1544, 1753, 1962, 2163, 19, 297, 560, 771, 
    980, 1189, 1398, 1607, 1816, 2025, 92, 373, 636, 847, 1056, 1265, 1474, 1683, 
    1892, 2101, 168, 449, 235, 911, 1120, 1329, 1538, 1747, 1956, 2157, 13, 291, 
    553, 763, 972, 1181, 1390, 1599, 1808, 2017, 84, 365, 628, 839, 1048, 1257, 
    1466, 1675, 1884, 2093, 160, 441, 227, 491, 701, 705, 914, 1123, 1332, 1541, 
    1750, 1959, 2160, 16, 294, 556, 767, 976, 1185, 1394, 1603, 1812, 2021, 88, 
    369, 632, 843, 1052, 1261, 1470, 1679, 1888, 2097, 164, 445, 231, 495, 242, 
    2215, 505, 714, 923, 1132, 1341, 1550, 1759, 1968, 2169, 26, 305, 568, 779, 
    988, 1197, 1406, 1615, 1824, 2033, 100, 381, 644, 855, 1064, 1273, 1482, 1691, 
    1900, 2109, 176, 2209, 2223, 249, 2202, 511, 720, 929, 1138, 1347, 1556, 1765, 
    1974, 2175, 33, 313, 576, 787, 996, 1205, 1414, 1623, 1832, 2041, 108, 389, 
    652, 863, 1072, 1281, 1490, 1699, 1908, 
  };

  static const char AsmStrsvlist1[] = {
  /* 0 */ 0,
  };

  static const uint8_t RegAsmOffsetvlist1[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 
  };

  static const char AsmStrsvreg[] = {
  /* 0 */ 'v', '1', '0', 0,
  /* 4 */ 'v', '2', '0', 0,
  /* 8 */ 'v', '3', '0', 0,
  /* 12 */ 'v', '0', 0,
  /* 15 */ 'v', '1', '1', 0,
  /* 19 */ 'v', '2', '1', 0,
  /* 23 */ 'v', '3', '1', 0,
  /* 27 */ 'v', '1', 0,
  /* 30 */ 'v', '1', '2', 0,
  /* 34 */ 'v', '2', '2', 0,
  /* 38 */ 'v', '2', 0,
  /* 41 */ 'v', '1', '3', 0,
  /* 45 */ 'v', '2', '3', 0,
  /* 49 */ 'v', '3', 0,
  /* 52 */ 'v', '1', '4', 0,
  /* 56 */ 'v', '2', '4', 0,
  /* 60 */ 'v', '4', 0,
  /* 63 */ 'v', '1', '5', 0,
  /* 67 */ 'v', '2', '5', 0,
  /* 71 */ 'v', '5', 0,
  /* 74 */ 'v', '1', '6', 0,
  /* 78 */ 'v', '2', '6', 0,
  /* 82 */ 'v', '6', 0,
  /* 85 */ 'v', '1', '7', 0,
  /* 89 */ 'v', '2', '7', 0,
  /* 93 */ 'v', '7', 0,
  /* 96 */ 'v', '1', '8', 0,
  /* 100 */ 'v', '2', '8', 0,
  /* 104 */ 'v', '8', 0,
  /* 107 */ 'v', '1', '9', 0,
  /* 111 */ 'v', '2', '9', 0,
  /* 115 */ 'v', '9', 0,
  };

  static const uint8_t RegAsmOffsetvreg[] = {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 
    15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 
    67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 
    93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 
    19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 
    41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 
    89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 
    71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 
    107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AArch64::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case AArch64::vlist1:
    assert(*(AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1];
  case AArch64::vreg:
    assert(*(AsmStrsvreg+RegAsmOffsetvreg[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvreg+RegAsmOffsetvreg[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool AArch64AppleInstPrinterValidateMCOperand(
       const MCOperand &MCOp, unsigned PredicateIndex);
bool AArch64AppleInstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmn $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmn $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sponly:$dst, GPR32sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sp:$dst, GPR32sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sponly:$dst, GPR64sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sp:$dst, GPR64sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSWri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSWri WZR, GPR32:$src1, logical_imm32:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ANDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, logical_shift32:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "ands $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSXri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSXri XZR, GPR64:$src1, logical_imm64:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x05";
      break;
    }
    return false;
  case AArch64::ANDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, logical_shift64:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "ands $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "and $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "and $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bics $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bics $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bic $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bic $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::CLREX:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREX 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CSINCWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINCXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSNEGWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSNEGXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::DCPS1:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::EONWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eon $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EONXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eon $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eor $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eor $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EXTRWrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRWrri GPR32:$dst, GPR32:$src, GPR32:$src, imm0_31:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::EXTRXrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRXrri GPR64:$dst, GPR64:$src, GPR64:$src, imm0_63:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::HINT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT { 0, 0, 0 })
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT { 0, 0, 1 })
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT { 0, 1, 0 })
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT { 0, 1, 1 })
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT { 1, 0, 0 })
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT { 1, 0, 1 })
      AsmString = "sevl";
      break;
    }
    return false;
  case AArch64::INSvi16gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi16gpr V128:$dst, VectorIndexH:$idx, GPR32:$src)
      AsmString = "mov.h	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi16lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi16lane V128:$dst, VectorIndexH:$idx, V128:$src, VectorIndexH:$idx2)
      AsmString = "mov.h $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::INSvi32gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi32gpr V128:$dst, VectorIndexS:$idx, GPR32:$src)
      AsmString = "mov.s	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi32lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi32lane V128:$dst, VectorIndexS:$idx, V128:$src, VectorIndexS:$idx2)
      AsmString = "mov.s $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::INSvi64gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi64gpr V128:$dst, VectorIndexD:$idx, GPR64:$src)
      AsmString = "mov.d	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi64lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi64lane V128:$dst, VectorIndexD:$idx, V128:$src, VectorIndexD:$idx2)
      AsmString = "mov.d $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::INSvi8gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi8gpr V128:$dst, VectorIndexB:$idx, GPR32:$src)
      AsmString = "mov.b	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi8lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi8lane V128:$dst, VectorIndexB:$idx, V128:$src, VectorIndexB:$idx2)
      AsmString = "mov.b $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LD1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0D, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0E, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0F, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x10, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x11, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD2Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0E, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x10, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x11, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD3Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0B, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0D, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0E, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0F, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x10, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x11, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x10, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LDADDLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDADDLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDADDLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDADDLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDADDLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDADDb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDADDd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDADDh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDADDs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDCLRLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDCLRLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDCLRLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDCLRLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDCLRb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDCLRd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDCLRh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDCLRs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDEORLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDEORLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDEORLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDEORLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDEORb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDEORd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDEORh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDEORs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldpsw $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSWroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsw $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsw $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDSETLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSETLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSETLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSETLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSETLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSETb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSETd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSETh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stseth	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSETs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMAXLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMAXLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMAXLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMAXLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMAXb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMAXd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMAXh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMAXs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMINLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMINLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMINLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMINLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMINb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMINd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMINh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDSMINs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsw $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDUMAXLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMAXLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMAXLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMAXLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMAXLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMAXb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMAXd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMAXh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMAXs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMINLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMINLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMINLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMINLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMINb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMINd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMINh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg())) {
      // (LDUMINs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursw $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::MADDWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mul $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MADDXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mul $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MOVKWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKWi GPR32:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MOVKXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 48) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g3:$sym, 48)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 32) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g2:$sym, 32)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MSUBWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mneg $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mneg $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::NOTv16i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv16i8 V128:$Vd, V128:$Vn)
      AsmString = "mvn.16b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::NOTv8i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv8i8 V64:$Vd, V64:$Vn)
      AsmString = "mvn.8b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORNWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, logical_shift32:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orn $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORNXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, logical_shift64:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orn $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orr $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orr $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRv16i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv16i8 V128:$dst, V128:$src, V128:$src)
      AsmString = "mov.16b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORRv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv8i8 V64:$dst, V64:$src, V64:$src)
      AsmString = "mov.8b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::PRFMroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (PRFMroX prfop:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "prfm $\xFF\x01\x16, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::PRFMui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFMui prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfm $\xFF\x01\x16, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFUMi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFUMi prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfum $\xFF\x01\x16, [$\x02]";
      break;
    }
    return false;
  case AArch64::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::LR) {
      // (RET LR)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCSXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (SBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "sxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smull $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smnegl $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ST1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::ST2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::ST3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::ST3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::ST4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::STNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::SUBSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmp $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmp $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SYSxt:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(4).getReg() == AArch64::XZR) {
      // (SYSxt imm0_7:$op1, sys_cr_op:$Cn, sys_cr_op:$Cm, imm0_7:$op2, XZR)
      AsmString = "sys $\x01, $\xFF\x02\x17, $\xFF\x03\x17, $\x04";
      break;
    }
    return false;
  case AArch64::UBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (UBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "uxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umull $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UMOVvi32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (UMOVvi32 GPR32:$dst, V128:$src, VectorIndexS:$idx)
      AsmString = "mov.s	$\x01, $\xFF\x02\x06$\xFF\x03\x09";
      break;
    }
    return false;
  case AArch64::UMOVvi64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (UMOVvi64 GPR64:$dst, V128:$src, VectorIndexD:$idx)
      AsmString = "mov.d	$\x01, $\xFF\x02\x06$\xFF\x03\x09";
      break;
    }
    return false;
  case AArch64::UMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umnegl $\x01, $\x02, $\x03";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AArch64AppleInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printAddSubImm(MI, OpIdx, STI, OS);
    break;
  case 1:
    printShifter(MI, OpIdx, STI, OS);
    break;
  case 2:
    printArithExtend(MI, OpIdx, STI, OS);
    break;
  case 3:
    printLogicalImm32(MI, OpIdx, STI, OS);
    break;
  case 4:
    printLogicalImm64(MI, OpIdx, STI, OS);
    break;
  case 5:
    printVRegOperand(MI, OpIdx, STI, OS);
    break;
  case 6:
    printHexImm(MI, OpIdx, STI, OS);
    break;
  case 7:
    printInverseCondCode(MI, OpIdx, STI, OS);
    break;
  case 8:
    printVectorIndex(MI, OpIdx, STI, OS);
    break;
  case 9:
    printTypedVectorList<16, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 10:
    printTypedVectorList<1, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 11:
    printTypedVectorList<2, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 12:
    printTypedVectorList<2, 's'>(MI, OpIdx, STI, OS);
    break;
  case 13:
    printTypedVectorList<4, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 14:
    printTypedVectorList<4, 's'>(MI, OpIdx, STI, OS);
    break;
  case 15:
    printTypedVectorList<8, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 16:
    printTypedVectorList<8, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 17:
    printTypedVectorList<0, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 18:
    printTypedVectorList<0, 's'>(MI, OpIdx, STI, OS);
    break;
  case 19:
    printTypedVectorList<0, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 20:
    printTypedVectorList<0, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 21:
    printPrefetchOp(MI, OpIdx, STI, OS);
    break;
  case 22:
    printSysCROperand(MI, OpIdx, STI, OS);
    break;
  }
}

static bool AArch64AppleInstPrinterValidateMCOperand(
       const MCOperand &MCOp, unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    return MCOp.isImm() &&
           MCOp.getImm() != AArch64CC::AL &&
           MCOp.getImm() != AArch64CC::NV;
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
