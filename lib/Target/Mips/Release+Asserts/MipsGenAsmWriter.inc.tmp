/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    9364U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    9357U,	// BUNDLE
    9374U,	// LIFETIME_START
    9344U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    21652U,	// ABSQ_S_PH
    18025U,	// ABSQ_S_QB
    24817U,	// ABSQ_S_W
    134237992U,	// ADD
    18294U,	// ADDIUPC
    18294U,	// ADDIUPC_MM
    18294U,	// ADDIUPC_MMR6
    22477U,	// ADDIUR1SP_MM
    134234410U,	// ADDIUR2_MM
    8683851U,	// ADDIUS5_MM
    546825U,	// ADDIUSP_MM
    134241262U,	// ADDIU_MMR6
    134239185U,	// ADDQH_PH
    134239302U,	// ADDQH_R_PH
    134242220U,	// ADDQH_R_W
    134241823U,	// ADDQH_W
    134239259U,	// ADDQ_PH
    134239358U,	// ADDQ_S_PH
    134242525U,	// ADDQ_S_W
    134236055U,	// ADDSC
    134234730U,	// ADDS_A_B
    134236180U,	// ADDS_A_D
    134238130U,	// ADDS_A_H
    134241531U,	// ADDS_A_W
    134235198U,	// ADDS_S_B
    134237269U,	// ADDS_S_D
    134238687U,	// ADDS_S_H
    134242575U,	// ADDS_S_W
    134235413U,	// ADDS_U_B
    134237736U,	// ADDS_U_D
    134238965U,	// ADDS_U_H
    134242993U,	// ADDS_U_W
    134234575U,	// ADDU16_MM
    134235621U,	// ADDUH_QB
    134235729U,	// ADDUH_R_QB
    134241203U,	// ADDU_MMR6
    134239457U,	// ADDU_PH
    134235834U,	// ADDU_QB
    134239402U,	// ADDU_S_PH
    134235775U,	// ADDU_S_QB
    134234979U,	// ADDVI_B
    134236700U,	// ADDVI_D
    134238346U,	// ADDVI_H
    134241956U,	// ADDVI_W
    134235491U,	// ADDV_B
    134237836U,	// ADDV_D
    134239043U,	// ADDV_H
    134243093U,	// ADDV_W
    134236094U,	// ADDWC
    134234712U,	// ADD_A_B
    134236161U,	// ADD_A_D
    134238112U,	// ADD_A_H
    134241512U,	// ADD_A_W
    134237992U,	// ADD_MM
    134237992U,	// ADD_MMR6
    134239677U,	// ADDi
    134239677U,	// ADDi_MM
    134241262U,	// ADDiu
    134241262U,	// ADDiu_MM
    134241203U,	// ADDu
    134241203U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    134240108U,	// ALIGN
    134240108U,	// ALIGN_MMR6
    18286U,	// ALUIPC
    18286U,	// ALUIPC_MMR6
    134238014U,	// AND
    9224538U,	// AND16_MM
    134238014U,	// AND64
    134234471U,	// ANDI16_MM
    134234838U,	// ANDI_B
    134239683U,	// ANDI_MMR6
    134238014U,	// AND_MM
    134238014U,	// AND_MMR6
    134241356U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    134239683U,	// ANDi
    134239683U,	// ANDi64
    134239683U,	// ANDi_MM
    134238028U,	// APPEND
    134235092U,	// ASUB_S_B
    134237099U,	// ASUB_S_D
    134238519U,	// ASUB_S_H
    134242355U,	// ASUB_S_W
    134235307U,	// ASUB_U_B
    134237566U,	// ASUB_U_D
    134238807U,	// ASUB_U_H
    134242823U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    134239787U,	// AUI
    18279U,	// AUIPC
    18279U,	// AUIPC_MMR6
    134239787U,	// AUI_MMR6
    134235178U,	// AVER_S_B
    134237249U,	// AVER_S_D
    134238657U,	// AVER_S_H
    134242555U,	// AVER_S_W
    134235393U,	// AVER_U_B
    134237716U,	// AVER_U_D
    134238945U,	// AVER_U_H
    134242973U,	// AVER_U_W
    134235120U,	// AVE_S_B
    134237181U,	// AVE_S_D
    134238589U,	// AVE_S_H
    134242437U,	// AVE_S_W
    134235335U,	// AVE_U_B
    134237648U,	// AVE_U_D
    134238877U,	// AVE_U_H
    134242905U,	// AVE_U_W
    23534U,	// AddiuRxImmX16
    1072110U,	// AddiuRxPcImmX16
    285236206U,	// AddiuRxRxImm16
    16800750U,	// AddiuRxRxImmX16
    25189358U,	// AddiuRxRyOffMemX16
    1336311U,	// AddiuSpImm16
    549879U,	// AddiuSpImmX16
    134241203U,	// AdduRxRyRz16
    16797502U,	// AndRxRxRy16
    0U,	// B
    541013U,	// B16_MM
    134241202U,	// BADDu
    546385U,	// BAL
    542494U,	// BALC
    542494U,	// BALC_MMR6
    134240107U,	// BALIGN
    0U,	// BAL_BR
    167788585U,	// BBIT0
    167788717U,	// BBIT032
    167788710U,	// BBIT1
    167788726U,	// BBIT132
    542473U,	// BC
    25701U,	// BC1EQZ
    20361U,	// BC1F
    22210U,	// BC1FL
    20361U,	// BC1F_MM
    25685U,	// BC1NEZ
    23405U,	// BC1T
    22318U,	// BC1TL
    23405U,	// BC1T_MM
    25709U,	// BC2EQZ
    25693U,	// BC2NEZ
    134234907U,	// BCLRI_B
    134236644U,	// BCLRI_D
    134238290U,	// BCLRI_H
    134241900U,	// BCLRI_W
    134235059U,	// BCLR_B
    134237023U,	// BCLR_D
    134238486U,	// BCLR_H
    134242271U,	// BCLR_W
    542473U,	// BC_MMR6
    134240290U,	// BEQ
    134240290U,	// BEQ64
    134236044U,	// BEQC
    134240034U,	// BEQL
    16882U,	// BEQZ16_MM
    18246U,	// BEQZALC
    18246U,	// BEQZALC_MMR6
    18394U,	// BEQZC
    18394U,	// BEQZC_MM
    134240290U,	// BEQ_MM
    134238046U,	// BGE
    134235917U,	// BGEC
    134241230U,	// BGEU
    134236068U,	// BGEUC
    25468U,	// BGEZ
    25468U,	// BGEZ64
    22107U,	// BGEZAL
    18219U,	// BGEZALC
    18219U,	// BGEZALC_MMR6
    22282U,	// BGEZALL
    23374U,	// BGEZALS_MM
    22107U,	// BGEZAL_MM
    18373U,	// BGEZC
    22341U,	// BGEZL
    25468U,	// BGEZ_MM
    134241139U,	// BGT
    134241312U,	// BGTU
    25528U,	// BGTZ
    25528U,	// BGTZ64
    18255U,	// BGTZALC
    18255U,	// BGTZALC_MMR6
    18401U,	// BGTZC
    22355U,	// BGTZL
    25528U,	// BGTZ_MM
    151012096U,	// BINSLI_B
    151013833U,	// BINSLI_D
    151015479U,	// BINSLI_H
    151019089U,	// BINSLI_W
    151012243U,	// BINSL_B
    151014033U,	// BINSL_D
    151015593U,	// BINSL_H
    151019247U,	// BINSL_W
    151012157U,	// BINSRI_B
    151013878U,	// BINSRI_D
    151015524U,	// BINSRI_H
    151019134U,	// BINSRI_W
    151012291U,	// BINSR_B
    151014289U,	// BINSR_D
    151015718U,	// BINSR_H
    151019537U,	// BINSR_W
    23700U,	// BITREV
    22427U,	// BITSWAP
    22427U,	// BITSWAP_MMR6
    134238063U,	// BLE
    134241242U,	// BLEU
    25474U,	// BLEZ
    25474U,	// BLEZ64
    18228U,	// BLEZALC
    18228U,	// BLEZALC_MMR6
    18380U,	// BLEZC
    22348U,	// BLEZL
    25474U,	// BLEZ_MM
    134241150U,	// BLT
    134236062U,	// BLTC
    134241318U,	// BLTU
    134236075U,	// BLTUC
    25534U,	// BLTZ
    25534U,	// BLTZ64
    22115U,	// BLTZAL
    18264U,	// BLTZALC
    18264U,	// BLTZALC_MMR6
    22291U,	// BLTZALL
    23383U,	// BLTZALS_MM
    22115U,	// BLTZAL_MM
    18408U,	// BLTZC
    22362U,	// BLTZL
    25534U,	// BLTZ_MM
    151012212U,	// BMNZI_B
    151018629U,	// BMNZ_V
    151012204U,	// BMZI_B
    151018615U,	// BMZ_V
    134238068U,	// BNE
    134238068U,	// BNE64
    134235923U,	// BNEC
    134234846U,	// BNEGI_B
    134236592U,	// BNEGI_D
    134238238U,	// BNEGI_H
    134241848U,	// BNEGI_W
    134234814U,	// BNEG_B
    134236568U,	// BNEG_D
    134238214U,	// BNEG_H
    134241743U,	// BNEG_W
    134239932U,	// BNEL
    16874U,	// BNEZ16_MM
    18237U,	// BNEZALC
    18237U,	// BNEZALC_MMR6
    18387U,	// BNEZC
    18387U,	// BNEZC_MM
    134238068U,	// BNE_MM
    134236082U,	// BNVC
    17803U,	// BNZ_B
    20233U,	// BNZ_D
    21355U,	// BNZ_H
    23678U,	// BNZ_V
    25430U,	// BNZ_W
    134236088U,	// BOVC
    540871U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    22072U,	// BREAK
    65909U,	// BREAK16_MM
    22072U,	// BREAK_MM
    22072U,	// BREAK_MMR6
    151012071U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    151018587U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    134234961U,	// BSETI_B
    134236682U,	// BSETI_D
    134238328U,	// BSETI_H
    134241938U,	// BSETI_W
    134235275U,	// BSET_B
    134237385U,	// BSET_D
    134238775U,	// BSET_H
    134242729U,	// BSET_W
    17797U,	// BZ_B
    20217U,	// BZ_D
    21349U,	// BZ_H
    23665U,	// BZ_V
    25424U,	// BZ_W
    541278U,	// B_MM_Pseudo
    134240290U,	// BeqImm
    402678691U,	// BeqzRxImm16
    25507U,	// BeqzRxImmX16
    1327710U,	// Bimm16
    541278U,	// BimmX16
    134238068U,	// BneImm
    402678664U,	// BnezRxImm16
    25480U,	// BnezRxImmX16
    9336U,	// Break16
    1598385U,	// Bteqz16
    536893378U,	// BteqzT8CmpX16
    536892928U,	// BteqzT8CmpiX16
    536894339U,	// BteqzT8SltX16
    536892958U,	// BteqzT8SltiX16
    536894460U,	// BteqzT8SltiuX16
    536894508U,	// BteqzT8SltuX16
    549809U,	// BteqzX16
    1598358U,	// Btnez16
    671111106U,	// BtnezT8CmpX16
    671110656U,	// BtnezT8CmpiX16
    671112067U,	// BtnezT8SltX16
    671110686U,	// BtnezT8SltiX16
    671112188U,	// BtnezT8SltiuX16
    671112236U,	// BtnezT8SltuX16
    549782U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    85864U,	// CACHE
    85864U,	// CACHE_MM
    85864U,	// CACHE_MMR6
    85864U,	// CACHE_R6
    19003U,	// CEIL_L_D64
    22981U,	// CEIL_L_S
    20179U,	// CEIL_W_D32
    20179U,	// CEIL_W_D64
    20179U,	// CEIL_W_MM
    23303U,	// CEIL_W_S
    23303U,	// CEIL_W_S_MM
    134234890U,	// CEQI_B
    134236627U,	// CEQI_D
    134238273U,	// CEQI_H
    134241883U,	// CEQI_W
    134235044U,	// CEQ_B
    134236930U,	// CEQ_D
    134238464U,	// CEQ_H
    134242159U,	// CEQ_W
    16444U,	// CFC1
    16444U,	// CFC1_MM
    16968U,	// CFCMSA
    134243375U,	// CINS
    134243331U,	// CINS32
    19639U,	// CLASS_D
    23155U,	// CLASS_S
    134235129U,	// CLEI_S_B
    134237190U,	// CLEI_S_D
    134238598U,	// CLEI_S_H
    134242446U,	// CLEI_S_W
    134235344U,	// CLEI_U_B
    134237657U,	// CLEI_U_D
    134238886U,	// CLEI_U_H
    134242914U,	// CLEI_U_W
    134235111U,	// CLE_S_B
    134237172U,	// CLE_S_D
    134238580U,	// CLE_S_H
    134242428U,	// CLE_S_W
    134235326U,	// CLE_U_B
    134237639U,	// CLE_U_D
    134238868U,	// CLE_U_H
    134242896U,	// CLE_U_W
    22402U,	// CLO
    22402U,	// CLO_MM
    22402U,	// CLO_MMR6
    22402U,	// CLO_R6
    134235149U,	// CLTI_S_B
    134237210U,	// CLTI_S_D
    134238618U,	// CLTI_S_H
    134242466U,	// CLTI_S_W
    134235364U,	// CLTI_U_B
    134237677U,	// CLTI_U_D
    134238906U,	// CLTI_U_H
    134242934U,	// CLTI_U_W
    134235217U,	// CLT_S_B
    134237288U,	// CLT_S_D
    134238706U,	// CLT_S_H
    134242594U,	// CLT_S_W
    134235444U,	// CLT_U_B
    134237767U,	// CLT_U_D
    134238996U,	// CLT_U_H
    134243024U,	// CLT_U_W
    25502U,	// CLZ
    25502U,	// CLZ_MM
    25502U,	// CLZ_MMR6
    25502U,	// CLZ_R6
    134235667U,	// CMPGDU_EQ_QB
    134235572U,	// CMPGDU_LE_QB
    134235786U,	// CMPGDU_LT_QB
    134235681U,	// CMPGU_EQ_QB
    134235586U,	// CMPGU_LE_QB
    134235800U,	// CMPGU_LT_QB
    17966U,	// CMPU_EQ_QB
    17871U,	// CMPU_LE_QB
    18085U,	// CMPU_LT_QB
    134236919U,	// CMP_EQ_D
    21540U,	// CMP_EQ_PH
    134240814U,	// CMP_EQ_S
    134236489U,	// CMP_F_D
    134240625U,	// CMP_F_S
    134236333U,	// CMP_LE_D
    21436U,	// CMP_LE_PH
    134240546U,	// CMP_LE_S
    134237410U,	// CMP_LT_D
    21709U,	// CMP_LT_PH
    134240909U,	// CMP_LT_S
    134236507U,	// CMP_SAF_D
    134240635U,	// CMP_SAF_S
    134236946U,	// CMP_SEQ_D
    134240833U,	// CMP_SEQ_S
    134236370U,	// CMP_SLE_D
    134240575U,	// CMP_SLE_S
    134237437U,	// CMP_SLT_D
    134240928U,	// CMP_SLT_S
    134236994U,	// CMP_SUEQ_D
    134240864U,	// CMP_SUEQ_S
    134236418U,	// CMP_SULE_D
    134240606U,	// CMP_SULE_S
    134237485U,	// CMP_SULT_D
    134240959U,	// CMP_SULT_S
    134236876U,	// CMP_SUN_D
    134240787U,	// CMP_SUN_S
    134236974U,	// CMP_UEQ_D
    134240853U,	// CMP_UEQ_S
    134236398U,	// CMP_ULE_D
    134240595U,	// CMP_ULE_S
    134237465U,	// CMP_ULT_D
    134240948U,	// CMP_ULT_S
    134236858U,	// CMP_UN_D
    134240777U,	// CMP_UN_S
    9429U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    805323896U,	// COPY_S_B
    805325989U,	// COPY_S_D
    805327396U,	// COPY_S_H
    805331306U,	// COPY_S_W
    805324111U,	// COPY_U_B
    805326456U,	// COPY_U_D
    805327663U,	// COPY_U_H
    805331713U,	// COPY_U_W
    10256471U,	// CTC1
    10256471U,	// CTC1_MM
    16976U,	// CTCMSA
    22783U,	// CVT_D32_S
    23863U,	// CVT_D32_W
    23863U,	// CVT_D32_W_MM
    22079U,	// CVT_D64_L
    22783U,	// CVT_D64_S
    23863U,	// CVT_D64_W
    22783U,	// CVT_D_S_MM
    19024U,	// CVT_L_D64
    19024U,	// CVT_L_D64_MM
    23002U,	// CVT_L_S
    23002U,	// CVT_L_S_MM
    19362U,	// CVT_S_D32
    19362U,	// CVT_S_D32_MM
    19362U,	// CVT_S_D64
    22088U,	// CVT_S_L
    24618U,	// CVT_S_W
    24618U,	// CVT_S_W_MM
    20200U,	// CVT_W_D32
    20200U,	// CVT_W_D64
    20200U,	// CVT_W_MM
    23324U,	// CVT_W_S
    23324U,	// CVT_W_S_MM
    19183U,	// C_EQ_D32
    19183U,	// C_EQ_D64
    23078U,	// C_EQ_S
    18754U,	// C_F_D32
    18754U,	// C_F_D64
    22890U,	// C_F_S
    18597U,	// C_LE_D32
    18597U,	// C_LE_D64
    22810U,	// C_LE_S
    19674U,	// C_LT_D32
    19674U,	// C_LT_D64
    23173U,	// C_LT_S
    18588U,	// C_NGE_D32
    18588U,	// C_NGE_D64
    22801U,	// C_NGE_S
    18623U,	// C_NGLE_D32
    18623U,	// C_NGLE_D64
    22828U,	// C_NGLE_S
    19040U,	// C_NGL_D32
    19040U,	// C_NGL_D64
    23018U,	// C_NGL_S
    19665U,	// C_NGT_D32
    19665U,	// C_NGT_D64
    23164U,	// C_NGT_S
    18633U,	// C_OLE_D32
    18633U,	// C_OLE_D64
    22838U,	// C_OLE_S
    19700U,	// C_OLT_D32
    19700U,	// C_OLT_D64
    23191U,	// C_OLT_S
    19209U,	// C_SEQ_D32
    19209U,	// C_SEQ_D64
    23096U,	// C_SEQ_S
    18824U,	// C_SF_D32
    18824U,	// C_SF_D64
    22936U,	// C_SF_S
    19237U,	// C_UEQ_D32
    19237U,	// C_UEQ_D64
    23116U,	// C_UEQ_S
    18661U,	// C_ULE_D32
    18661U,	// C_ULE_D64
    22858U,	// C_ULE_S
    19728U,	// C_ULT_D32
    19728U,	// C_ULT_D64
    23211U,	// C_ULT_S
    19122U,	// C_UN_D32
    19122U,	// C_UN_D64
    23041U,	// C_UN_S
    22466U,	// CmpRxRy16
    939546112U,	// CmpiRxImm16
    22016U,	// CmpiRxImmX16
    549913U,	// Constant32
    134237991U,	// DADD
    134239676U,	// DADDi
    134241261U,	// DADDiu
    134241209U,	// DADDu
    8689115U,	// DAHI
    134240115U,	// DALIGN
    8689176U,	// DATI
    134239786U,	// DAUI
    22426U,	// DBITSWAP
    22401U,	// DCLO
    22401U,	// DCLO_R6
    25501U,	// DCLZ
    25501U,	// DCLZ_R6
    134241436U,	// DDIV
    134241344U,	// DDIVU
    9455U,	// DERET
    9455U,	// DERET_MM
    134243393U,	// DEXT
    134243368U,	// DEXTM
    134243406U,	// DEXTU
    546239U,	// DI
    134243381U,	// DINS
    134243361U,	// DINSM
    134243399U,	// DINSU
    134241437U,	// DIV
    134241345U,	// DIVU
    134241345U,	// DIVU_MMR6
    134241437U,	// DIV_MMR6
    134235238U,	// DIV_S_B
    134237331U,	// DIV_S_D
    134238727U,	// DIV_S_H
    134242637U,	// DIV_S_W
    134235453U,	// DIV_U_B
    134237798U,	// DIV_U_D
    134239005U,	// DIV_U_H
    134243055U,	// DIV_U_W
    546239U,	// DI_MM
    134234690U,	// DLSA
    134234690U,	// DLSA_R6
    134234121U,	// DMFC0
    16450U,	// DMFC1
    134234372U,	// DMFC2
    33571076U,	// DMFC2_OCTEON
    134238036U,	// DMOD
    134241223U,	// DMODU
    1117552656U,	// DMTC0
    10256477U,	// DMTC1
    1117552907U,	// DMTC2
    33571083U,	// DMTC2_OCTEON
    134239663U,	// DMUH
    134241254U,	// DMUHU
    134240053U,	// DMUL
    23437U,	// DMULT
    23608U,	// DMULTu
    134241298U,	// DMULU
    134240053U,	// DMUL_R6
    134237239U,	// DOTP_S_D
    134238647U,	// DOTP_S_H
    134242505U,	// DOTP_S_W
    134237706U,	// DOTP_U_D
    134238935U,	// DOTP_U_H
    134242963U,	// DOTP_U_W
    151014368U,	// DPADD_S_D
    151015776U,	// DPADD_S_H
    151019624U,	// DPADD_S_W
    151014835U,	// DPADD_U_D
    151016064U,	// DPADD_U_H
    151020092U,	// DPADD_U_W
    134239516U,	// DPAQX_SA_W_PH
    134239599U,	// DPAQX_S_W_PH
    134241965U,	// DPAQ_SA_L_W
    134239558U,	// DPAQ_S_W_PH
    134239851U,	// DPAU_H_QBL
    134240305U,	// DPAU_H_QBR
    134239637U,	// DPAX_W_PH
    134239506U,	// DPA_W_PH
    22471U,	// DPOP
    134239531U,	// DPSQX_SA_W_PH
    134239613U,	// DPSQX_S_W_PH
    134241978U,	// DPSQ_SA_L_W
    134239586U,	// DPSQ_S_W_PH
    151014335U,	// DPSUB_S_D
    151015755U,	// DPSUB_S_H
    151019591U,	// DPSUB_S_W
    151014802U,	// DPSUB_U_D
    151016043U,	// DPSUB_U_H
    151020059U,	// DPSUB_U_W
    134239863U,	// DPSU_H_QBL
    134240317U,	// DPSU_H_QBR
    134239648U,	// DPSX_W_PH
    134239627U,	// DPS_W_PH
    134240462U,	// DROTR
    134234351U,	// DROTR32
    134241480U,	// DROTRV
    21362U,	// DSBH
    25578U,	// DSDIV
    20275U,	// DSHD
    134240028U,	// DSLL
    134234321U,	// DSLL32
    1207981852U,	// DSLL64_32
    134241442U,	// DSLLV
    134234684U,	// DSRA
    134234303U,	// DSRA32
    134241421U,	// DSRAV
    134240040U,	// DSRL
    134234329U,	// DSRL32
    134241449U,	// DSRLV
    134235901U,	// DSUB
    134241188U,	// DSUBu
    25564U,	// DUDIV
    25579U,	// DivRxRy16
    25565U,	// DivuRxRy16
    9406U,	// EHB
    9406U,	// EHB_MM
    9406U,	// EHB_MMR6
    546251U,	// EI
    546251U,	// EI_MM
    546251U,	// EI_MMR6
    9456U,	// ERET
    9410U,	// ERETNC_MMR6
    9456U,	// ERET_MM
    9456U,	// ERET_MMR6
    134243394U,	// EXT
    134240274U,	// EXTP
    134240171U,	// EXTPDP
    134241464U,	// EXTPDPV
    134241473U,	// EXTPV
    134242698U,	// EXTRV_RS_W
    134242252U,	// EXTRV_R_W
    134238736U,	// EXTRV_S_H
    134243135U,	// EXTRV_W
    134242687U,	// EXTR_RS_W
    134242231U,	// EXTR_R_W
    134238667U,	// EXTR_S_H
    134242330U,	// EXTR_W
    134243387U,	// EXTS
    134243339U,	// EXTS32
    134243394U,	// EXT_MM
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    19631U,	// FABS_D32
    19631U,	// FABS_D64
    19631U,	// FABS_MM
    23148U,	// FABS_S
    23148U,	// FABS_S_MM
    0U,	// FABS_W
    134236265U,	// FADD_D
    134236266U,	// FADD_D32
    134236266U,	// FADD_D64
    134236266U,	// FADD_MM
    134240522U,	// FADD_S
    134240522U,	// FADD_S_MM
    134241600U,	// FADD_W
    134236499U,	// FCAF_D
    134241719U,	// FCAF_W
    134236929U,	// FCEQ_D
    134242158U,	// FCEQ_W
    19638U,	// FCLASS_D
    24982U,	// FCLASS_W
    134236343U,	// FCLE_D
    134241642U,	// FCLE_W
    134237420U,	// FCLT_D
    134242737U,	// FCLT_W
    2204789U,	// FCMP_D32
    2204789U,	// FCMP_D32_MM
    2204789U,	// FCMP_D64
    2466933U,	// FCMP_S32
    2466933U,	// FCMP_S32_MM
    134236439U,	// FCNE_D
    134241676U,	// FCNE_W
    134237039U,	// FCOR_D
    134242287U,	// FCOR_W
    134236985U,	// FCUEQ_D
    134242174U,	// FCUEQ_W
    134236409U,	// FCULE_D
    134241658U,	// FCULE_W
    134237476U,	// FCULT_D
    134242753U,	// FCULT_W
    134236455U,	// FCUNE_D
    134241692U,	// FCUNE_W
    134236868U,	// FCUN_D
    134242064U,	// FCUN_W
    134237862U,	// FDIV_D
    134237863U,	// FDIV_D32
    134237863U,	// FDIV_D64
    134237863U,	// FDIV_MM
    134240995U,	// FDIV_S
    134240995U,	// FDIV_S_MM
    134243119U,	// FDIV_W
    134238394U,	// FEXDO_H
    134242080U,	// FEXDO_W
    134236152U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    134241503U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    19064U,	// FEXUPL_D
    24278U,	// FEXUPL_W
    19327U,	// FEXUPR_D
    24575U,	// FEXUPR_W
    19569U,	// FFINT_S_D
    24875U,	// FFINT_S_W
    20048U,	// FFINT_U_D
    25305U,	// FFINT_U_W
    19074U,	// FFQL_D
    24288U,	// FFQL_W
    19337U,	// FFQR_D
    24585U,	// FFQR_W
    17277U,	// FILL_B
    19049U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    20627U,	// FILL_H
    24263U,	// FILL_W
    18415U,	// FLOG2_D
    23766U,	// FLOG2_W
    19013U,	// FLOOR_L_D64
    22991U,	// FLOOR_L_S
    20189U,	// FLOOR_W_D32
    20189U,	// FLOOR_W_D64
    20189U,	// FLOOR_W_MM
    23313U,	// FLOOR_W_S
    23313U,	// FLOOR_W_S_MM
    151013489U,	// FMADD_D
    151018824U,	// FMADD_W
    134236190U,	// FMAX_A_D
    134241541U,	// FMAX_A_W
    134237937U,	// FMAX_D
    134243144U,	// FMAX_W
    134236170U,	// FMIN_A_D
    134241521U,	// FMIN_A_W
    134236842U,	// FMIN_D
    134242056U,	// FMIN_W
    20150U,	// FMOV_D32
    20150U,	// FMOV_D32_MM
    20150U,	// FMOV_D64
    23274U,	// FMOV_S
    23274U,	// FMOV_S_MM
    151013447U,	// FMSUB_D
    151018782U,	// FMSUB_W
    134236826U,	// FMUL_D
    134236827U,	// FMUL_D32
    134236827U,	// FMUL_D64
    134236827U,	// FMUL_MM
    134240755U,	// FMUL_S
    134240755U,	// FMUL_S_MM
    134242040U,	// FMUL_W
    18841U,	// FNEG_D32
    18841U,	// FNEG_D64
    18841U,	// FNEG_MM
    22952U,	// FNEG_S
    22952U,	// FNEG_S_MM
    19175U,	// FRCP_D
    24361U,	// FRCP_W
    19786U,	// FRINT_D
    25051U,	// FRINT_W
    19814U,	// FRSQRT_D
    25079U,	// FRSQRT_W
    134236518U,	// FSAF_D
    134241727U,	// FSAF_W
    134236957U,	// FSEQ_D
    134242166U,	// FSEQ_W
    134236381U,	// FSLE_D
    134241650U,	// FSLE_W
    134237448U,	// FSLT_D
    134242745U,	// FSLT_W
    134236447U,	// FSNE_D
    134241684U,	// FSNE_W
    134237047U,	// FSOR_D
    134242295U,	// FSOR_W
    19805U,	// FSQRT_D
    19806U,	// FSQRT_D32
    19806U,	// FSQRT_D64
    19806U,	// FSQRT_MM
    23251U,	// FSQRT_S
    23251U,	// FSQRT_S_MM
    25070U,	// FSQRT_W
    134236223U,	// FSUB_D
    134236224U,	// FSUB_D32
    134236224U,	// FSUB_D64
    134236224U,	// FSUB_MM
    134240504U,	// FSUB_S
    134240504U,	// FSUB_S_MM
    134241558U,	// FSUB_W
    134237006U,	// FSUEQ_D
    134242183U,	// FSUEQ_W
    134236430U,	// FSULE_D
    134241667U,	// FSULE_W
    134237497U,	// FSULT_D
    134242762U,	// FSULT_W
    134236464U,	// FSUNE_D
    134241701U,	// FSUNE_W
    134236887U,	// FSUN_D
    134242072U,	// FSUN_W
    19580U,	// FTINT_S_D
    24886U,	// FTINT_S_W
    20059U,	// FTINT_U_D
    25316U,	// FTINT_U_W
    134238471U,	// FTQ_H
    134242192U,	// FTQ_W
    19402U,	// FTRUNC_S_D
    24658U,	// FTRUNC_S_W
    19869U,	// FTRUNC_U_D
    25126U,	// FTRUNC_U_W
    1358976503U,	// GotPrologue16
    134237142U,	// HADD_S_D
    134238550U,	// HADD_S_H
    134242398U,	// HADD_S_W
    134237609U,	// HADD_U_D
    134238838U,	// HADD_U_H
    134242866U,	// HADD_U_W
    134237109U,	// HSUB_S_D
    134238529U,	// HSUB_S_H
    134242365U,	// HSUB_S_W
    134237576U,	// HSUB_U_D
    134238817U,	// HSUB_U_H
    134242833U,	// HSUB_U_W
    134235508U,	// ILVEV_B
    134237853U,	// ILVEV_D
    134239060U,	// ILVEV_H
    134243110U,	// ILVEV_W
    134235036U,	// ILVL_B
    134236834U,	// ILVL_D
    134238386U,	// ILVL_H
    134242048U,	// ILVL_W
    134234788U,	// ILVOD_B
    134236307U,	// ILVOD_D
    134238188U,	// ILVOD_H
    134241633U,	// ILVOD_W
    134235084U,	// ILVR_B
    134237082U,	// ILVR_D
    134238511U,	// ILVR_H
    134242338U,	// ILVR_W
    134243376U,	// INS
    52970651U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    52972883U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    52974151U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    52978148U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    16800976U,	// INSV
    61358765U,	// INSVE_B
    61360441U,	// INSVE_D
    61362165U,	// INSVE_H
    61365678U,	// INSVE_W
    134243376U,	// INS_MM
    546357U,	// J
    546390U,	// JAL
    22718U,	// JALR
    547006U,	// JALR16_MM
    22718U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    541104U,	// JALRS16_MM
    23392U,	// JALRS_MM
    17822U,	// JALR_HB
    22718U,	// JALR_MM
    547656U,	// JALS_MM
    549739U,	// JALX
    549739U,	// JALX_MM
    546390U,	// JAL_MM
    18212U,	// JIALC
    18212U,	// JIALC_MMR6
    18201U,	// JIC
    18201U,	// JIC_MMR6
    547002U,	// JR
    541091U,	// JR16_MM
    547002U,	// JR64
    546823U,	// JRADDIUSP
    542610U,	// JRC16_MM
    542103U,	// JR_HB
    542103U,	// JR_HB_R6
    547002U,	// JR_MM
    546357U,	// J_MM
    2905686U,	// Jal16
    3167830U,	// JalB16
    546390U,	// JalOneReg
    22102U,	// JalTwoReg
    9398U,	// JrRa16
    9389U,	// JrcRa16
    549840U,	// JrcRx16
    540673U,	// JumpLinkReg16
    67126695U,	// LB
    67126695U,	// LB64
    67125696U,	// LBU16_MM
    1493197681U,	// LBUX
    67126695U,	// LB_MM
    67132319U,	// LBu
    67132319U,	// LBu64
    67132319U,	// LBu_MM
    67129146U,	// LD
    67125296U,	// LDC1
    67125296U,	// LDC164
    67125296U,	// LDC1_MM
    67125496U,	// LDC2
    67125496U,	// LDC2_R6
    67125555U,	// LDC3
    17103U,	// LDI_B
    18857U,	// LDI_D
    20503U,	// LDI_H
    24113U,	// LDI_W
    67131058U,	// LDL
    18273U,	// LDPC
    67131512U,	// LDR
    1493188720U,	// LDXC1
    1493188720U,	// LDXC164
    67125909U,	// LD_B
    67127428U,	// LD_D
    67129309U,	// LD_H
    67132754U,	// LD_W
    25189358U,	// LEA_ADDiu
    25189357U,	// LEA_ADDiu64
    25189358U,	// LEA_ADDiu_MM
    67130243U,	// LH
    67130243U,	// LH64
    67125719U,	// LHU16_MM
    1493197670U,	// LHX
    67130243U,	// LH_MM
    67132385U,	// LHu
    67132385U,	// LHu64
    67132385U,	// LHu_MM
    16751U,	// LI16_MM
    67131142U,	// LL
    67129145U,	// LLD
    67129145U,	// LLD_R6
    67131142U,	// LL_MM
    67131142U,	// LL_R6
    67125255U,	// LOAD_ACC128
    67125255U,	// LOAD_ACC64
    67125255U,	// LOAD_ACC64DSP
    67131352U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    134234691U,	// LSA
    1653391939U,	// LSA_MMR6
    134234691U,	// LSA_R6
    1493188734U,	// LUXC1
    1493188734U,	// LUXC164
    1493188734U,	// LUXC1_MM
    33576496U,	// LUi
    33576496U,	// LUi64
    33576496U,	// LUi_MM
    67134302U,	// LW
    67125726U,	// LW16_MM
    67134302U,	// LW64
    67125348U,	// LWC1
    67125348U,	// LWC1_MM
    67125522U,	// LWC2
    67125522U,	// LWC2_R6
    67125567U,	// LWC3
    67134302U,	// LWGP_MM
    67131195U,	// LWL
    67131195U,	// LWL64
    67131195U,	// LWL_MM
    3522956U,	// LWM16_MM
    3522785U,	// LWM32_MM
    3528545U,	// LWM_MM
    18310U,	// LWPC
    18310U,	// LWPC_MMR6
    137240U,	// LWP_MM
    67131612U,	// LWR
    67131612U,	// LWR64
    67131612U,	// LWR_MM
    67134302U,	// LWSP_MM
    18303U,	// LWUPC
    67132487U,	// LWU_MM
    1493197687U,	// LWX
    1493188748U,	// LWXC1
    1493188748U,	// LWXC1_MM
    1493195623U,	// LWXS_MM
    67134302U,	// LW_MM
    67132487U,	// LWu
    67126695U,	// LbRxRyOffMemX16
    67132319U,	// LbuRxRyOffMemX16
    67130243U,	// LhRxRyOffMemX16
    67132385U,	// LhuRxRyOffMemX16
    939546103U,	// LiRxImm16
    21997U,	// LiRxImmAlignX16
    22007U,	// LiRxImmX16
    33571334U,	// LoadAddrImm32
    67125766U,	// LoadAddrReg32
    33576439U,	// LoadImm32
    22011U,	// LoadImm64
    3695454U,	// LwConstant32
    268460894U,	// LwRxPcTcp16
    25438U,	// LwRxPcTcpX16
    67134302U,	// LwRxRyOffMemX16
    1761633118U,	// LwRxSpImmX16
    20269U,	// MADD
    151013751U,	// MADDF_D
    151017871U,	// MADDF_S
    151015659U,	// MADDR_Q_H
    151019353U,	// MADDR_Q_W
    23488U,	// MADDU
    134241216U,	// MADDU_DSP
    23488U,	// MADDU_MM
    151012706U,	// MADDV_B
    151015051U,	// MADDV_D
    151016258U,	// MADDV_H
    151020308U,	// MADDV_W
    134236274U,	// MADD_D32
    134236274U,	// MADD_D32_MM
    134236274U,	// MADD_D64
    134237997U,	// MADD_DSP
    20269U,	// MADD_MM
    151015629U,	// MADD_Q_H
    151019323U,	// MADD_Q_W
    134240521U,	// MADD_S
    134240521U,	// MADD_S_MM
    134239945U,	// MAQ_SA_W_PHL
    134240386U,	// MAQ_SA_W_PHR
    134239973U,	// MAQ_S_W_PHL
    134240414U,	// MAQ_S_W_PHR
    134236215U,	// MAXA_D
    134240494U,	// MAXA_S
    134235159U,	// MAXI_S_B
    134237220U,	// MAXI_S_D
    134238628U,	// MAXI_S_H
    134242476U,	// MAXI_S_W
    134235374U,	// MAXI_U_B
    134237687U,	// MAXI_U_D
    134238916U,	// MAXI_U_H
    134242944U,	// MAXI_U_W
    134234740U,	// MAX_A_B
    134236191U,	// MAX_A_D
    134238140U,	// MAX_A_H
    134241542U,	// MAX_A_W
    134237938U,	// MAX_D
    134241061U,	// MAX_S
    134235247U,	// MAX_S_B
    134237340U,	// MAX_S_D
    134238747U,	// MAX_S_H
    134242657U,	// MAX_S_W
    134235462U,	// MAX_U_B
    134237807U,	// MAX_U_D
    134239014U,	// MAX_U_H
    134243064U,	// MAX_U_W
    134234122U,	// MFC0
    16451U,	// MFC1
    16451U,	// MFC1_MM
    134234373U,	// MFC2
    16457U,	// MFHC1_D32
    16457U,	// MFHC1_D64
    16457U,	// MFHC1_MM
    546273U,	// MFHI
    546273U,	// MFHI16_MM
    546273U,	// MFHI64
    21985U,	// MFHI_DSP
    546273U,	// MFHI_MM
    546695U,	// MFLO
    546695U,	// MFLO16_MM
    546695U,	// MFLO64
    22407U,	// MFLO_DSP
    546695U,	// MFLO_MM
    134236200U,	// MINA_D
    134240486U,	// MINA_S
    134235139U,	// MINI_S_B
    134237200U,	// MINI_S_D
    134238608U,	// MINI_S_H
    134242456U,	// MINI_S_W
    134235354U,	// MINI_U_B
    134237667U,	// MINI_U_D
    134238896U,	// MINI_U_H
    134242924U,	// MINI_U_W
    134234721U,	// MIN_A_B
    134236171U,	// MIN_A_D
    134238121U,	// MIN_A_H
    134241522U,	// MIN_A_W
    134236843U,	// MIN_D
    134240762U,	// MIN_S
    134235169U,	// MIN_S_B
    134237230U,	// MIN_S_D
    134238638U,	// MIN_S_H
    134242496U,	// MIN_S_W
    134235384U,	// MIN_U_B
    134237697U,	// MIN_U_D
    134238926U,	// MIN_U_H
    134242954U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    134238037U,	// MOD
    134235899U,	// MODSUB
    134241224U,	// MODU
    134241224U,	// MODU_MMR6
    134238037U,	// MOD_MMR6
    134235102U,	// MOD_S_B
    134237163U,	// MOD_S_D
    134238571U,	// MOD_S_H
    134242419U,	// MOD_S_W
    134235317U,	// MOD_U_B
    134237630U,	// MOD_U_D
    134238859U,	// MOD_U_H
    134242887U,	// MOD_U_W
    20355U,	// MOVE16_MM
    1921374131U,	// MOVEP_MM
    23635U,	// MOVE_V
    134236560U,	// MOVF_D32
    134236560U,	// MOVF_D32_MM
    134236560U,	// MOVF_D64
    134238101U,	// MOVF_I
    134238101U,	// MOVF_I64
    134238101U,	// MOVF_I_MM
    134240672U,	// MOVF_S
    134240672U,	// MOVF_S_MM
    134236895U,	// MOVN_I64_D64
    134240123U,	// MOVN_I64_I
    134240123U,	// MOVN_I64_I64
    134240798U,	// MOVN_I64_S
    134236895U,	// MOVN_I_D32
    134236895U,	// MOVN_I_D32_MM
    134236895U,	// MOVN_I_D64
    134240123U,	// MOVN_I_I
    134240123U,	// MOVN_I_I64
    134240123U,	// MOVN_I_MM
    134240798U,	// MOVN_I_S
    134240798U,	// MOVN_I_S_MM
    134237558U,	// MOVT_D32
    134237558U,	// MOVT_D32_MM
    134237558U,	// MOVT_D64
    134241177U,	// MOVT_I
    134241177U,	// MOVT_I64
    134241177U,	// MOVT_I_MM
    134240987U,	// MOVT_S
    134240987U,	// MOVT_S_MM
    134237978U,	// MOVZ_I64_D64
    134243268U,	// MOVZ_I64_I
    134243268U,	// MOVZ_I64_I64
    134241088U,	// MOVZ_I64_S
    134237978U,	// MOVZ_I_D32
    134237978U,	// MOVZ_I_D32_MM
    134237978U,	// MOVZ_I_D64
    134243268U,	// MOVZ_I_I
    134243268U,	// MOVZ_I_I64
    134243268U,	// MOVZ_I_MM
    134241088U,	// MOVZ_I_S
    134241088U,	// MOVZ_I_S_MM
    18179U,	// MSUB
    151013742U,	// MSUBF_D
    151017862U,	// MSUBF_S
    151015648U,	// MSUBR_Q_H
    151019342U,	// MSUBR_Q_W
    23467U,	// MSUBU
    134241195U,	// MSUBU_DSP
    23467U,	// MSUBU_MM
    151012697U,	// MSUBV_B
    151015042U,	// MSUBV_D
    151016249U,	// MSUBV_H
    151020299U,	// MSUBV_W
    134236232U,	// MSUB_D32
    134236232U,	// MSUB_D32_MM
    134236232U,	// MSUB_D64
    134235907U,	// MSUB_DSP
    18179U,	// MSUB_MM
    151015619U,	// MSUB_Q_H
    151019313U,	// MSUB_Q_W
    134240503U,	// MSUB_S
    134240503U,	// MSUB_S_MM
    1117552657U,	// MTC0
    10256478U,	// MTC1
    10256478U,	// MTC1_MM
    1117552908U,	// MTC2
    10272848U,	// MTHC1_D32
    10272848U,	// MTHC1_D64
    10272848U,	// MTHC1_MM
    546279U,	// MTHI
    546279U,	// MTHI64
    10261991U,	// MTHI_DSP
    546279U,	// MTHI_MM
    10262458U,	// MTHLIP
    546708U,	// MTLO
    546708U,	// MTLO64
    10262420U,	// MTLO_DSP
    546708U,	// MTLO_MM
    540701U,	// MTM0
    540826U,	// MTM1
    540958U,	// MTM2
    540707U,	// MTP0
    540832U,	// MTP1
    540964U,	// MTP2
    134239664U,	// MUH
    134241255U,	// MUHU
    134241255U,	// MUHU_MMR6
    134239664U,	// MUH_MMR6
    134240054U,	// MUL
    134239986U,	// MULEQ_S_W_PHL
    134240427U,	// MULEQ_S_W_PHR
    134239875U,	// MULEU_S_PH_QBL
    134240329U,	// MULEU_S_PH_QBR
    134239425U,	// MULQ_RS_PH
    134242676U,	// MULQ_RS_W
    134239369U,	// MULQ_S_PH
    134242535U,	// MULQ_S_W
    134238454U,	// MULR_Q_H
    134242148U,	// MULR_Q_W
    134239571U,	// MULSAQ_S_W_PH
    134239546U,	// MULSA_W_PH
    23438U,	// MULT
    134241337U,	// MULTU_DSP
    134241166U,	// MULT_DSP
    23438U,	// MULT_MM
    23609U,	// MULTu
    23609U,	// MULTu_MM
    134241292U,	// MULU
    134241292U,	// MULU_MMR6
    134235517U,	// MULV_B
    134237870U,	// MULV_D
    134239069U,	// MULV_H
    134243127U,	// MULV_W
    134240054U,	// MUL_MM
    134240054U,	// MUL_MMR6
    134239242U,	// MUL_PH
    134238423U,	// MUL_Q_H
    134242117U,	// MUL_Q_W
    134240054U,	// MUL_R6
    134239337U,	// MUL_S_PH
    546273U,	// Mfhi16
    546695U,	// Mflo16
    20355U,	// Move32R16
    20355U,	// MoveR3216
    23438U,	// MultRxRy16
    75799438U,	// MultRxRyRz16
    23609U,	// MultuRxRy16
    75799609U,	// MultuRxRyRz16
    17028U,	// NLOC_B
    18521U,	// NLOC_D
    20428U,	// NLOC_H
    23847U,	// NLOC_W
    17036U,	// NLZC_B
    18529U,	// NLZC_D
    20436U,	// NLZC_H
    23855U,	// NLZC_W
    134236282U,	// NMADD_D32
    134236282U,	// NMADD_D32_MM
    134236282U,	// NMADD_D64
    134240520U,	// NMADD_S
    134240520U,	// NMADD_S_MM
    134236240U,	// NMSUB_D32
    134236240U,	// NMSUB_D32_MM
    134236240U,	// NMSUB_D64
    134240502U,	// NMSUB_S
    134240502U,	// NMSUB_S_MM
    0U,	// NOP
    134240452U,	// NOR
    134240452U,	// NOR64
    134234925U,	// NORI_B
    134240452U,	// NOR_MM
    134240452U,	// NOR_MMR6
    134241379U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    16825U,	// NOT16_MM
    20379U,	// NegRxRy16
    23444U,	// NotRxRy16
    134240453U,	// OR
    9224618U,	// OR16_MM
    134240453U,	// OR64
    134234926U,	// ORI_B
    134239763U,	// ORI_MMR6
    134240453U,	// OR_MM
    134240453U,	// OR_MMR6
    134241380U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    134239763U,	// ORi
    134239763U,	// ORi64
    134239763U,	// ORi_MM
    16799941U,	// OrRxRxRy16
    134239231U,	// PACKRL_PH
    9417U,	// PAUSE
    9417U,	// PAUSE_MM
    134235499U,	// PCKEV_B
    134237844U,	// PCKEV_D
    134239051U,	// PCKEV_H
    134243101U,	// PCKEV_W
    134234779U,	// PCKOD_B
    134236298U,	// PCKOD_D
    134238179U,	// PCKOD_H
    134241624U,	// PCKOD_W
    17555U,	// PCNT_B
    19778U,	// PCNT_D
    21055U,	// PCNT_H
    25043U,	// PCNT_W
    134239195U,	// PICK_PH
    134235631U,	// PICK_QB
    22472U,	// POP
    22178U,	// PRECEQU_PH_QBL
    16906U,	// PRECEQU_PH_QBLA
    22632U,	// PRECEQU_PH_QBR
    16939U,	// PRECEQU_PH_QBRA
    22231U,	// PRECEQ_W_PHL
    22672U,	// PRECEQ_W_PHR
    22163U,	// PRECEU_PH_QBL
    16890U,	// PRECEU_PH_QBLA
    22617U,	// PRECEU_PH_QBR
    16923U,	// PRECEU_PH_QBRA
    134239147U,	// PRECRQU_S_QB_PH
    134241767U,	// PRECRQ_PH_W
    134239120U,	// PRECRQ_QB_PH
    134241798U,	// PRECRQ_RS_PH_W
    134239134U,	// PRECR_QB_PH
    134241751U,	// PRECR_SRA_PH_W
    134241780U,	// PRECR_SRA_R_PH_W
    85903U,	// PREF
    85903U,	// PREF_MM
    85903U,	// PREF_MMR6
    85903U,	// PREF_R6
    134238019U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16391U,	// PseudoCVT_D32_W
    16391U,	// PseudoCVT_D64_L
    16391U,	// PseudoCVT_D64_W
    16391U,	// PseudoCVT_S_L
    16391U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoUDIV
    18155U,	// RADDU_W_QB
    33576953U,	// RDDSP
    22741U,	// RDHWR
    22741U,	// RDHWR64
    22741U,	// RDHWR_MM
    21758U,	// REPLV_PH
    18135U,	// REPLV_QB
    33575917U,	// REPL_PH
    33572353U,	// REPL_QB
    19787U,	// RINT_D
    23243U,	// RINT_S
    134240463U,	// ROTR
    134241481U,	// ROTRV
    134241481U,	// ROTRV_MM
    134240463U,	// ROTR_MM
    18992U,	// ROUND_L_D64
    22970U,	// ROUND_L_S
    20168U,	// ROUND_W_D32
    20168U,	// ROUND_W_D64
    20168U,	// ROUND_W_MM
    23292U,	// ROUND_W_S
    23292U,	// ROUND_W_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    134235208U,	// SAT_S_B
    134237279U,	// SAT_S_D
    134238697U,	// SAT_S_H
    134242585U,	// SAT_S_W
    134235435U,	// SAT_U_B
    134237758U,	// SAT_U_D
    134238987U,	// SAT_U_H
    134243015U,	// SAT_U_W
    67127031U,	// SB
    67125588U,	// SB16_MM
    67127031U,	// SB64
    67127031U,	// SB_MM
    3966874U,	// SC
    3968802U,	// SCD
    3968802U,	// SCD_R6
    3966874U,	// SC_MM
    3966874U,	// SC_R6
    67129178U,	// SD
    546724U,	// SDBBP
    65946U,	// SDBBP16_MM
    546724U,	// SDBBP_MM
    546724U,	// SDBBP_R6
    67125302U,	// SDC1
    67125302U,	// SDC164
    67125302U,	// SDC1_MM
    67125502U,	// SDC2
    67125502U,	// SDC2_R6
    67125561U,	// SDC3
    25579U,	// SDIV
    25579U,	// SDIV_MM
    67131063U,	// SDL
    67131517U,	// SDR
    1493188727U,	// SDXC1
    1493188727U,	// SDXC164
    17810U,	// SEB
    17810U,	// SEB64
    17810U,	// SEB_MM
    17810U,	// SEB_MMR6
    21374U,	// SEH
    21374U,	// SEH64
    21374U,	// SEH_MM
    21374U,	// SEH_MMR6
    134243241U,	// SELEQZ
    134243241U,	// SELEQZ64
    134237968U,	// SELEQZ_D
    134243241U,	// SELEQZ_MMR6
    134241078U,	// SELEQZ_S
    134243214U,	// SELNEZ
    134243214U,	// SELNEZ64
    134237951U,	// SELNEZ_D
    134243214U,	// SELNEZ_MMR6
    134241068U,	// SELNEZ_S
    151013977U,	// SEL_D
    151017955U,	// SEL_S
    134240295U,	// SEQ
    134239750U,	// SEQi
    67130795U,	// SH
    67125601U,	// SH16_MM
    67130795U,	// SH64
    134234807U,	// SHF_B
    134238207U,	// SHF_H
    134241736U,	// SHF_W
    22413U,	// SHILO
    23728U,	// SHILOV
    134239476U,	// SHLLV_PH
    134235853U,	// SHLLV_QB
    134239413U,	// SHLLV_S_PH
    134242646U,	// SHLLV_S_W
    134239204U,	// SHLL_PH
    134235640U,	// SHLL_QB
    134239326U,	// SHLL_S_PH
    134242486U,	// SHLL_S_W
    134239466U,	// SHRAV_PH
    134235843U,	// SHRAV_QB
    134239314U,	// SHRAV_R_PH
    134235741U,	// SHRAV_R_QB
    134242241U,	// SHRAV_R_W
    134239111U,	// SHRA_PH
    134235563U,	// SHRA_QB
    134239279U,	// SHRA_R_PH
    134235706U,	// SHRA_R_QB
    134242199U,	// SHRA_R_W
    134239496U,	// SHRLV_PH
    134235873U,	// SHRLV_QB
    134239222U,	// SHRL_PH
    134235658U,	// SHRL_QB
    67130795U,	// SH_MM
    822100686U,	// SLDI_B
    822102440U,	// SLDI_D
    822104086U,	// SLDI_H
    822107696U,	// SLDI_W
    822100628U,	// SLD_B
    822102147U,	// SLD_D
    822104028U,	// SLD_H
    822107473U,	// SLD_W
    134240029U,	// SLL
    134234494U,	// SLL16_MM
    2013288221U,	// SLL64_32
    2013288221U,	// SLL64_64
    134234864U,	// SLLI_B
    134236601U,	// SLLI_D
    134238247U,	// SLLI_H
    134241857U,	// SLLI_W
    134241443U,	// SLLV
    134241443U,	// SLLV_MM
    134235013U,	// SLL_B
    134236785U,	// SLL_D
    134238363U,	// SLL_H
    134240029U,	// SLL_MM
    134240029U,	// SLL_MMR6
    134241999U,	// SLL_W
    134241155U,	// SLT
    134241155U,	// SLT64
    134241155U,	// SLT_MM
    134239774U,	// SLTi
    134239774U,	// SLTi64
    134239774U,	// SLTi_MM
    134241276U,	// SLTiu
    134241276U,	// SLTiu64
    134241276U,	// SLTiu_MM
    134241324U,	// SLTu
    134241324U,	// SLTu64
    134241324U,	// SLTu_MM
    134238073U,	// SNE
    134239695U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    805323591U,	// SPLATI_B
    805325312U,	// SPLATI_D
    805326958U,	// SPLATI_H
    805330568U,	// SPLATI_W
    805323906U,	// SPLAT_B
    805326016U,	// SPLAT_D
    805327406U,	// SPLAT_H
    805331360U,	// SPLAT_W
    134234685U,	// SRA
    134234822U,	// SRAI_B
    134236576U,	// SRAI_D
    134238222U,	// SRAI_H
    134241832U,	// SRAI_W
    134234898U,	// SRARI_B
    134236635U,	// SRARI_D
    134238281U,	// SRARI_H
    134241891U,	// SRARI_W
    134235051U,	// SRAR_B
    134237015U,	// SRAR_D
    134238478U,	// SRAR_H
    134242263U,	// SRAR_W
    134241422U,	// SRAV
    134241422U,	// SRAV_MM
    134234749U,	// SRA_B
    134236208U,	// SRA_D
    134238149U,	// SRA_H
    134234685U,	// SRA_MM
    134241551U,	// SRA_W
    134240041U,	// SRL
    134234501U,	// SRL16_MM
    134234872U,	// SRLI_B
    134236609U,	// SRLI_D
    134238255U,	// SRLI_H
    134241865U,	// SRLI_W
    134234916U,	// SRLRI_B
    134236653U,	// SRLRI_D
    134238299U,	// SRLRI_H
    134241909U,	// SRLRI_W
    134235067U,	// SRLR_B
    134237031U,	// SRLR_D
    134238494U,	// SRLR_H
    134242279U,	// SRLR_W
    134241450U,	// SRLV
    134241450U,	// SRLV_MM
    134235020U,	// SRL_B
    134236810U,	// SRL_D
    134238370U,	// SRL_H
    134240041U,	// SRL_MM
    134242024U,	// SRL_W
    9438U,	// SSNOP
    9438U,	// SSNOP_MM
    67125255U,	// STORE_ACC128
    67125255U,	// STORE_ACC64
    67125255U,	// STORE_ACC64DSP
    67131368U,	// STORE_CCOND_DSP
    67126437U,	// ST_B
    67128688U,	// ST_D
    67129937U,	// ST_H
    67133953U,	// ST_W
    134235902U,	// SUB
    134239175U,	// SUBQH_PH
    134239290U,	// SUBQH_R_PH
    134242209U,	// SUBQH_R_W
    134241814U,	// SUBQH_W
    134239250U,	// SUBQ_PH
    134239347U,	// SUBQ_S_PH
    134242515U,	// SUBQ_S_W
    134235423U,	// SUBSUS_U_B
    134237746U,	// SUBSUS_U_D
    134238975U,	// SUBSUS_U_H
    134243003U,	// SUBSUS_U_W
    134235226U,	// SUBSUU_S_B
    134237319U,	// SUBSUU_S_D
    134238715U,	// SUBSUU_S_H
    134242625U,	// SUBSUU_S_W
    134235188U,	// SUBS_S_B
    134237259U,	// SUBS_S_D
    134238677U,	// SUBS_S_H
    134242565U,	// SUBS_S_W
    134235403U,	// SUBS_U_B
    134237726U,	// SUBS_U_D
    134238955U,	// SUBS_U_H
    134242983U,	// SUBS_U_W
    134234567U,	// SUBU16_MM
    134235611U,	// SUBUH_QB
    134235717U,	// SUBUH_R_QB
    134241189U,	// SUBU_MMR6
    134239448U,	// SUBU_PH
    134235825U,	// SUBU_QB
    134239391U,	// SUBU_S_PH
    134235764U,	// SUBU_S_QB
    134234970U,	// SUBVI_B
    134236691U,	// SUBVI_D
    134238337U,	// SUBVI_H
    134241947U,	// SUBVI_W
    134235482U,	// SUBV_B
    134237827U,	// SUBV_D
    134239034U,	// SUBV_H
    134243084U,	// SUBV_W
    134235902U,	// SUB_MM
    134235902U,	// SUB_MMR6
    134241189U,	// SUBu
    134241189U,	// SUBu_MM
    1493188741U,	// SUXC1
    1493188741U,	// SUXC164
    1493188741U,	// SUXC1_MM
    67134306U,	// SW
    67125732U,	// SW16_MM
    67134306U,	// SW64
    67125354U,	// SWC1
    67125354U,	// SWC1_MM
    67125528U,	// SWC2
    67125528U,	// SWC2_R6
    67125573U,	// SWC3
    67131200U,	// SWL
    67131200U,	// SWL64
    67131200U,	// SWL_MM
    3522963U,	// SWM16_MM
    3522792U,	// SWM32_MM
    3528550U,	// SWM_MM
    137245U,	// SWP_MM
    67131617U,	// SWR
    67131617U,	// SWR64
    67131617U,	// SWR_MM
    67134306U,	// SWSP_MM
    1493188755U,	// SWXC1
    1493188755U,	// SWXC1_MM
    67134306U,	// SW_MM
    549907U,	// SYNC
    153013U,	// SYNCI
    549907U,	// SYNC_MM
    546561U,	// SYSCALL
    546561U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    67127031U,	// SbRxRyOffMemX16
    549834U,	// SebRx16
    549846U,	// SehRx16
    4367267U,	// SelBeqZ
    4367240U,	// SelBneZ
    2231539650U,	// SelTBteqZCmp
    2231539200U,	// SelTBteqZCmpi
    2231540611U,	// SelTBteqZSlt
    2231539230U,	// SelTBteqZSlti
    2231540732U,	// SelTBteqZSltiu
    2231540780U,	// SelTBteqZSltu
    2365757378U,	// SelTBtneZCmp
    2365756928U,	// SelTBtneZCmpi
    2365758339U,	// SelTBtneZSlt
    2365756958U,	// SelTBtneZSlti
    2365758460U,	// SelTBtneZSltiu
    2365758508U,	// SelTBtneZSltu
    67130795U,	// ShRxRyOffMemX16
    134240029U,	// SllX16
    16800931U,	// SllvRxRy16
    92576643U,	// SltCCRxRy16
    23427U,	// SltRxRy16
    92575262U,	// SltiCCRxImmX16
    939546142U,	// SltiRxImm16
    22046U,	// SltiRxImmX16
    92576764U,	// SltiuCCRxImmX16
    939547644U,	// SltiuRxImm16
    23548U,	// SltiuRxImmX16
    92576812U,	// SltuCCRxRy16
    23596U,	// SltuRxRy16
    92576812U,	// SltuRxRyRz16
    134234685U,	// SraX16
    16800910U,	// SravRxRy16
    134240041U,	// SrlX16
    16800938U,	// SrlvRxRy16
    134241189U,	// SubuRxRyRz16
    67134306U,	// SwRxRyOffMemX16
    1761633122U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    134240300U,	// TEQ
    33576460U,	// TEQI
    33576460U,	// TEQI_MM
    134240300U,	// TEQ_MM
    134238051U,	// TGE
    33576393U,	// TGEI
    33577973U,	// TGEIU
    33577973U,	// TGEIU_MM
    33576393U,	// TGEI_MM
    134241236U,	// TGEU
    134241236U,	// TGEU_MM
    134238051U,	// TGE_MM
    9433U,	// TLBP
    9433U,	// TLBP_MM
    9444U,	// TLBR
    9444U,	// TLBR_MM
    9423U,	// TLBWI
    9423U,	// TLBWI_MM
    9449U,	// TLBWR
    9449U,	// TLBWR_MM
    134241160U,	// TLT
    33576484U,	// TLTI
    33577987U,	// TLTIU_MM
    33576484U,	// TLTI_MM
    134241330U,	// TLTU
    134241330U,	// TLTU_MM
    134241160U,	// TLT_MM
    134238078U,	// TNE
    33576405U,	// TNEI
    33576405U,	// TNEI_MM
    134238078U,	// TNE_MM
    0U,	// TRAP
    18981U,	// TRUNC_L_D64
    22959U,	// TRUNC_L_S
    20157U,	// TRUNC_W_D32
    20157U,	// TRUNC_W_D64
    20157U,	// TRUNC_W_MM
    23281U,	// TRUNC_W_S
    23281U,	// TRUNC_W_S_MM
    33577987U,	// TTLTIU
    25565U,	// UDIV
    25565U,	// UDIV_MM
    67132384U,	// Ulhu
    67134301U,	// Ulw
    134241290U,	// V3MULU
    134234135U,	// VMM0
    134241305U,	// VMULU
    151012022U,	// VSHF_B
    151013760U,	// VSHF_D
    151015422U,	// VSHF_H
    151018951U,	// VSHF_W
    9461U,	// WAIT
    547704U,	// WAIT_MM
    33576960U,	// WRDSP
    21368U,	// WSBH
    21368U,	// WSBH_MM
    134240457U,	// XOR
    9224617U,	// XOR16_MM
    134240457U,	// XOR64
    134234933U,	// XORI_B
    134239762U,	// XORI_MMR6
    134240457U,	// XOR_MM
    134240457U,	// XOR_MMR6
    134241386U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    134239762U,	// XORi
    134239762U,	// XORi64
    134239762U,	// XORi_MM
    16799945U,	// XorRxRxRy16
    0U
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_W
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUPC_MM
    0U,	// ADDIUPC_MMR6
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDIU_MMR6
    0U,	// ADDQH_PH
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_W
    0U,	// ADDQH_W
    0U,	// ADDQ_PH
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_W
    0U,	// ADDSC
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDUH_QB
    0U,	// ADDUH_R_QB
    0U,	// ADDU_MMR6
    0U,	// ADDU_PH
    0U,	// ADDU_QB
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_QB
    1U,	// ADDVI_B
    1U,	// ADDVI_D
    1U,	// ADDVI_H
    1U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADD_MMR6
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    8U,	// ALIGN
    8U,	// ALIGN_MMR6
    0U,	// ALUIPC
    0U,	// ALUIPC_MMR6
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND64
    0U,	// ANDI16_MM
    1U,	// ANDI_B
    0U,	// ANDI_MMR6
    0U,	// AND_MM
    0U,	// AND_MMR6
    0U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    2U,	// ANDi
    2U,	// ANDi64
    2U,	// ANDi_MM
    2U,	// APPEND
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// AUI
    0U,	// AUIPC
    0U,	// AUIPC_MMR6
    0U,	// AUI_MMR6
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B
    0U,	// B16_MM
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALC_MMR6
    2U,	// BALIGN
    0U,	// BAL_BR
    0U,	// BBIT0
    0U,	// BBIT032
    0U,	// BBIT1
    0U,	// BBIT132
    0U,	// BC
    0U,	// BC1EQZ
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2NEZ
    1U,	// BCLRI_B
    1U,	// BCLRI_D
    1U,	// BCLRI_H
    1U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BC_MMR6
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQL
    0U,	// BEQZ16_MM
    0U,	// BEQZALC
    0U,	// BEQZALC_MMR6
    0U,	// BEQZC
    0U,	// BEQZC_MM
    0U,	// BEQ_MM
    0U,	// BGE
    0U,	// BGEC
    0U,	// BGEU
    0U,	// BGEUC
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALC_MMR6
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGT
    0U,	// BGTU
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZALC_MMR6
    0U,	// BGTZC
    0U,	// BGTZL
    0U,	// BGTZ_MM
    3U,	// BINSLI_B
    3U,	// BINSLI_D
    3U,	// BINSLI_H
    3U,	// BINSLI_W
    4U,	// BINSL_B
    4U,	// BINSL_D
    4U,	// BINSL_H
    4U,	// BINSL_W
    3U,	// BINSRI_B
    3U,	// BINSRI_D
    3U,	// BINSRI_H
    3U,	// BINSRI_W
    4U,	// BINSR_B
    4U,	// BINSR_D
    4U,	// BINSR_H
    4U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITSWAP
    0U,	// BITSWAP_MMR6
    0U,	// BLE
    0U,	// BLEU
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZALC_MMR6
    0U,	// BLEZC
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLT
    0U,	// BLTC
    0U,	// BLTU
    0U,	// BLTUC
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALC_MMR6
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZL
    0U,	// BLTZ_MM
    3U,	// BMNZI_B
    4U,	// BMNZ_V
    3U,	// BMZI_B
    4U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    1U,	// BNEGI_B
    1U,	// BNEGI_D
    1U,	// BNEGI_H
    1U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNEZ16_MM
    0U,	// BNEZALC
    0U,	// BNEZALC_MMR6
    0U,	// BNEZC
    0U,	// BNEZC_MM
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    0U,	// BREAK
    0U,	// BREAK16_MM
    0U,	// BREAK_MM
    0U,	// BREAK_MMR6
    3U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    4U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    1U,	// BSETI_B
    1U,	// BSETI_D
    1U,	// BSETI_H
    1U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// B_MM_Pseudo
    0U,	// BeqImm
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BneImm
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CACHE
    0U,	// CACHE_MM
    0U,	// CACHE_MMR6
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_S
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFCMSA
    10U,	// CINS
    10U,	// CINS32
    0U,	// CLASS_D
    0U,	// CLASS_S
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    1U,	// CLEI_U_B
    1U,	// CLEI_U_D
    1U,	// CLEI_U_H
    1U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_MMR6
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    1U,	// CLTI_U_B
    1U,	// CLTI_U_D
    1U,	// CLTI_U_H
    1U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_MMR6
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LT_QB
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LT_QB
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_S
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_S
    0U,	// CMP_LT_D
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_S
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_S
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_S
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_S
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_S
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_S
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_S
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_S
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_S
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_S
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_S
    0U,	// CMP_UN_D
    0U,	// CMP_UN_S
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    17U,	// COPY_S_B
    17U,	// COPY_S_D
    17U,	// COPY_S_H
    17U,	// COPY_S_W
    17U,	// COPY_U_B
    17U,	// COPY_U_D
    17U,	// COPY_U_H
    17U,	// COPY_U_W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTCMSA
    0U,	// CVT_D32_S
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_W
    0U,	// CVT_D_S_MM
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_L
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_W_D32
    0U,	// CVT_W_D64
    0U,	// CVT_W_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// C_EQ_D32
    0U,	// C_EQ_D64
    0U,	// C_EQ_S
    0U,	// C_F_D32
    0U,	// C_F_D64
    0U,	// C_F_S
    0U,	// C_LE_D32
    0U,	// C_LE_D64
    0U,	// C_LE_S
    0U,	// C_LT_D32
    0U,	// C_LT_D64
    0U,	// C_LT_S
    0U,	// C_NGE_D32
    0U,	// C_NGE_D64
    0U,	// C_NGE_S
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_S
    0U,	// C_NGL_D32
    0U,	// C_NGL_D64
    0U,	// C_NGL_S
    0U,	// C_NGT_D32
    0U,	// C_NGT_D64
    0U,	// C_NGT_S
    0U,	// C_OLE_D32
    0U,	// C_OLE_D64
    0U,	// C_OLE_S
    0U,	// C_OLT_D32
    0U,	// C_OLT_D64
    0U,	// C_OLT_S
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_S
    0U,	// C_SF_D32
    0U,	// C_SF_D64
    0U,	// C_SF_S
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_S
    0U,	// C_ULE_D32
    0U,	// C_ULE_D64
    0U,	// C_ULE_S
    0U,	// C_ULT_D32
    0U,	// C_ULT_D64
    0U,	// C_ULT_S
    0U,	// C_UN_D32
    0U,	// C_UN_D64
    0U,	// C_UN_S
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// Constant32
    0U,	// DADD
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    0U,	// DAHI
    8U,	// DALIGN
    0U,	// DATI
    0U,	// DAUI
    0U,	// DBITSWAP
    0U,	// DCLO
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DERET
    0U,	// DERET_MM
    42U,	// DEXT
    42U,	// DEXTM
    42U,	// DEXTU
    0U,	// DI
    42U,	// DINS
    42U,	// DINSM
    42U,	// DINSU
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIVU_MMR6
    0U,	// DIV_MMR6
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    8U,	// DLSA
    8U,	// DLSA_R6
    2U,	// DMFC0
    0U,	// DMFC1
    2U,	// DMFC2
    0U,	// DMFC2_OCTEON
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMTC0
    0U,	// DMTC1
    0U,	// DMTC2
    0U,	// DMTC2_OCTEON
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUL
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    4U,	// DPADD_S_D
    4U,	// DPADD_S_H
    4U,	// DPADD_S_W
    4U,	// DPADD_U_D
    4U,	// DPADD_U_H
    4U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_S_W_PH
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBR
    0U,	// DPAX_W_PH
    0U,	// DPA_W_PH
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_S_W_PH
    4U,	// DPSUB_S_D
    4U,	// DPSUB_S_H
    4U,	// DPSUB_S_W
    4U,	// DPSUB_U_D
    4U,	// DPSUB_U_H
    4U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBR
    0U,	// DPSX_W_PH
    0U,	// DPS_W_PH
    2U,	// DROTR
    2U,	// DROTR32
    0U,	// DROTRV
    0U,	// DSBH
    0U,	// DSDIV
    0U,	// DSHD
    2U,	// DSLL
    2U,	// DSLL32
    0U,	// DSLL64_32
    0U,	// DSLLV
    2U,	// DSRA
    2U,	// DSRA32
    0U,	// DSRAV
    2U,	// DSRL
    2U,	// DSRL32
    0U,	// DSRLV
    0U,	// DSUB
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EHB_MM
    0U,	// EHB_MMR6
    0U,	// EI
    0U,	// EI_MM
    0U,	// EI_MMR6
    0U,	// ERET
    0U,	// ERETNC_MMR6
    0U,	// ERET_MM
    0U,	// ERET_MMR6
    42U,	// EXT
    2U,	// EXTP
    2U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPV
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_R_W
    0U,	// EXTRV_S_H
    0U,	// EXTRV_W
    2U,	// EXTR_RS_W
    2U,	// EXTR_R_W
    2U,	// EXTR_S_H
    2U,	// EXTR_W
    10U,	// EXTS
    10U,	// EXTS32
    42U,	// EXT_MM
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_D32
    0U,	// FABS_D64
    0U,	// FABS_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FABS_W
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D64
    0U,	// FADD_MM
    0U,	// FADD_S
    0U,	// FADD_S_MM
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D64
    0U,	// FDIV_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_S
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    4U,	// FMADD_D
    4U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    4U,	// FMSUB_D
    4U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D64
    0U,	// FMUL_MM
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D64
    0U,	// FNEG_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D64
    0U,	// FSQRT_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D64
    0U,	// FSUB_MM
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GotPrologue16
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    42U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    42U,	// INS_MM
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JALX_MM
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIALC_MMR6
    0U,	// JIC
    0U,	// JIC_MMR6
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JR_HB
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JalOneReg
    0U,	// JalTwoReg
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBU16_MM
    0U,	// LBUX
    0U,	// LB_MM
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDPC
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_H
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHU16_MM
    0U,	// LHX
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LL
    0U,	// LLD
    0U,	// LLD_R6
    0U,	// LL_MM
    0U,	// LL_R6
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    8U,	// LSA
    0U,	// LSA_MMR6
    8U,	// LSA_R6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW16_MM
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWGP_MM
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWL_MM
    0U,	// LWM16_MM
    0U,	// LWM32_MM
    0U,	// LWM_MM
    0U,	// LWPC
    0U,	// LWPC_MMR6
    0U,	// LWP_MM
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWR_MM
    0U,	// LWSP_MM
    0U,	// LWUPC
    0U,	// LWU_MM
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LWXS_MM
    0U,	// LW_MM
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LoadAddrImm32
    0U,	// LoadAddrReg32
    0U,	// LoadImm32
    0U,	// LoadImm64
    0U,	// LwConstant32
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    4U,	// MADDF_D
    4U,	// MADDF_S
    4U,	// MADDR_Q_H
    4U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_MM
    4U,	// MADDV_B
    4U,	// MADDV_D
    4U,	// MADDV_H
    4U,	// MADDV_W
    40U,	// MADD_D32
    40U,	// MADD_D32_MM
    40U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_MM
    4U,	// MADD_Q_H
    4U,	// MADD_Q_W
    40U,	// MADD_S
    40U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHR
    0U,	// MAXA_D
    0U,	// MAXA_S
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    1U,	// MAXI_U_B
    1U,	// MAXI_U_D
    1U,	// MAXI_U_H
    1U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    2U,	// MFC0
    0U,	// MFC1
    0U,	// MFC1_MM
    2U,	// MFC2
    0U,	// MFHC1_D32
    0U,	// MFHC1_D64
    0U,	// MFHC1_MM
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_MM
    0U,	// MINA_D
    0U,	// MINA_S
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    1U,	// MINI_U_B
    1U,	// MINI_U_D
    1U,	// MINI_U_H
    1U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODU
    0U,	// MODU_MMR6
    0U,	// MOD_MMR6
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVEP_MM
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSUB
    4U,	// MSUBF_D
    4U,	// MSUBF_S
    4U,	// MSUBR_Q_H
    4U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_MM
    4U,	// MSUBV_B
    4U,	// MSUBV_D
    4U,	// MSUBV_H
    4U,	// MSUBV_W
    40U,	// MSUB_D32
    40U,	// MSUB_D32_MM
    40U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_MM
    4U,	// MSUB_Q_H
    4U,	// MSUB_Q_W
    40U,	// MSUB_S
    40U,	// MSUB_S_MM
    0U,	// MTC0
    0U,	// MTC1
    0U,	// MTC1_MM
    0U,	// MTC2
    0U,	// MTHC1_D32
    0U,	// MTHC1_D64
    0U,	// MTHC1_MM
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUHU_MMR6
    0U,	// MUH_MMR6
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBR
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_W
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_W
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSA_W_PH
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULT_DSP
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULU_MMR6
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_MMR6
    0U,	// MUL_PH
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    40U,	// NMADD_D32
    40U,	// NMADD_D32_MM
    40U,	// NMADD_D64
    40U,	// NMADD_S
    40U,	// NMADD_S_MM
    40U,	// NMSUB_D32
    40U,	// NMSUB_D32_MM
    40U,	// NMSUB_D64
    40U,	// NMSUB_S
    40U,	// NMSUB_S_MM
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR64
    1U,	// NORI_B
    0U,	// NOR_MM
    0U,	// NOR_MMR6
    0U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// NOT16_MM
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR64
    1U,	// ORI_B
    0U,	// ORI_MMR6
    0U,	// OR_MM
    0U,	// OR_MMR6
    0U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    2U,	// ORi
    2U,	// ORi64
    2U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PAUSE
    0U,	// PAUSE_MM
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_QB
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECR_QB_PH
    2U,	// PRECR_SRA_PH_W
    2U,	// PRECR_SRA_R_PH_W
    0U,	// PREF
    0U,	// PREF_MM
    0U,	// PREF_MMR6
    0U,	// PREF_R6
    2U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoUDIV
    0U,	// RADDU_W_QB
    0U,	// RDDSP
    0U,	// RDHWR
    0U,	// RDHWR64
    0U,	// RDHWR_MM
    0U,	// REPLV_PH
    0U,	// REPLV_QB
    0U,	// REPL_PH
    0U,	// REPL_QB
    0U,	// RINT_D
    0U,	// RINT_S
    2U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    2U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_S
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    2U,	// SAT_S_B
    2U,	// SAT_S_D
    1U,	// SAT_S_H
    2U,	// SAT_S_W
    2U,	// SAT_U_B
    2U,	// SAT_U_D
    1U,	// SAT_U_H
    2U,	// SAT_U_W
    0U,	// SB
    0U,	// SB16_MM
    0U,	// SB64
    0U,	// SB_MM
    0U,	// SC
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SC_MM
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP16_MM
    0U,	// SDBBP_MM
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDL
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEB_MMR6
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SEH_MMR6
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_MMR6
    0U,	// SELEQZ_S
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_MMR6
    0U,	// SELNEZ_S
    4U,	// SEL_D
    4U,	// SEL_S
    0U,	// SEQ
    0U,	// SEQi
    0U,	// SH
    0U,	// SH16_MM
    0U,	// SH64
    1U,	// SHF_B
    1U,	// SHF_H
    1U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHLLV_PH
    0U,	// SHLLV_QB
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_W
    2U,	// SHLL_PH
    2U,	// SHLL_QB
    2U,	// SHLL_S_PH
    2U,	// SHLL_S_W
    0U,	// SHRAV_PH
    0U,	// SHRAV_QB
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_W
    2U,	// SHRA_PH
    2U,	// SHRA_QB
    2U,	// SHRA_R_PH
    2U,	// SHRA_R_QB
    2U,	// SHRA_R_W
    0U,	// SHRLV_PH
    0U,	// SHRLV_QB
    2U,	// SHRL_PH
    2U,	// SHRL_QB
    0U,	// SH_MM
    19U,	// SLDI_B
    19U,	// SLDI_D
    19U,	// SLDI_H
    19U,	// SLDI_W
    20U,	// SLD_B
    20U,	// SLD_D
    20U,	// SLD_H
    20U,	// SLD_W
    2U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL64_32
    0U,	// SLL64_64
    1U,	// SLLI_B
    1U,	// SLLI_D
    1U,	// SLLI_H
    1U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    2U,	// SLL_MM
    2U,	// SLL_MMR6
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    17U,	// SPLATI_B
    17U,	// SPLATI_D
    17U,	// SPLATI_H
    17U,	// SPLATI_W
    16U,	// SPLAT_B
    16U,	// SPLAT_D
    16U,	// SPLAT_H
    16U,	// SPLAT_W
    2U,	// SRA
    1U,	// SRAI_B
    1U,	// SRAI_D
    1U,	// SRAI_H
    1U,	// SRAI_W
    2U,	// SRARI_B
    2U,	// SRARI_D
    1U,	// SRARI_H
    2U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    2U,	// SRA_MM
    0U,	// SRA_W
    2U,	// SRL
    0U,	// SRL16_MM
    1U,	// SRLI_B
    1U,	// SRLI_D
    1U,	// SRLI_H
    1U,	// SRLI_W
    2U,	// SRLRI_B
    2U,	// SRLRI_D
    1U,	// SRLRI_H
    2U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    2U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// SSNOP_MM
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_W
    0U,	// SUBQH_W
    0U,	// SUBQ_PH
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_W
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBUH_QB
    0U,	// SUBUH_R_QB
    0U,	// SUBU_MMR6
    0U,	// SUBU_PH
    0U,	// SUBU_QB
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_QB
    1U,	// SUBVI_B
    1U,	// SUBVI_D
    1U,	// SUBVI_H
    1U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUB_MMR6
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW16_MM
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWL_MM
    0U,	// SWM16_MM
    0U,	// SWM32_MM
    0U,	// SWM_MM
    0U,	// SWP_MM
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWR_MM
    0U,	// SWSP_MM
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SYNC
    0U,	// SYNCI
    0U,	// SYNC_MM
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// SelBeqZ
    0U,	// SelBneZ
    0U,	// SelTBteqZCmp
    0U,	// SelTBteqZCmpi
    0U,	// SelTBteqZSlt
    0U,	// SelTBteqZSlti
    0U,	// SelTBteqZSltiu
    0U,	// SelTBteqZSltu
    0U,	// SelTBtneZCmp
    0U,	// SelTBtneZCmpi
    0U,	// SelTBtneZSlt
    0U,	// SelTBtneZSlti
    0U,	// SelTBtneZSltiu
    0U,	// SelTBtneZSltu
    0U,	// ShRxRyOffMemX16
    2U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltCCRxRy16
    0U,	// SltRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRy16
    0U,	// SltuRxRyRz16
    2U,	// SraX16
    0U,	// SravRxRy16
    2U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    2U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    2U,	// TEQ_MM
    2U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    2U,	// TGEU
    2U,	// TGEU_MM
    2U,	// TGE_MM
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    2U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    2U,	// TLTU
    2U,	// TLTU_MM
    2U,	// TLT_MM
    2U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    2U,	// TNE_MM
    0U,	// TRAP
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_S
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// Ulhu
    0U,	// Ulw
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    4U,	// VSHF_B
    4U,	// VSHF_D
    4U,	// VSHF_H
    4U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WRDSP
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR64
    1U,	// XORI_B
    0U,	// XORI_MMR6
    0U,	// XOR_MM
    0U,	// XOR_MMR6
    0U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    2U,	// XORi
    2U,	// XORi64
    2U,	// XORi_MM
    0U,	// XorRxRxRy16
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'v', 'm', 'm', '0', 9, 0,
  /* 28 */ 'm', 't', 'm', '0', 9, 0,
  /* 34 */ 'm', 't', 'p', '0', 9, 0,
  /* 40 */ 'b', 'b', 'i', 't', '0', 9, 0,
  /* 47 */ 'l', 'd', 'c', '1', 9, 0,
  /* 53 */ 's', 'd', 'c', '1', 9, 0,
  /* 59 */ 'c', 'f', 'c', '1', 9, 0,
  /* 65 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 72 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 79 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 86 */ 'c', 't', 'c', '1', 9, 0,
  /* 92 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 99 */ 'l', 'w', 'c', '1', 9, 0,
  /* 105 */ 's', 'w', 'c', '1', 9, 0,
  /* 111 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 118 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 125 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 132 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 139 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 146 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 153 */ 'm', 't', 'm', '1', 9, 0,
  /* 159 */ 'm', 't', 'p', '1', 9, 0,
  /* 165 */ 'b', 'b', 'i', 't', '1', 9, 0,
  /* 172 */ 'b', 'b', 'i', 't', '0', '3', '2', 9, 0,
  /* 181 */ 'b', 'b', 'i', 't', '1', '3', '2', 9, 0,
  /* 190 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 198 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 208 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 216 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 224 */ 'l', 'w', 'm', '3', '2', 9, 0,
  /* 231 */ 's', 'w', 'm', '3', '2', 9, 0,
  /* 238 */ 'd', 'r', 'o', 't', 'r', '3', '2', 9, 0,
  /* 247 */ 'l', 'd', 'c', '2', 9, 0,
  /* 253 */ 's', 'd', 'c', '2', 9, 0,
  /* 259 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 266 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 273 */ 'l', 'w', 'c', '2', 9, 0,
  /* 279 */ 's', 'w', 'c', '2', 9, 0,
  /* 285 */ 'm', 't', 'm', '2', 9, 0,
  /* 291 */ 'm', 't', 'p', '2', 9, 0,
  /* 297 */ 'a', 'd', 'd', 'i', 'u', 'r', '2', 9, 0,
  /* 306 */ 'l', 'd', 'c', '3', 9, 0,
  /* 312 */ 's', 'd', 'c', '3', 9, 0,
  /* 318 */ 'l', 'w', 'c', '3', 9, 0,
  /* 324 */ 's', 'w', 'c', '3', 9, 0,
  /* 330 */ 'a', 'd', 'd', 'i', 'u', 's', '5', 9, 0,
  /* 339 */ 's', 'b', '1', '6', 9, 0,
  /* 345 */ 'a', 'n', 'd', '1', '6', 9, 0,
  /* 352 */ 's', 'h', '1', '6', 9, 0,
  /* 358 */ 'a', 'n', 'd', 'i', '1', '6', 9, 0,
  /* 366 */ 'l', 'i', '1', '6', 9, 0,
  /* 372 */ 'b', 'r', 'e', 'a', 'k', '1', '6', 9, 0,
  /* 381 */ 's', 'l', 'l', '1', '6', 9, 0,
  /* 388 */ 's', 'r', 'l', '1', '6', 9, 0,
  /* 395 */ 'l', 'w', 'm', '1', '6', 9, 0,
  /* 402 */ 's', 'w', 'm', '1', '6', 9, 0,
  /* 409 */ 's', 'd', 'b', 'b', 'p', '1', '6', 9, 0,
  /* 418 */ 'j', 'r', '1', '6', 9, 0,
  /* 424 */ 'x', 'o', 'r', '1', '6', 9, 0,
  /* 431 */ 'j', 'a', 'l', 'r', 's', '1', '6', 9, 0,
  /* 440 */ 'n', 'o', 't', '1', '6', 9, 0,
  /* 447 */ 'l', 'b', 'u', '1', '6', 9, 0,
  /* 454 */ 's', 'u', 'b', 'u', '1', '6', 9, 0,
  /* 462 */ 'a', 'd', 'd', 'u', '1', '6', 9, 0,
  /* 470 */ 'l', 'h', 'u', '1', '6', 9, 0,
  /* 477 */ 'l', 'w', '1', '6', 9, 0,
  /* 483 */ 's', 'w', '1', '6', 9, 0,
  /* 489 */ 'b', 'n', 'e', 'z', '1', '6', 9, 0,
  /* 497 */ 'b', 'e', 'q', 'z', '1', '6', 9, 0,
  /* 505 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 521 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 538 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 554 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 571 */ 'd', 's', 'r', 'a', 9, 0,
  /* 577 */ 'd', 'l', 's', 'a', 9, 0,
  /* 583 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 591 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 599 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 608 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 617 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 627 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 636 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 643 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 651 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 659 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 666 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 675 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 684 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 693 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 701 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 709 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 717 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 725 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 733 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 742 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 751 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 759 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 767 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 777 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 785 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 794 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 803 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 812 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 820 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 828 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 838 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 848 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 857 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 866 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 875 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 883 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 892 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 900 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 907 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 914 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 923 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 931 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 938 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 946 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 954 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 962 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 971 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 979 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 989 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 998 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1007 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1016 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1026 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1036 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1046 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1056 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 1065 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 1075 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 1085 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 1095 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 1104 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 1113 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 1125 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 1134 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 1143 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 1153 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 1162 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 1170 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 1178 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 1188 */ 's', 't', '.', 'b', 9, 0,
  /* 1194 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 1204 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 1213 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1222 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1231 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1241 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1251 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1261 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1271 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 1280 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 1290 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1300 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1310 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1322 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1331 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1340 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1349 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1358 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1368 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1377 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1386 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1395 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1404 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1412 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1418 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1425 */ 's', 'e', 'b', 9, 0,
  /* 1430 */ 'j', 'r', '.', 'h', 'b', 9, 0,
  /* 1437 */ 'j', 'a', 'l', 'r', '.', 'h', 'b', 9, 0,
  /* 1446 */ 'l', 'b', 9, 0,
  /* 1450 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1459 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1473 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1486 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1498 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1508 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1518 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1527 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1536 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1545 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1554 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1568 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1581 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1593 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1604 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1616 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1628 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1640 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1651 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1662 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1673 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1687 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1700 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1712 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1721 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1730 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1740 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1750 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1760 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1770 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1782 */ 's', 'b', 9, 0,
  /* 1786 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1794 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1800 */ 'b', 'c', 9, 0,
  /* 1804 */ 'b', 'g', 'e', 'c', 9, 0,
  /* 1810 */ 'b', 'n', 'e', 'c', 9, 0,
  /* 1816 */ 'j', 'i', 'c', 9, 0,
  /* 1821 */ 'b', 'a', 'l', 'c', 9, 0,
  /* 1827 */ 'j', 'i', 'a', 'l', 'c', 9, 0,
  /* 1834 */ 'b', 'g', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1843 */ 'b', 'l', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1852 */ 'b', 'n', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1861 */ 'b', 'e', 'q', 'z', 'a', 'l', 'c', 9, 0,
  /* 1870 */ 'b', 'g', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1879 */ 'b', 'l', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1888 */ 'l', 'd', 'p', 'c', 9, 0,
  /* 1894 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 1901 */ 'a', 'l', 'u', 'i', 'p', 'c', 9, 0,
  /* 1909 */ 'a', 'd', 'd', 'i', 'u', 'p', 'c', 9, 0,
  /* 1918 */ 'l', 'w', 'u', 'p', 'c', 9, 0,
  /* 1925 */ 'l', 'w', 'p', 'c', 9, 0,
  /* 1931 */ 'b', 'e', 'q', 'c', 9, 0,
  /* 1937 */ 'j', 'r', 'c', 9, 0,
  /* 1942 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 1949 */ 'b', 'l', 't', 'c', 9, 0,
  /* 1955 */ 'b', 'g', 'e', 'u', 'c', 9, 0,
  /* 1962 */ 'b', 'l', 't', 'u', 'c', 9, 0,
  /* 1969 */ 'b', 'n', 'v', 'c', 9, 0,
  /* 1975 */ 'b', 'o', 'v', 'c', 9, 0,
  /* 1981 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 1988 */ 'b', 'g', 'e', 'z', 'c', 9, 0,
  /* 1995 */ 'b', 'l', 'e', 'z', 'c', 9, 0,
  /* 2002 */ 'b', 'n', 'e', 'z', 'c', 9, 0,
  /* 2009 */ 'b', 'e', 'q', 'z', 'c', 9, 0,
  /* 2016 */ 'b', 'g', 't', 'z', 'c', 9, 0,
  /* 2023 */ 'b', 'l', 't', 'z', 'c', 9, 0,
  /* 2030 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 2039 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 2048 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 2057 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 2067 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 2077 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 2087 */ 'm', 'i', 'n', 'a', '.', 'd', 9, 0,
  /* 2095 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 2102 */ 'm', 'a', 'x', 'a', '.', 'd', 9, 0,
  /* 2110 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2118 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2127 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2136 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 2144 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 2152 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2160 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2169 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2178 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 2185 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 2194 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 2203 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 2212 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2220 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2230 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 2238 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 2248 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 2257 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2268 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2276 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2285 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2296 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2305 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2317 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2326 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 2334 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 2342 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2351 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2360 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 2369 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 2376 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 'd', 9, 0,
  /* 2386 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 2394 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2405 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2413 */ 'm', 's', 'u', 'b', 'f', '.', 'd', 9, 0,
  /* 2422 */ 'm', 'a', 'd', 'd', 'f', '.', 'd', 9, 0,
  /* 2431 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 2439 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 2447 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 2455 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 2463 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 2471 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 2479 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 2488 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 2496 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 2504 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 2514 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 2522 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 2531 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2540 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2549 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 2559 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 2569 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 2578 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 2587 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 2596 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 2607 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 2618 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 2628 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2639 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2648 */ 's', 'e', 'l', '.', 'd', 9, 0,
  /* 2655 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2664 */ 'f', 'i', 'l', 'l', '.', 'd', 9, 0,
  /* 2672 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2679 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2689 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2697 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2704 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2713 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2721 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2729 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2737 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2745 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2755 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2763 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2774 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2782 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 2790 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 2798 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2806 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2816 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 2824 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2833 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2844 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2852 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2861 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2872 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2881 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2893 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2902 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 2910 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 2918 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 2926 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 2934 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 2942 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 2952 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 2960 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 2969 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 2977 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 2986 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 2996 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3006 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3017 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 3029 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3039 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3050 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3059 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3068 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3077 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3087 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3097 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3107 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3117 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 3126 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 3136 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 3146 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 3156 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 3166 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 3175 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 3184 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3195 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3206 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 3218 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 3227 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 3236 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'd', 9, 0,
  /* 3246 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 3253 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 3263 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 3272 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 3280 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 3289 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3297 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3307 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 3315 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 3324 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3335 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3343 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3352 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3363 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3372 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3384 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3393 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 3401 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 3410 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'd', 9, 0,
  /* 3420 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3429 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3439 */ 's', 't', '.', 'd', 9, 0,
  /* 3445 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 3453 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3463 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3473 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3484 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 3496 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3506 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3517 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3526 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3535 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3544 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3554 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3564 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3574 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3584 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 3593 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 3603 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 3613 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3623 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3633 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3645 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3654 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3663 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3674 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3685 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 3694 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 3703 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'd', 9, 0,
  /* 3713 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 3722 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 3731 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 3740 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 3749 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 3757 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 3765 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3772 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 3783 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 3794 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 3804 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 3815 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 3824 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 3832 */ 'b', 'z', '.', 'd', 9, 0,
  /* 3838 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 'd', 9, 0,
  /* 3848 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 3855 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 'd', 9, 0,
  /* 3865 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 3873 */ 's', 'c', 'd', 9, 0,
  /* 3878 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 3884 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 3890 */ 'd', 's', 'h', 'd', 9, 0,
  /* 3896 */ 'l', 'l', 'd', 9, 0,
  /* 3901 */ 'a', 'n', 'd', 9, 0,
  /* 3906 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 3915 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 3923 */ 'd', 'm', 'o', 'd', 9, 0,
  /* 3929 */ 's', 'd', 9, 0,
  /* 3933 */ 'b', 'g', 'e', 9, 0,
  /* 3938 */ 't', 'g', 'e', 9, 0,
  /* 3943 */ 'c', 'a', 'c', 'h', 'e', 9, 0,
  /* 3950 */ 'b', 'l', 'e', 9, 0,
  /* 3955 */ 'b', 'n', 'e', 9, 0,
  /* 3960 */ 's', 'n', 'e', 9, 0,
  /* 3965 */ 't', 'n', 'e', 9, 0,
  /* 3970 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 3976 */ 'b', 'c', '1', 'f', 9, 0,
  /* 3982 */ 'p', 'r', 'e', 'f', 9, 0,
  /* 3988 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 3994 */ 'n', 'e', 'g', 9, 0,
  /* 3999 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 4008 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 4017 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 4027 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 4036 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 4043 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 4051 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 4059 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 4066 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 4075 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 4084 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 4093 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 4101 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 4109 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 4117 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 4125 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 4134 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 4142 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 4150 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 4160 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 4168 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 4177 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4186 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4195 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 4205 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 4215 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 4224 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 4233 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 4242 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 4250 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 4257 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 4264 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 4273 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 4281 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 4290 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 4300 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 4310 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 4319 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4330 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4341 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4351 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 4358 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 4365 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 4373 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 4381 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 4389 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 4398 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 4406 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4416 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4426 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4437 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4447 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4458 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4467 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4476 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4485 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4495 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4505 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4515 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4525 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 4534 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 4544 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4554 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4564 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 4574 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 4584 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 4593 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 4602 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 4614 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4623 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4634 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 4643 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 4653 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 4662 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 4670 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 4678 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 4688 */ 's', 't', '.', 'h', 9, 0,
  /* 4694 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4704 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4714 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4725 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4735 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4746 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4755 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4764 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4773 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4783 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4793 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4803 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4813 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 4822 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 4832 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 4842 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4852 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4862 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4874 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 4883 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 4892 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 4901 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 4910 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 4920 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 4929 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 4938 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 4947 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 4956 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 4964 */ 'b', 'z', '.', 'h', 9, 0,
  /* 4970 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 4977 */ 'd', 's', 'b', 'h', 9, 0,
  /* 4983 */ 'w', 's', 'b', 'h', 9, 0,
  /* 4989 */ 's', 'e', 'h', 9, 0,
  /* 4994 */ 'l', 'h', 9, 0,
  /* 4998 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 5007 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5021 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5034 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5051 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 5062 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5072 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5082 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 5091 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 5100 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 5109 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5118 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5129 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 5137 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 5146 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 5155 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 5166 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5177 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5189 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5201 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5213 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5224 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5234 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5245 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5256 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5267 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5278 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5289 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5300 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5312 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 5324 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 5335 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 5344 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 5353 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 5363 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5373 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5383 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5393 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5403 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5418 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5433 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5445 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5458 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5473 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5486 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5500 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5514 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5524 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5535 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5546 */ 's', 'h', 9, 0,
  /* 5550 */ 'd', 'm', 'u', 'h', 9, 0,
  /* 5556 */ 's', 'y', 'n', 'c', 'i', 9, 0,
  /* 5563 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 5570 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 5576 */ 't', 'g', 'e', 'i', 9, 0,
  /* 5582 */ 's', 'n', 'e', 'i', 9, 0,
  /* 5588 */ 't', 'n', 'e', 'i', 9, 0,
  /* 5594 */ 'd', 'a', 'h', 'i', 9, 0,
  /* 5600 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 5606 */ 'm', 't', 'h', 'i', 9, 0,
  /* 5612 */ '.', 'a', 'l', 'i', 'g', 'n', 32, '2', 10, 9, 'l', 'i', 9, 0,
  /* 5626 */ 'd', 'l', 'i', 9, 0,
  /* 5631 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 5637 */ 's', 'e', 'q', 'i', 9, 0,
  /* 5643 */ 't', 'e', 'q', 'i', 9, 0,
  /* 5649 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 5655 */ 'd', 'a', 't', 'i', 9, 0,
  /* 5661 */ 's', 'l', 't', 'i', 9, 0,
  /* 5667 */ 't', 'l', 't', 'i', 9, 0,
  /* 5673 */ 'd', 'a', 'u', 'i', 9, 0,
  /* 5679 */ 'l', 'u', 'i', 9, 0,
  /* 5684 */ 'j', 9, 0,
  /* 5687 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 5694 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 5703 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 5712 */ 'b', 'a', 'l', 9, 0,
  /* 5717 */ 'j', 'a', 'l', 9, 0,
  /* 5722 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 5730 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 5738 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5750 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5762 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5778 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5793 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5809 */ 'l', 'd', 'l', 9, 0,
  /* 5814 */ 's', 'd', 'l', 9, 0,
  /* 5819 */ 'b', 'n', 'e', 'l', 9, 0,
  /* 5825 */ 'b', 'c', '1', 'f', 'l', 9, 0,
  /* 5832 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5846 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5860 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5873 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5888 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 5897 */ 'b', 'g', 'e', 'z', 'a', 'l', 'l', 9, 0,
  /* 5906 */ 'b', 'l', 't', 'z', 'a', 'l', 'l', 9, 0,
  /* 5915 */ 'd', 's', 'l', 'l', 9, 0,
  /* 5921 */ 'b', 'e', 'q', 'l', 9, 0,
  /* 5927 */ 'd', 's', 'r', 'l', 9, 0,
  /* 5933 */ 'b', 'c', '1', 't', 'l', 9, 0,
  /* 5940 */ 'd', 'm', 'u', 'l', 9, 0,
  /* 5946 */ 'l', 'w', 'l', 9, 0,
  /* 5951 */ 's', 'w', 'l', 9, 0,
  /* 5956 */ 'b', 'g', 'e', 'z', 'l', 9, 0,
  /* 5963 */ 'b', 'l', 'e', 'z', 'l', 9, 0,
  /* 5970 */ 'b', 'g', 't', 'z', 'l', 9, 0,
  /* 5977 */ 'b', 'l', 't', 'z', 'l', 9, 0,
  /* 5984 */ 'l', 'w', 'm', 9, 0,
  /* 5989 */ 's', 'w', 'm', 9, 0,
  /* 5994 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6002 */ 'd', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6010 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 6016 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 6022 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 6028 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 6035 */ 'm', 't', 'l', 'o', 9, 0,
  /* 6041 */ 'd', 'b', 'i', 't', 's', 'w', 'a', 'p', 9, 0,
  /* 6051 */ 's', 'd', 'b', 'b', 'p', 9, 0,
  /* 6058 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 6066 */ 'm', 'o', 'v', 'e', 'p', 9, 0,
  /* 6073 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 6081 */ 'c', 'm', 'p', 9, 0,
  /* 6086 */ 'd', 'p', 'o', 'p', 9, 0,
  /* 6092 */ 'a', 'd', 'd', 'i', 'u', 'r', '1', 's', 'p', 9, 0,
  /* 6103 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6119 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6136 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 6143 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 6150 */ 'j', 'r', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6161 */ 'e', 'x', 't', 'p', 9, 0,
  /* 6167 */ 'l', 'w', 'p', 9, 0,
  /* 6172 */ 's', 'w', 'p', 9, 0,
  /* 6177 */ 'b', 'e', 'q', 9, 0,
  /* 6182 */ 's', 'e', 'q', 9, 0,
  /* 6187 */ 't', 'e', 'q', 9, 0,
  /* 6192 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6204 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6216 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6232 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6247 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6263 */ 'l', 'd', 'r', 9, 0,
  /* 6268 */ 's', 'd', 'r', 9, 0,
  /* 6273 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6287 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6301 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6314 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6329 */ 'j', 'r', 9, 0,
  /* 6333 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 6339 */ 'n', 'o', 'r', 9, 0,
  /* 6344 */ 'x', 'o', 'r', 9, 0,
  /* 6349 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 6356 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 6363 */ 'l', 'w', 'r', 9, 0,
  /* 6368 */ 's', 'w', 'r', 9, 0,
  /* 6373 */ 'm', 'i', 'n', 'a', '.', 's', 9, 0,
  /* 6381 */ 'm', 'a', 'x', 'a', '.', 's', 9, 0,
  /* 6389 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 6398 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 6407 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 6416 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 6425 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6433 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6443 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 6453 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 6462 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 's', 9, 0,
  /* 6473 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6482 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6493 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6505 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 6512 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 's', 9, 0,
  /* 6522 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 's', 9, 0,
  /* 6533 */ 'm', 's', 'u', 'b', 'f', '.', 's', 9, 0,
  /* 6542 */ 'm', 'a', 'd', 'd', 'f', '.', 's', 9, 0,
  /* 6551 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 6559 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 6567 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 6574 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 6585 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 6596 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 6606 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 6617 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 6626 */ 's', 'e', 'l', '.', 's', 9, 0,
  /* 6633 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 6642 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 6649 */ 'm', 'i', 'n', '.', 's', 9, 0,
  /* 6656 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 6664 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 's', 9, 0,
  /* 6674 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 's', 9, 0,
  /* 6685 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 6693 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 6701 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 's', 9, 0,
  /* 6711 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 6720 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 6731 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6740 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6751 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6763 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 6770 */ 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 6779 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 6788 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 6796 */ 'c', 'm', 'p', '.', 'l', 't', '.', 's', 9, 0,
  /* 6806 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 6815 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 's', 9, 0,
  /* 6826 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6835 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6846 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6858 */ 'r', 'i', 'n', 't', '.', 's', 9, 0,
  /* 6866 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 6874 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 6882 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 6889 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 6896 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 6907 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 6918 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 6928 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 6939 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 6948 */ 'm', 'a', 'x', '.', 's', 9, 0,
  /* 6955 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 's', 9, 0,
  /* 6965 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 's', 9, 0,
  /* 6975 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 6983 */ 'j', 'a', 'l', 's', 9, 0,
  /* 6989 */ 'b', 'g', 'e', 'z', 'a', 'l', 's', 9, 0,
  /* 6998 */ 'b', 'l', 't', 'z', 'a', 'l', 's', 9, 0,
  /* 7007 */ 'j', 'a', 'l', 'r', 's', 9, 0,
  /* 7014 */ 'l', 'w', 'x', 's', 9, 0,
  /* 7020 */ 'b', 'c', '1', 't', 9, 0,
  /* 7026 */ 'b', 'g', 't', 9, 0,
  /* 7031 */ 'w', 'a', 'i', 't', 9, 0,
  /* 7037 */ 'b', 'l', 't', 9, 0,
  /* 7042 */ 's', 'l', 't', 9, 0,
  /* 7047 */ 't', 'l', 't', 9, 0,
  /* 7052 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 7059 */ 'n', 'o', 't', 9, 0,
  /* 7064 */ 'm', 'o', 'v', 't', 9, 0,
  /* 7070 */ 'l', 'b', 'u', 9, 0,
  /* 7075 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 7082 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 7089 */ 'b', 'a', 'd', 'd', 'u', 9, 0,
  /* 7096 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 7103 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 7110 */ 'd', 'm', 'o', 'd', 'u', 9, 0,
  /* 7117 */ 'b', 'g', 'e', 'u', 9, 0,
  /* 7123 */ 't', 'g', 'e', 'u', 9, 0,
  /* 7129 */ 'b', 'l', 'e', 'u', 9, 0,
  /* 7135 */ 'u', 'l', 'h', 'u', 9, 0,
  /* 7141 */ 'd', 'm', 'u', 'h', 'u', 9, 0,
  /* 7148 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 7156 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 7163 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 7170 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 7177 */ 'v', '3', 'm', 'u', 'l', 'u', 9, 0,
  /* 7185 */ 'd', 'm', 'u', 'l', 'u', 9, 0,
  /* 7192 */ 'v', 'm', 'u', 'l', 'u', 9, 0,
  /* 7199 */ 'b', 'g', 't', 'u', 9, 0,
  /* 7205 */ 'b', 'l', 't', 'u', 9, 0,
  /* 7211 */ 's', 'l', 't', 'u', 9, 0,
  /* 7217 */ 't', 'l', 't', 'u', 9, 0,
  /* 7223 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 7231 */ 'd', 'd', 'i', 'v', 'u', 9, 0,
  /* 7238 */ 'l', 'w', 'u', 9, 0,
  /* 7243 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 7250 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 7258 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 7266 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 7273 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 7280 */ 'b', 'z', '.', 'v', 9, 0,
  /* 7286 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 7293 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 7300 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 7308 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 7315 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 7323 */ 'd', 'd', 'i', 'v', 9, 0,
  /* 7329 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 7336 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 7343 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 7351 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 7360 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 7367 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 7375 */ 'i', 'n', 's', 'v', 9, 0,
  /* 7381 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 7390 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 7399 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 7408 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 7418 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 7428 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 7438 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 7445 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7453 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7462 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 7470 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 7478 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 7487 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7495 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7504 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 7511 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 7520 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 7529 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 7537 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 7545 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7554 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7563 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 7571 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 7579 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7588 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7597 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 7606 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 7614 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 7622 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 7630 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 7638 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7654 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7667 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7685 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7701 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 7710 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 7719 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 7727 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 7735 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 7744 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 7752 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 7760 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 7770 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 7778 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 7787 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 7796 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 7805 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 7815 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 7825 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 7834 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 7843 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 7852 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 7865 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 7878 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 7886 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 7893 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 7903 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 7911 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 7918 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 7927 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 7935 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 7943 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 7951 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 7959 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 7967 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 7976 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 7984 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 7994 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 8004 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 8013 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8024 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8035 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8045 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 8053 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 8061 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8070 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8079 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 8086 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 8096 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8107 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8118 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 8128 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8139 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8150 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 8158 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 8166 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 8174 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 8182 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 8190 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 8200 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 8208 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 8217 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 8225 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 8233 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 8242 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8252 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8262 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8273 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 8285 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8295 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8306 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8315 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8324 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8333 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8343 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8353 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8363 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8373 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 8383 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 8392 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 8402 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8412 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8422 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8432 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8442 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 8452 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 8462 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 8472 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 8481 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 8490 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8501 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8512 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 8524 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8533 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8544 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 8553 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 8563 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8574 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8585 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8597 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 8607 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 8616 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 8624 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 8632 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 8640 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 8649 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 8658 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 8666 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 8675 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 8685 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 8694 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 8704 */ 's', 't', '.', 'w', 9, 0,
  /* 8710 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8720 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8730 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8741 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 8753 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8763 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8774 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8783 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 8792 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 8801 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8811 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8821 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8831 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8841 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 8850 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 8860 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 8870 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8880 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8890 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8902 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8911 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8920 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8931 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8942 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 8951 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 8960 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 8970 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 8979 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 8988 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 8997 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 9006 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 9014 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 9022 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 9031 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 9039 */ 'b', 'z', '.', 'w', 9, 0,
  /* 9045 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 9052 */ 'u', 'l', 'w', 9, 0,
  /* 9057 */ 's', 'w', 9, 0,
  /* 9061 */ 'l', 'h', 'x', 9, 0,
  /* 9066 */ 'j', 'a', 'l', 'x', 9, 0,
  /* 9072 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 9078 */ 'l', 'w', 'x', 9, 0,
  /* 9083 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 9089 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 9095 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 9101 */ 's', 'e', 'l', 'n', 'e', 'z', 9, 0,
  /* 9109 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 9116 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 9122 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 9128 */ 's', 'e', 'l', 'e', 'q', 'z', 9, 0,
  /* 9136 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 9143 */ 'b', 'g', 't', 'z', 9, 0,
  /* 9149 */ 'b', 'l', 't', 'z', 9, 0,
  /* 9155 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 9161 */ 's', 'e', 'b', 9, 32, 0,
  /* 9167 */ 'j', 'r', 'c', 9, 32, 0,
  /* 9173 */ 's', 'e', 'h', 9, 32, 0,
  /* 9179 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9193 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9206 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 9218 */ 'c', 'i', 'n', 's', '3', '2', 32, 0,
  /* 9226 */ 'e', 'x', 't', 's', '3', '2', 32, 0,
  /* 9234 */ 's', 'y', 'n', 'c', 32, 0,
  /* 9240 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 9248 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 9255 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 9262 */ 'c', 'i', 'n', 's', 32, 0,
  /* 9268 */ 'd', 'i', 'n', 's', 32, 0,
  /* 9274 */ 'e', 'x', 't', 's', 32, 0,
  /* 9280 */ 'd', 'e', 'x', 't', 32, 0,
  /* 9286 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 9293 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 9300 */ 'b', 'c', '1', 'n', 'e', 'z', 32, 0,
  /* 9308 */ 'b', 'c', '2', 'n', 'e', 'z', 32, 0,
  /* 9316 */ 'b', 'c', '1', 'e', 'q', 'z', 32, 0,
  /* 9324 */ 'b', 'c', '2', 'e', 'q', 'z', 32, 0,
  /* 9332 */ 'c', '.', 0,
  /* 9335 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 9343 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 9356 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 9363 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 9373 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 9388 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 9397 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 9405 */ 'e', 'h', 'b', 0,
  /* 9409 */ 'e', 'r', 'e', 't', 'n', 'c', 0,
  /* 9416 */ 'p', 'a', 'u', 's', 'e', 0,
  /* 9422 */ 't', 'l', 'b', 'w', 'i', 0,
  /* 9428 */ 'f', 'o', 'o', 0,
  /* 9432 */ 't', 'l', 'b', 'p', 0,
  /* 9437 */ 's', 's', 'n', 'o', 'p', 0,
  /* 9443 */ 't', 'l', 'b', 'r', 0,
  /* 9448 */ 't', 'l', 'b', 'w', 'r', 0,
  /* 9454 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 9460 */ 'w', 'a', 'i', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, Break16, CONSTPOOL_EN...
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUPC_MM, ADDIUPC_MMR6...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADDIUS5_MM, CTC1, CTC1_MM, DAHI, DATI, DMTC0, DMTC1, DMTC2, MTC0, MTC1...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 3:
    // AND16_MM, LSA_MMR6, MTHC1_D32, MTHC1_D64, MTHC1_MM, OR16_MM, XOR16_MM
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 4:
    // BREAK16_MM, SDBBP16_MM
    printUnsignedImm8(MI, 0, O); 
    return;
    break;
  case 5:
    // CACHE, CACHE_MM, CACHE_MMR6, CACHE_R6, PREF, PREF_MM, PREF_MMR6, PREF_...
    printUnsignedImm(MI, 2, O); 
    O << ", "; 
    printMemOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand(MI, 2, O); 
    break;
  case 7:
    // LWM16_MM, LWM32_MM, LWM_MM, MOVEP_MM, SWM16_MM, SWM32_MM, SWM_MM
    printRegisterList(MI, 0, O); 
    O << ", "; 
    break;
  case 8:
    // LWP_MM, SWP_MM
    printRegisterPair(MI, 0, O); 
    O << ", "; 
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 9:
    // SYNCI
    printMemOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 1 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 18) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUPC_MM, ADDIUPC_MMR6...
    O << ", "; 
    break;
  case 1:
    // ADDIUS5_MM, DAHI, DATI, MOVEP_MM, MultRxRyRz16, MultuRxRyRz16, SltCCRx...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDIUSP_MM, AddiuSpImmX16, B16_MM, BAL, BALC, BALC_MMR6, BC, BC_MMR6, ...
    return;
    break;
  case 3:
    // AND16_MM, LSA_MMR6, OR16_MM, XOR16_MM
    printOperand(MI, 1, O); 
    break;
  case 4:
    // AddiuRxPcImmX16
    O << ", $pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // AddiuSpImm16, Bimm16
    O << " # 16 bit inst"; 
    return;
    break;
  case 6:
    // Bteqz16, Btnez16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 7:
    // CTC1, CTC1_MM, DMTC0, DMTC1, DMTC2, MTC0, MTC1, MTC1_MM, MTC2, MTHC1_D...
    printOperand(MI, 0, O); 
    break;
  case 8:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // FCMP_S32, FCMP_S32_MM
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    O << '['; 
    break;
  case 11:
    // Jal16
    O << "\n\tnop"; 
    return;
    break;
  case 12:
    // JalB16
    O << "\t# branch\n\tnop"; 
    return;
    break;
  case 13:
    // LWM16_MM, LWM32_MM, LWM_MM, SWM16_MM, SWM32_MM, SWM_MM
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t"; 
    printOperand(MI, 1, O); 
    O << "\n2:"; 
    return;
    break;
  case 15:
    // SC, SCD, SCD_R6, SC_MM, SC_R6
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 16:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 23) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUPC_MM, ADDIUPC_MMR6...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADDIUS5_MM, AND16_MM, CTC1, CTC1_MM, DAHI, DATI, DMTC1, MTC1, MTC1_MM,...
    return;
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B, BINSLI_D, BINS...
    printOperand(MI, 2, O); 
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 4:
    // BBIT0, BBIT032, BBIT1, BBIT132, DMFC2_OCTEON, DMTC2_OCTEON, LUi, LUi64...
    printUnsignedImm(MI, 1, O); 
    break;
  case 5:
    // DMTC0, DMTC2, LSA_MMR6, MOVEP_MM, MTC0, MTC2
    O << ", "; 
    break;
  case 6:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W
    printUnsignedImm8(MI, 3, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // INSVE_B, INSVE_D, INSVE_H, INSVE_W
    printUnsignedImm(MI, 2, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printUnsignedImm(MI, 4, O); 
    O << ']'; 
    return;
    break;
  case 8:
    // LB, LB64, LBU16_MM, LB_MM, LBu, LBu64, LBu_MM, LD, LDC1, LDC164, LDC1_...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O); 
    break;
  case 11:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t"; 
    printOperand(MI, 0, O); 
    O << ", $t8"; 
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 27) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADDIUPC, ADDIUPC_MM, ADDIUPC_MMR6, ADD...
    return;
    break;
  case 1:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W,...
    O << ", "; 
    break;
  case 2:
    // AddiuRxRxImm16, LwRxPcTcp16
    O << "\t# 16 bit inst"; 
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_D, COPY_U_H, ...
    O << '['; 
    break;
  case 7:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst"; 
    return;
    break;
  case 8:
    // DMTC0, DMTC2, MTC0, MTC2
    printUnsignedImm(MI, 2, O); 
    return;
    break;
  case 9:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 10:
    // GotPrologue16
    O << "\n\taddiu\t"; 
    printOperand(MI, 1, O); 
    O << ", $pc, "; 
    printOperand(MI, 3, O); 
    O << "\n "; 
    return;
    break;
  case 11:
    // LBUX, LDXC1, LDXC164, LHX, LUXC1, LUXC164, LUXC1_MM, LWX, LWXC1, LWXC1...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // LSA_MMR6
    printOperand(MI, 0, O); 
    O << ", "; 
    printUnsignedImm(MI, 3, O); 
    return;
    break;
  case 13:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( "; 
    printOperand(MI, 1, O); 
    O << " ); "; 
    return;
    break;
  case 14:
    // MOVEP_MM
    printOperand(MI, 3, O); 
    return;
    break;
  case 15:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  case 16:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 17:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 32) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W,...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, ANDI_B, BCLRI_B, BCLRI_D, BCLRI_H,...
    printUnsignedImm8(MI, 2, O); 
    break;
  case 2:
    // ANDi, ANDi64, ANDi_MM, APPEND, BALIGN, CINS, CINS32, DEXT, DEXTM, DEXT...
    printUnsignedImm(MI, 2, O); 
    break;
  case 3:
    // BINSLI_B, BINSLI_D, BINSLI_H, BINSLI_W, BINSRI_B, BINSRI_D, BINSRI_H, ...
    printUnsignedImm8(MI, 3, O); 
    break;
  case 4:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 5 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 35) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W,...
    return;
    break;
  case 1:
    // ALIGN, ALIGN_MMR6, CINS, CINS32, DALIGN, DEXT, DEXTM, DEXTU, DINS, DIN...
    O << ", "; 
    break;
  case 2:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_D, COPY_U_H, ...
    O << ']'; 
    return;
    break;
  }


  // Fragment 6 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, EXT, EXT_MM, INS, INS_MM, MADD...
    printOperand(MI, 3, O); 
    return;
  } else {
    // ALIGN, ALIGN_MMR6, CINS, CINS32, DALIGN, DLSA, DLSA_R6, EXTS, EXTS32, ...
    printUnsignedImm(MI, 3, O); 
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 418 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'm', 'p', 'l', '0', 0,
  /* 54 */ 'p', '0', 0,
  /* 57 */ 'w', '0', 0,
  /* 60 */ 'f', '1', '1', 0,
  /* 64 */ 'w', '1', '1', 0,
  /* 68 */ 'f', '2', '1', 0,
  /* 72 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 85 */ 'w', '2', '1', 0,
  /* 89 */ 'f', '3', '1', 0,
  /* 93 */ 'w', '3', '1', 0,
  /* 97 */ 'a', 'c', '1', 0,
  /* 101 */ 'f', 'c', 'c', '1', 0,
  /* 106 */ 'f', '1', 0,
  /* 109 */ 'm', 'p', 'l', '1', 0,
  /* 114 */ 'p', '1', 0,
  /* 117 */ 'w', '1', 0,
  /* 120 */ 'f', '1', '2', 0,
  /* 124 */ 'w', '1', '2', 0,
  /* 128 */ 'f', '2', '2', 0,
  /* 132 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 145 */ 'w', '2', '2', 0,
  /* 149 */ 'a', 'c', '2', 0,
  /* 153 */ 'f', 'c', 'c', '2', 0,
  /* 158 */ 'f', '2', 0,
  /* 161 */ 'm', 'p', 'l', '2', 0,
  /* 166 */ 'p', '2', 0,
  /* 169 */ 'w', '2', 0,
  /* 172 */ 'f', '1', '3', 0,
  /* 176 */ 'w', '1', '3', 0,
  /* 180 */ 'f', '2', '3', 0,
  /* 184 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 197 */ 'w', '2', '3', 0,
  /* 201 */ 'a', 'c', '3', 0,
  /* 205 */ 'f', 'c', 'c', '3', 0,
  /* 210 */ 'f', '3', 0,
  /* 213 */ 'w', '3', 0,
  /* 216 */ 'f', '1', '4', 0,
  /* 220 */ 'w', '1', '4', 0,
  /* 224 */ 'f', '2', '4', 0,
  /* 228 */ 'w', '2', '4', 0,
  /* 232 */ 'f', 'c', 'c', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'w', '4', 0,
  /* 243 */ 'f', '1', '5', 0,
  /* 247 */ 'w', '1', '5', 0,
  /* 251 */ 'f', '2', '5', 0,
  /* 255 */ 'w', '2', '5', 0,
  /* 259 */ 'f', 'c', 'c', '5', 0,
  /* 264 */ 'f', '5', 0,
  /* 267 */ 'w', '5', 0,
  /* 270 */ 'f', '1', '6', 0,
  /* 274 */ 'w', '1', '6', 0,
  /* 278 */ 'f', '2', '6', 0,
  /* 282 */ 'w', '2', '6', 0,
  /* 286 */ 'f', 'c', 'c', '6', 0,
  /* 291 */ 'f', '6', 0,
  /* 294 */ 'w', '6', 0,
  /* 297 */ 'f', '1', '7', 0,
  /* 301 */ 'w', '1', '7', 0,
  /* 305 */ 'f', '2', '7', 0,
  /* 309 */ 'w', '2', '7', 0,
  /* 313 */ 'f', 'c', 'c', '7', 0,
  /* 318 */ 'f', '7', 0,
  /* 321 */ 'w', '7', 0,
  /* 324 */ 'f', '1', '8', 0,
  /* 328 */ 'w', '1', '8', 0,
  /* 332 */ 'f', '2', '8', 0,
  /* 336 */ 'w', '2', '8', 0,
  /* 340 */ 'f', '8', 0,
  /* 343 */ 'w', '8', 0,
  /* 346 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 362 */ 'f', '1', '9', 0,
  /* 366 */ 'w', '1', '9', 0,
  /* 370 */ 'f', '2', '9', 0,
  /* 374 */ 'w', '2', '9', 0,
  /* 378 */ 'f', '9', 0,
  /* 381 */ 'w', '9', 0,
  /* 384 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 391 */ 'r', 'a', 0,
  /* 394 */ 'h', 'w', 'r', '_', 'c', 'c', 0,
  /* 401 */ 'p', 'c', 0,
  /* 404 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 413 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 424 */ 'h', 'i', 0,
  /* 427 */ 'h', 'w', 'r', '_', 'c', 'p', 'u', 'n', 'u', 'm', 0,
  /* 438 */ 'l', 'o', 0,
  /* 441 */ 'z', 'e', 'r', 'o', 0,
  /* 446 */ 'h', 'w', 'r', '_', 's', 'y', 'n', 'c', 'i', '_', 's', 't', 'e', 'p', 0,
  /* 461 */ 'f', 'p', 0,
  /* 464 */ 'g', 'p', 0,
  /* 467 */ 's', 'p', 0,
  /* 470 */ 'h', 'w', 'r', '_', 'c', 'c', 'r', 'e', 's', 0,
  /* 480 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 487 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 497 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    62, 404, 497, 384, 413, 480, 487, 461, 464, 122, 62, 2, 272, 218, 
    245, 174, 299, 401, 391, 467, 441, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 122, 174, 218, 245, 
    272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 
    9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 1, 61, 
    121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 
    279, 306, 333, 371, 30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 
    325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 
    46, 158, 237, 291, 340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 
    332, 29, 12, 72, 132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 
    232, 259, 286, 313, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 461, 46, 106, 158, 210, 237, 
    264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 
    362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 464, 
    37, 97, 149, 201, 427, 446, 394, 470, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 
    49, 109, 161, 54, 114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 
    181, 467, 326, 360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
    57, 117, 169, 213, 240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 
    220, 247, 274, 301, 328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 
    336, 374, 33, 93, 441, 218, 245, 272, 299, 37, 46, 106, 158, 210, 
    237, 264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 
    324, 362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 
    346, 424, 279, 306, 438, 271, 298, 325, 359, 9, 69, 129, 181, 326, 
    360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::BC1F:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1FL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1FL FCC0, brtarget:$offset)
      AsmString = "bc1fl $\x02";
      break;
    }
    return false;
  case Mips::BC1T:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BC1TL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1TL FCC0, brtarget:$offset)
      AsmString = "bc1tl $\x02";
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK uimm10:$imm, 0)
      AsmString = "break $\x01";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DSUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DSUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MM ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MMR6 ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR ZERO, GPR32Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 ZERO_64, GPR64Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB RA, GPR32Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::MOVE16_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO) {
      // (MOVE16_MM ZERO, ZERO)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SDBBP:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_R6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_R6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MM ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MMR6 ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::WAIT_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT_MM 0)
      AsmString = "wait";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void MipsInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  llvm_unreachable("Unknown PrintMethod kind");
}

#endif // PRINT_ALIAS_INSTR
