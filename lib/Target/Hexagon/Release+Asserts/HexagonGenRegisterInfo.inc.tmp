/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register Enum Values                                                *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass HexagonMCRegisterClasses[];

namespace Hexagon {
enum {
  NoRegister,
  CS = 1,
  GP = 2,
  PC = 3,
  UGP = 4,
  UPC = 5,
  UPCH = 6,
  UPCL = 7,
  USR = 8,
  USR_OVF = 9,
  C6 = 10,
  C7 = 11,
  CS0 = 12,
  CS1 = 13,
  D0 = 14,
  D1 = 15,
  D2 = 16,
  D3 = 17,
  D4 = 18,
  D5 = 19,
  D6 = 20,
  D7 = 21,
  D8 = 22,
  D9 = 23,
  D10 = 24,
  D11 = 25,
  D12 = 26,
  D13 = 27,
  D14 = 28,
  D15 = 29,
  LC0 = 30,
  LC1 = 31,
  M0 = 32,
  M1 = 33,
  P0 = 34,
  P1 = 35,
  P2 = 36,
  P3 = 37,
  R0 = 38,
  R1 = 39,
  R2 = 40,
  R3 = 41,
  R4 = 42,
  R5 = 43,
  R6 = 44,
  R7 = 45,
  R8 = 46,
  R9 = 47,
  R10 = 48,
  R11 = 49,
  R12 = 50,
  R13 = 51,
  R14 = 52,
  R15 = 53,
  R16 = 54,
  R17 = 55,
  R18 = 56,
  R19 = 57,
  R20 = 58,
  R21 = 59,
  R22 = 60,
  R23 = 61,
  R24 = 62,
  R25 = 63,
  R26 = 64,
  R27 = 65,
  R28 = 66,
  R29 = 67,
  R30 = 68,
  R31 = 69,
  SA0 = 70,
  SA1 = 71,
  C1_0 = 72,
  C3_2 = 73,
  C7_6 = 74,
  C9_8 = 75,
  C11_10 = 76,
  P3_0 = 77,
  NUM_TARGET_REGS 	// 78
};
}

// Register classes
namespace Hexagon {
enum {
  IntRegsRegClassID = 0,
  CtrRegsRegClassID = 1,
  PredRegsRegClassID = 2,
  ModRegsRegClassID = 3,
  CtrRegs_with_subreg_overflowRegClassID = 4,
  DoubleRegsRegClassID = 5,
  CtrRegs64RegClassID = 6,
  CtrRegs64_with_subreg_overflowRegClassID = 7,

  };
}

// Subregister indices
namespace Hexagon {
enum {
  NoSubRegister,
  subreg_hireg,	// 1
  subreg_loreg,	// 2
  subreg_overflow,	// 3
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* MC Register Information                                                    *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg HexagonRegDiffLists[] = {
  /* 0 */ 0, 0,
  /* 2 */ 0, 1, 0,
  /* 5 */ 44, 1, 1, 1, 0,
  /* 10 */ 5, 1, 0,
  /* 13 */ 8, 1, 0,
  /* 16 */ 11, 1, 0,
  /* 19 */ 24, 1, 0,
  /* 22 */ 25, 1, 0,
  /* 25 */ 26, 1, 0,
  /* 28 */ 27, 1, 0,
  /* 31 */ 28, 1, 0,
  /* 34 */ 29, 1, 0,
  /* 37 */ 30, 1, 0,
  /* 40 */ 31, 1, 0,
  /* 43 */ 32, 1, 0,
  /* 46 */ 33, 1, 0,
  /* 49 */ 34, 1, 0,
  /* 52 */ 35, 1, 0,
  /* 55 */ 36, 1, 0,
  /* 58 */ 37, 1, 0,
  /* 61 */ 38, 1, 0,
  /* 64 */ 39, 1, 0,
  /* 67 */ 65472, 1, 0,
  /* 70 */ 65518, 1, 0,
  /* 73 */ 2, 2, 0,
  /* 76 */ 3, 4, 0,
  /* 79 */ 65506, 6, 0,
  /* 82 */ 7, 0,
  /* 84 */ 10, 0,
  /* 86 */ 12, 0,
  /* 88 */ 42, 0,
  /* 90 */ 63, 0,
  /* 92 */ 64, 0,
  /* 94 */ 65535, 67, 0,
  /* 97 */ 72, 0,
  /* 99 */ 74, 0,
  /* 101 */ 65534, 65496, 0,
  /* 104 */ 65497, 0,
  /* 106 */ 65498, 0,
  /* 108 */ 65499, 0,
  /* 110 */ 65500, 0,
  /* 112 */ 65501, 0,
  /* 114 */ 65502, 0,
  /* 116 */ 65503, 0,
  /* 118 */ 65504, 0,
  /* 120 */ 65505, 0,
  /* 122 */ 65506, 0,
  /* 124 */ 65507, 0,
  /* 126 */ 65508, 0,
  /* 128 */ 65509, 0,
  /* 130 */ 65510, 0,
  /* 132 */ 65511, 0,
  /* 134 */ 65512, 0,
  /* 136 */ 65514, 0,
  /* 138 */ 65524, 0,
  /* 140 */ 65525, 0,
  /* 142 */ 65527, 0,
  /* 144 */ 65469, 1, 65530, 0,
  /* 148 */ 65464, 65534, 0,
  /* 151 */ 2, 65535, 0,
};

extern const unsigned HexagonLaneMaskLists[] = {
  /* 0 */ 0x00000000, 0x00000000, 0x00000000, 0x00000000, ~0u,
  /* 5 */ 0x00000002, 0x00000001, ~0u,
  /* 8 */ 0x00000001, 0x00000002, ~0u,
};

extern const uint16_t HexagonSubRegIdxLists[] = {
  /* 0 */ 2, 1, 0,
  /* 3 */ 2, 3, 1, 0,
  /* 7 */ 3, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits HexagonSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 32, 32 },	// subreg_hireg
  { 0, 32 },	// subreg_loreg
  { 0, 1 },	// subreg_overflow
};

extern const char HexagonRegStrings[] = {
  /* 0 */ 'D', '1', '0', 0,
  /* 4 */ 'R', '1', '0', 0,
  /* 8 */ 'C', '1', '1', '_', '1', '0', 0,
  /* 15 */ 'R', '2', '0', 0,
  /* 19 */ 'R', '3', '0', 0,
  /* 23 */ 'S', 'A', '0', 0,
  /* 27 */ 'L', 'C', '0', 0,
  /* 31 */ 'D', '0', 0,
  /* 34 */ 'M', '0', 0,
  /* 37 */ 'P', '0', 0,
  /* 40 */ 'R', '0', 0,
  /* 43 */ 'C', 'S', '0', 0,
  /* 47 */ 'C', '1', '_', '0', 0,
  /* 52 */ 'P', '3', '_', '0', 0,
  /* 57 */ 'D', '1', '1', 0,
  /* 61 */ 'R', '1', '1', 0,
  /* 65 */ 'R', '2', '1', 0,
  /* 69 */ 'R', '3', '1', 0,
  /* 73 */ 'S', 'A', '1', 0,
  /* 77 */ 'L', 'C', '1', 0,
  /* 81 */ 'D', '1', 0,
  /* 84 */ 'M', '1', 0,
  /* 87 */ 'P', '1', 0,
  /* 90 */ 'R', '1', 0,
  /* 93 */ 'C', 'S', '1', 0,
  /* 97 */ 'D', '1', '2', 0,
  /* 101 */ 'R', '1', '2', 0,
  /* 105 */ 'R', '2', '2', 0,
  /* 109 */ 'D', '2', 0,
  /* 112 */ 'P', '2', 0,
  /* 115 */ 'R', '2', 0,
  /* 118 */ 'C', '3', '_', '2', 0,
  /* 123 */ 'D', '1', '3', 0,
  /* 127 */ 'R', '1', '3', 0,
  /* 131 */ 'R', '2', '3', 0,
  /* 135 */ 'D', '3', 0,
  /* 138 */ 'P', '3', 0,
  /* 141 */ 'R', '3', 0,
  /* 144 */ 'D', '1', '4', 0,
  /* 148 */ 'R', '1', '4', 0,
  /* 152 */ 'R', '2', '4', 0,
  /* 156 */ 'D', '4', 0,
  /* 159 */ 'R', '4', 0,
  /* 162 */ 'D', '1', '5', 0,
  /* 166 */ 'R', '1', '5', 0,
  /* 170 */ 'R', '2', '5', 0,
  /* 174 */ 'D', '5', 0,
  /* 177 */ 'R', '5', 0,
  /* 180 */ 'R', '1', '6', 0,
  /* 184 */ 'R', '2', '6', 0,
  /* 188 */ 'C', '6', 0,
  /* 191 */ 'D', '6', 0,
  /* 194 */ 'R', '6', 0,
  /* 197 */ 'C', '7', '_', '6', 0,
  /* 202 */ 'R', '1', '7', 0,
  /* 206 */ 'R', '2', '7', 0,
  /* 210 */ 'C', '7', 0,
  /* 213 */ 'D', '7', 0,
  /* 216 */ 'R', '7', 0,
  /* 219 */ 'R', '1', '8', 0,
  /* 223 */ 'R', '2', '8', 0,
  /* 227 */ 'D', '8', 0,
  /* 230 */ 'R', '8', 0,
  /* 233 */ 'C', '9', '_', '8', 0,
  /* 238 */ 'R', '1', '9', 0,
  /* 242 */ 'R', '2', '9', 0,
  /* 246 */ 'D', '9', 0,
  /* 249 */ 'R', '9', 0,
  /* 252 */ 'U', 'P', 'C', 0,
  /* 256 */ 'U', 'S', 'R', '_', 'O', 'V', 'F', 0,
  /* 264 */ 'U', 'P', 'C', 'H', 0,
  /* 269 */ 'U', 'P', 'C', 'L', 0,
  /* 274 */ 'U', 'G', 'P', 0,
  /* 278 */ 'U', 'S', 'R', 0,
  /* 282 */ 'C', 'S', 0,
};

extern const MCRegisterDesc HexagonRegDesc[] = { // Descriptors
  { 3, 0, 0, 0, 0, 0 },
  { 282, 16, 1, 0, 32, 5 },
  { 275, 1, 99, 2, 1, 3 },
  { 253, 1, 97, 2, 1, 3 },
  { 274, 1, 97, 2, 1, 3 },
  { 252, 151, 1, 0, 160, 5 },
  { 264, 1, 152, 2, 1280, 3 },
  { 269, 1, 149, 2, 2274, 3 },
  { 278, 3, 95, 7, 1312, 9 },
  { 256, 1, 94, 2, 1312, 3 },
  { 188, 1, 92, 2, 2385, 3 },
  { 210, 1, 90, 2, 2385, 3 },
  { 43, 1, 140, 2, 2209, 3 },
  { 93, 1, 138, 2, 2209, 3 },
  { 31, 19, 1, 0, 1122, 5 },
  { 81, 22, 1, 0, 1122, 5 },
  { 109, 25, 1, 0, 1122, 5 },
  { 135, 28, 1, 0, 1122, 5 },
  { 156, 31, 1, 0, 1122, 5 },
  { 174, 34, 1, 0, 1122, 5 },
  { 191, 37, 1, 0, 1122, 5 },
  { 213, 40, 1, 0, 1122, 5 },
  { 227, 43, 1, 0, 1122, 5 },
  { 246, 46, 1, 0, 1122, 5 },
  { 0, 49, 1, 0, 1122, 5 },
  { 57, 52, 1, 0, 1122, 5 },
  { 97, 55, 1, 0, 1122, 5 },
  { 123, 58, 1, 0, 1122, 5 },
  { 144, 61, 1, 0, 1122, 5 },
  { 162, 64, 1, 0, 1122, 5 },
  { 27, 1, 88, 2, 1377, 3 },
  { 77, 1, 88, 2, 1377, 3 },
  { 34, 1, 1, 2, 2145, 3 },
  { 84, 1, 1, 2, 2145, 3 },
  { 37, 1, 1, 2, 1345, 3 },
  { 87, 1, 1, 2, 1345, 3 },
  { 112, 1, 1, 2, 1345, 3 },
  { 138, 1, 1, 2, 1345, 3 },
  { 40, 1, 134, 2, 2017, 3 },
  { 90, 1, 132, 2, 2017, 3 },
  { 115, 1, 132, 2, 2017, 3 },
  { 141, 1, 130, 2, 2017, 3 },
  { 159, 1, 130, 2, 2017, 3 },
  { 177, 1, 128, 2, 2017, 3 },
  { 194, 1, 128, 2, 2017, 3 },
  { 216, 1, 126, 2, 2017, 3 },
  { 230, 1, 126, 2, 2017, 3 },
  { 249, 1, 124, 2, 2017, 3 },
  { 4, 1, 124, 2, 2017, 3 },
  { 61, 1, 122, 2, 2017, 3 },
  { 101, 1, 122, 2, 2017, 3 },
  { 127, 1, 120, 2, 2017, 3 },
  { 148, 1, 120, 2, 2017, 3 },
  { 166, 1, 118, 2, 2017, 3 },
  { 180, 1, 118, 2, 2017, 3 },
  { 202, 1, 116, 2, 2017, 3 },
  { 219, 1, 116, 2, 2017, 3 },
  { 238, 1, 114, 2, 2017, 3 },
  { 15, 1, 114, 2, 2017, 3 },
  { 65, 1, 112, 2, 2017, 3 },
  { 105, 1, 112, 2, 2017, 3 },
  { 131, 1, 110, 2, 2017, 3 },
  { 152, 1, 110, 2, 2017, 3 },
  { 170, 1, 108, 2, 2017, 3 },
  { 184, 1, 108, 2, 2017, 3 },
  { 206, 1, 106, 2, 2017, 3 },
  { 223, 1, 106, 2, 2017, 3 },
  { 242, 1, 104, 2, 2017, 3 },
  { 19, 1, 104, 2, 2017, 3 },
  { 69, 1, 102, 2, 2017, 3 },
  { 23, 1, 74, 2, 2177, 3 },
  { 73, 1, 74, 2, 2177, 3 },
  { 47, 101, 1, 0, 1265, 8 },
  { 118, 101, 1, 0, 1265, 8 },
  { 197, 67, 1, 0, 208, 5 },
  { 233, 144, 1, 3, 1216, 8 },
  { 8, 148, 1, 0, 1168, 8 },
  { 52, 1, 1, 2, 80, 0 },
};

extern const MCPhysReg HexagonRegUnitRoots[][2] = {
  { Hexagon::CS0 },
  { Hexagon::CS1 },
  { Hexagon::GP },
  { Hexagon::PC },
  { Hexagon::UGP },
  { Hexagon::UPCL },
  { Hexagon::UPCH },
  { Hexagon::USR_OVF },
  { Hexagon::C6, Hexagon::M0 },
  { Hexagon::C7, Hexagon::M1 },
  { Hexagon::R0 },
  { Hexagon::R1 },
  { Hexagon::R2 },
  { Hexagon::R3 },
  { Hexagon::R4 },
  { Hexagon::R5 },
  { Hexagon::R6 },
  { Hexagon::R7 },
  { Hexagon::R8 },
  { Hexagon::R9 },
  { Hexagon::R10 },
  { Hexagon::R11 },
  { Hexagon::R12 },
  { Hexagon::R13 },
  { Hexagon::R14 },
  { Hexagon::R15 },
  { Hexagon::R16 },
  { Hexagon::R17 },
  { Hexagon::R18 },
  { Hexagon::R19 },
  { Hexagon::R20 },
  { Hexagon::R21 },
  { Hexagon::R22 },
  { Hexagon::R23 },
  { Hexagon::R24 },
  { Hexagon::R25 },
  { Hexagon::R26 },
  { Hexagon::R27 },
  { Hexagon::R28 },
  { Hexagon::R29 },
  { Hexagon::R30 },
  { Hexagon::R31 },
  { Hexagon::LC0 },
  { Hexagon::LC1 },
  { Hexagon::P0, Hexagon::P3_0 },
  { Hexagon::P1, Hexagon::P3_0 },
  { Hexagon::P2, Hexagon::P3_0 },
  { Hexagon::P3, Hexagon::P3_0 },
  { Hexagon::SA0 },
  { Hexagon::SA1 },
};

namespace {     // Register classes...
  // IntRegs Register Class...
  const MCPhysReg IntRegs[] = {
    Hexagon::R0, Hexagon::R1, Hexagon::R2, Hexagon::R3, Hexagon::R4, Hexagon::R5, Hexagon::R6, Hexagon::R7, Hexagon::R8, Hexagon::R9, Hexagon::R12, Hexagon::R13, Hexagon::R14, Hexagon::R15, Hexagon::R16, Hexagon::R17, Hexagon::R18, Hexagon::R19, Hexagon::R20, Hexagon::R21, Hexagon::R22, Hexagon::R23, Hexagon::R24, Hexagon::R25, Hexagon::R26, Hexagon::R27, Hexagon::R28, Hexagon::R10, Hexagon::R11, Hexagon::R29, Hexagon::R30, Hexagon::R31, 
  };

  // IntRegs Bit set.
  const uint8_t IntRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // CtrRegs Register Class...
  const MCPhysReg CtrRegs[] = {
    Hexagon::LC0, Hexagon::SA0, Hexagon::LC1, Hexagon::SA1, Hexagon::P3_0, Hexagon::M0, Hexagon::M1, Hexagon::C6, Hexagon::C7, Hexagon::CS0, Hexagon::CS1, Hexagon::UPCL, Hexagon::UPCH, Hexagon::USR, Hexagon::USR_OVF, Hexagon::UGP, Hexagon::GP, Hexagon::PC, 
  };

  // CtrRegs Bit set.
  const uint8_t CtrRegsBits[] = {
    0xdc, 0x3f, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0xc0, 0x20, 
  };

  // PredRegs Register Class...
  const MCPhysReg PredRegs[] = {
    Hexagon::P0, Hexagon::P1, Hexagon::P2, Hexagon::P3, 
  };

  // PredRegs Bit set.
  const uint8_t PredRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x3c, 
  };

  // ModRegs Register Class...
  const MCPhysReg ModRegs[] = {
    Hexagon::M0, Hexagon::M1, 
  };

  // ModRegs Bit set.
  const uint8_t ModRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x03, 
  };

  // CtrRegs_with_subreg_overflow Register Class...
  const MCPhysReg CtrRegs_with_subreg_overflow[] = {
    Hexagon::USR, 
  };

  // CtrRegs_with_subreg_overflow Bit set.
  const uint8_t CtrRegs_with_subreg_overflowBits[] = {
    0x00, 0x01, 
  };

  // DoubleRegs Register Class...
  const MCPhysReg DoubleRegs[] = {
    Hexagon::D0, Hexagon::D1, Hexagon::D2, Hexagon::D3, Hexagon::D4, Hexagon::D6, Hexagon::D7, Hexagon::D8, Hexagon::D9, Hexagon::D10, Hexagon::D11, Hexagon::D12, Hexagon::D13, Hexagon::D5, Hexagon::D14, Hexagon::D15, 
  };

  // DoubleRegs Bit set.
  const uint8_t DoubleRegsBits[] = {
    0x00, 0xc0, 0xff, 0x3f, 
  };

  // CtrRegs64 Register Class...
  const MCPhysReg CtrRegs64[] = {
    Hexagon::C1_0, Hexagon::C3_2, Hexagon::C7_6, Hexagon::C9_8, Hexagon::C11_10, Hexagon::CS, Hexagon::UPC, 
  };

  // CtrRegs64 Bit set.
  const uint8_t CtrRegs64Bits[] = {
    0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  };

  // CtrRegs64_with_subreg_overflow Register Class...
  const MCPhysReg CtrRegs64_with_subreg_overflow[] = {
    Hexagon::C9_8, 
  };

  // CtrRegs64_with_subreg_overflow Bit set.
  const uint8_t CtrRegs64_with_subreg_overflowBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  };

}

extern const char HexagonRegClassStrings[] = {
  /* 0 */ 'C', 't', 'r', 'R', 'e', 'g', 's', '6', '4', 0,
  /* 10 */ 'P', 'r', 'e', 'd', 'R', 'e', 'g', 's', 0,
  /* 19 */ 'M', 'o', 'd', 'R', 'e', 'g', 's', 0,
  /* 27 */ 'D', 'o', 'u', 'b', 'l', 'e', 'R', 'e', 'g', 's', 0,
  /* 38 */ 'C', 't', 'r', 'R', 'e', 'g', 's', 0,
  /* 46 */ 'I', 'n', 't', 'R', 'e', 'g', 's', 0,
  /* 54 */ 'C', 't', 'r', 'R', 'e', 'g', 's', '6', '4', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', 'r', 'e', 'g', '_', 'o', 'v', 'e', 'r', 'f', 'l', 'o', 'w', 0,
  /* 85 */ 'C', 't', 'r', 'R', 'e', 'g', 's', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', 'r', 'e', 'g', '_', 'o', 'v', 'e', 'r', 'f', 'l', 'o', 'w', 0,
};

extern const MCRegisterClass HexagonMCRegisterClasses[] = {
  { IntRegs, IntRegsBits, 46, 32, sizeof(IntRegsBits), Hexagon::IntRegsRegClassID, 4, 4, 1, 1 },
  { CtrRegs, CtrRegsBits, 38, 18, sizeof(CtrRegsBits), Hexagon::CtrRegsRegClassID, 4, 4, 1, 0 },
  { PredRegs, PredRegsBits, 10, 4, sizeof(PredRegsBits), Hexagon::PredRegsRegClassID, 4, 4, 1, 1 },
  { ModRegs, ModRegsBits, 19, 2, sizeof(ModRegsBits), Hexagon::ModRegsRegClassID, 4, 4, 1, 1 },
  { CtrRegs_with_subreg_overflow, CtrRegs_with_subreg_overflowBits, 85, 1, sizeof(CtrRegs_with_subreg_overflowBits), Hexagon::CtrRegs_with_subreg_overflowRegClassID, 4, 4, 1, 0 },
  { DoubleRegs, DoubleRegsBits, 27, 16, sizeof(DoubleRegsBits), Hexagon::DoubleRegsRegClassID, 8, 8, 1, 1 },
  { CtrRegs64, CtrRegs64Bits, 0, 7, sizeof(CtrRegs64Bits), Hexagon::CtrRegs64RegClassID, 8, 8, 1, 0 },
  { CtrRegs64_with_subreg_overflow, CtrRegs64_with_subreg_overflowBits, 54, 1, sizeof(CtrRegs64_with_subreg_overflowBits), Hexagon::CtrRegs64_with_subreg_overflowRegClassID, 8, 8, 1, 0 },
};

// Hexagon Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0Dwarf2L[] = {
  { 0U, Hexagon::R0 },
  { 1U, Hexagon::R1 },
  { 2U, Hexagon::R2 },
  { 3U, Hexagon::R3 },
  { 4U, Hexagon::R4 },
  { 5U, Hexagon::R5 },
  { 6U, Hexagon::R6 },
  { 7U, Hexagon::R7 },
  { 8U, Hexagon::R8 },
  { 9U, Hexagon::R9 },
  { 10U, Hexagon::R10 },
  { 11U, Hexagon::R11 },
  { 12U, Hexagon::R12 },
  { 13U, Hexagon::R13 },
  { 14U, Hexagon::R14 },
  { 15U, Hexagon::R15 },
  { 16U, Hexagon::R16 },
  { 17U, Hexagon::R17 },
  { 18U, Hexagon::R18 },
  { 19U, Hexagon::R19 },
  { 20U, Hexagon::R20 },
  { 21U, Hexagon::R21 },
  { 22U, Hexagon::R22 },
  { 23U, Hexagon::R23 },
  { 24U, Hexagon::R24 },
  { 25U, Hexagon::R25 },
  { 26U, Hexagon::R26 },
  { 27U, Hexagon::R27 },
  { 28U, Hexagon::R28 },
  { 29U, Hexagon::R29 },
  { 30U, Hexagon::R30 },
  { 31U, Hexagon::R31 },
  { 32U, Hexagon::D0 },
  { 34U, Hexagon::D1 },
  { 36U, Hexagon::D2 },
  { 38U, Hexagon::D3 },
  { 40U, Hexagon::D4 },
  { 42U, Hexagon::D5 },
  { 44U, Hexagon::D6 },
  { 46U, Hexagon::D7 },
  { 48U, Hexagon::D8 },
  { 50U, Hexagon::D9 },
  { 52U, Hexagon::D10 },
  { 54U, Hexagon::D11 },
  { 56U, Hexagon::D12 },
  { 58U, Hexagon::D13 },
  { 60U, Hexagon::D14 },
  { 62U, Hexagon::D15 },
  { 63U, Hexagon::P0 },
  { 64U, Hexagon::P1 },
  { 65U, Hexagon::P2 },
  { 66U, Hexagon::P3 },
  { 67U, Hexagon::C1_0 },
  { 68U, Hexagon::LC0 },
  { 69U, Hexagon::C3_2 },
  { 70U, Hexagon::LC1 },
  { 71U, Hexagon::P3_0 },
  { 72U, Hexagon::C7_6 },
  { 73U, Hexagon::M1 },
  { 74U, Hexagon::C9_8 },
  { 75U, Hexagon::PC },
  { 76U, Hexagon::C11_10 },
  { 77U, Hexagon::GP },
  { 78U, Hexagon::CS0 },
  { 79U, Hexagon::CS1 },
  { 80U, Hexagon::UPCL },
  { 81U, Hexagon::UPCH },
};
extern const unsigned HexagonDwarfFlavour0Dwarf2LSize = array_lengthof(HexagonDwarfFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0Dwarf2L[] = {
  { 0U, Hexagon::R0 },
  { 1U, Hexagon::R1 },
  { 2U, Hexagon::R2 },
  { 3U, Hexagon::R3 },
  { 4U, Hexagon::R4 },
  { 5U, Hexagon::R5 },
  { 6U, Hexagon::R6 },
  { 7U, Hexagon::R7 },
  { 8U, Hexagon::R8 },
  { 9U, Hexagon::R9 },
  { 10U, Hexagon::R10 },
  { 11U, Hexagon::R11 },
  { 12U, Hexagon::R12 },
  { 13U, Hexagon::R13 },
  { 14U, Hexagon::R14 },
  { 15U, Hexagon::R15 },
  { 16U, Hexagon::R16 },
  { 17U, Hexagon::R17 },
  { 18U, Hexagon::R18 },
  { 19U, Hexagon::R19 },
  { 20U, Hexagon::R20 },
  { 21U, Hexagon::R21 },
  { 22U, Hexagon::R22 },
  { 23U, Hexagon::R23 },
  { 24U, Hexagon::R24 },
  { 25U, Hexagon::R25 },
  { 26U, Hexagon::R26 },
  { 27U, Hexagon::R27 },
  { 28U, Hexagon::R28 },
  { 29U, Hexagon::R29 },
  { 30U, Hexagon::R30 },
  { 31U, Hexagon::R31 },
  { 32U, Hexagon::D0 },
  { 34U, Hexagon::D1 },
  { 36U, Hexagon::D2 },
  { 38U, Hexagon::D3 },
  { 40U, Hexagon::D4 },
  { 42U, Hexagon::D5 },
  { 44U, Hexagon::D6 },
  { 46U, Hexagon::D7 },
  { 48U, Hexagon::D8 },
  { 50U, Hexagon::D9 },
  { 52U, Hexagon::D10 },
  { 54U, Hexagon::D11 },
  { 56U, Hexagon::D12 },
  { 58U, Hexagon::D13 },
  { 60U, Hexagon::D14 },
  { 62U, Hexagon::D15 },
  { 63U, Hexagon::P0 },
  { 64U, Hexagon::P1 },
  { 65U, Hexagon::P2 },
  { 66U, Hexagon::P3 },
  { 67U, Hexagon::C1_0 },
  { 68U, Hexagon::LC0 },
  { 69U, Hexagon::C3_2 },
  { 70U, Hexagon::LC1 },
  { 71U, Hexagon::P3_0 },
  { 72U, Hexagon::C7_6 },
  { 73U, Hexagon::M1 },
  { 74U, Hexagon::C9_8 },
  { 75U, Hexagon::PC },
  { 76U, Hexagon::C11_10 },
  { 77U, Hexagon::GP },
  { 78U, Hexagon::CS0 },
  { 79U, Hexagon::CS1 },
  { 80U, Hexagon::UPCL },
  { 81U, Hexagon::UPCH },
};
extern const unsigned HexagonEHFlavour0Dwarf2LSize = array_lengthof(HexagonEHFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0L2Dwarf[] = {
  { Hexagon::CS, 78U },
  { Hexagon::GP, 77U },
  { Hexagon::PC, 75U },
  { Hexagon::UGP, 76U },
  { Hexagon::UPC, 80U },
  { Hexagon::UPCH, 81U },
  { Hexagon::UPCL, 80U },
  { Hexagon::USR, 74U },
  { Hexagon::C6, 72U },
  { Hexagon::C7, 73U },
  { Hexagon::CS0, 78U },
  { Hexagon::CS1, 79U },
  { Hexagon::D0, 32U },
  { Hexagon::D1, 34U },
  { Hexagon::D2, 36U },
  { Hexagon::D3, 38U },
  { Hexagon::D4, 40U },
  { Hexagon::D5, 42U },
  { Hexagon::D6, 44U },
  { Hexagon::D7, 46U },
  { Hexagon::D8, 48U },
  { Hexagon::D9, 50U },
  { Hexagon::D10, 52U },
  { Hexagon::D11, 54U },
  { Hexagon::D12, 56U },
  { Hexagon::D13, 58U },
  { Hexagon::D14, 60U },
  { Hexagon::D15, 62U },
  { Hexagon::LC0, 68U },
  { Hexagon::LC1, 70U },
  { Hexagon::M0, 72U },
  { Hexagon::M1, 73U },
  { Hexagon::P0, 63U },
  { Hexagon::P1, 64U },
  { Hexagon::P2, 65U },
  { Hexagon::P3, 66U },
  { Hexagon::R0, 0U },
  { Hexagon::R1, 1U },
  { Hexagon::R2, 2U },
  { Hexagon::R3, 3U },
  { Hexagon::R4, 4U },
  { Hexagon::R5, 5U },
  { Hexagon::R6, 6U },
  { Hexagon::R7, 7U },
  { Hexagon::R8, 8U },
  { Hexagon::R9, 9U },
  { Hexagon::R10, 10U },
  { Hexagon::R11, 11U },
  { Hexagon::R12, 12U },
  { Hexagon::R13, 13U },
  { Hexagon::R14, 14U },
  { Hexagon::R15, 15U },
  { Hexagon::R16, 16U },
  { Hexagon::R17, 17U },
  { Hexagon::R18, 18U },
  { Hexagon::R19, 19U },
  { Hexagon::R20, 20U },
  { Hexagon::R21, 21U },
  { Hexagon::R22, 22U },
  { Hexagon::R23, 23U },
  { Hexagon::R24, 24U },
  { Hexagon::R25, 25U },
  { Hexagon::R26, 26U },
  { Hexagon::R27, 27U },
  { Hexagon::R28, 28U },
  { Hexagon::R29, 29U },
  { Hexagon::R30, 30U },
  { Hexagon::R31, 31U },
  { Hexagon::SA0, 67U },
  { Hexagon::SA1, 69U },
  { Hexagon::C1_0, 67U },
  { Hexagon::C3_2, 69U },
  { Hexagon::C7_6, 72U },
  { Hexagon::C9_8, 74U },
  { Hexagon::C11_10, 76U },
  { Hexagon::P3_0, 71U },
};
extern const unsigned HexagonDwarfFlavour0L2DwarfSize = array_lengthof(HexagonDwarfFlavour0L2Dwarf);

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0L2Dwarf[] = {
  { Hexagon::CS, 78U },
  { Hexagon::GP, 77U },
  { Hexagon::PC, 75U },
  { Hexagon::UGP, 76U },
  { Hexagon::UPC, 80U },
  { Hexagon::UPCH, 81U },
  { Hexagon::UPCL, 80U },
  { Hexagon::USR, 74U },
  { Hexagon::C6, 72U },
  { Hexagon::C7, 73U },
  { Hexagon::CS0, 78U },
  { Hexagon::CS1, 79U },
  { Hexagon::D0, 32U },
  { Hexagon::D1, 34U },
  { Hexagon::D2, 36U },
  { Hexagon::D3, 38U },
  { Hexagon::D4, 40U },
  { Hexagon::D5, 42U },
  { Hexagon::D6, 44U },
  { Hexagon::D7, 46U },
  { Hexagon::D8, 48U },
  { Hexagon::D9, 50U },
  { Hexagon::D10, 52U },
  { Hexagon::D11, 54U },
  { Hexagon::D12, 56U },
  { Hexagon::D13, 58U },
  { Hexagon::D14, 60U },
  { Hexagon::D15, 62U },
  { Hexagon::LC0, 68U },
  { Hexagon::LC1, 70U },
  { Hexagon::M0, 72U },
  { Hexagon::M1, 73U },
  { Hexagon::P0, 63U },
  { Hexagon::P1, 64U },
  { Hexagon::P2, 65U },
  { Hexagon::P3, 66U },
  { Hexagon::R0, 0U },
  { Hexagon::R1, 1U },
  { Hexagon::R2, 2U },
  { Hexagon::R3, 3U },
  { Hexagon::R4, 4U },
  { Hexagon::R5, 5U },
  { Hexagon::R6, 6U },
  { Hexagon::R7, 7U },
  { Hexagon::R8, 8U },
  { Hexagon::R9, 9U },
  { Hexagon::R10, 10U },
  { Hexagon::R11, 11U },
  { Hexagon::R12, 12U },
  { Hexagon::R13, 13U },
  { Hexagon::R14, 14U },
  { Hexagon::R15, 15U },
  { Hexagon::R16, 16U },
  { Hexagon::R17, 17U },
  { Hexagon::R18, 18U },
  { Hexagon::R19, 19U },
  { Hexagon::R20, 20U },
  { Hexagon::R21, 21U },
  { Hexagon::R22, 22U },
  { Hexagon::R23, 23U },
  { Hexagon::R24, 24U },
  { Hexagon::R25, 25U },
  { Hexagon::R26, 26U },
  { Hexagon::R27, 27U },
  { Hexagon::R28, 28U },
  { Hexagon::R29, 29U },
  { Hexagon::R30, 30U },
  { Hexagon::R31, 31U },
  { Hexagon::SA0, 67U },
  { Hexagon::SA1, 69U },
  { Hexagon::C1_0, 67U },
  { Hexagon::C3_2, 69U },
  { Hexagon::C7_6, 72U },
  { Hexagon::C9_8, 74U },
  { Hexagon::C11_10, 76U },
  { Hexagon::P3_0, 71U },
};
extern const unsigned HexagonEHFlavour0L2DwarfSize = array_lengthof(HexagonEHFlavour0L2Dwarf);

extern const uint16_t HexagonRegEncodingTable[] = {
  0,
  12,
  11,
  9,
  10,
  14,
  15,
  14,
  8,
  0,
  6,
  7,
  12,
  13,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  1,
  3,
  0,
  1,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  2,
  0,
  2,
  6,
  8,
  10,
  4,
};
static inline void InitHexagonMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(HexagonRegDesc, 78, RA, PC, HexagonMCRegisterClasses, 8, HexagonRegUnitRoots, 50, HexagonRegDiffLists, HexagonLaneMaskLists, HexagonRegStrings, HexagonRegClassStrings, HexagonSubRegIdxLists, 4,
HexagonSubRegIdxRanges, HexagonRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(HexagonDwarfFlavour0Dwarf2L, HexagonDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(HexagonEHFlavour0Dwarf2L, HexagonEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(HexagonDwarfFlavour0L2Dwarf, HexagonDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(HexagonEHFlavour0L2Dwarf, HexagonEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Register Information Header Fragment                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

class HexagonFrameLowering;

struct HexagonGenRegisterInfo : public TargetRegisterInfo {
  explicit HexagonGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  bool needsStackRealignment(const MachineFunction &) const override
     { return false; }
  unsigned composeSubRegIndicesImpl(unsigned, unsigned) const override;
  unsigned composeSubRegIndexLaneMaskImpl(unsigned, unsigned) const override;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const override;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const override;
  unsigned getRegUnitWeight(unsigned RegUnit) const override;
  unsigned getNumRegPressureSets() const override;
  const char *getRegPressureSetName(unsigned Idx) const override;
  unsigned getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const override;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const override;
  const int *getRegUnitPressureSets(unsigned RegUnit) const override;
  ArrayRef<const char *> getRegMaskNames() const override;
  ArrayRef<const uint32_t *> getRegMasks() const override;
  /// Devirtualized TargetFrameLowering.
  static const HexagonFrameLowering *getFrameLowering(
      const MachineFunction &MF);
};

namespace Hexagon { // Register classes
  extern const TargetRegisterClass IntRegsRegClass;
  extern const TargetRegisterClass CtrRegsRegClass;
  extern const TargetRegisterClass PredRegsRegClass;
  extern const TargetRegisterClass ModRegsRegClass;
  extern const TargetRegisterClass CtrRegs_with_subreg_overflowRegClass;
  extern const TargetRegisterClass DoubleRegsRegClass;
  extern const TargetRegisterClass CtrRegs64RegClass;
  extern const TargetRegisterClass CtrRegs64_with_subreg_overflowRegClass;
} // end of namespace Hexagon

} // End llvm namespace
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register and Register Classes Information                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass HexagonMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i1, MVT::v2i1, MVT::v4i1, MVT::v8i1, MVT::v4i8, MVT::v2i16, MVT::i32, MVT::Other,
  /* 8 */ MVT::i64, MVT::Other,
  /* 10 */ MVT::i32, MVT::f32, MVT::v4i8, MVT::v2i16, MVT::Other,
  /* 15 */ MVT::i64, MVT::f64, MVT::v8i8, MVT::v4i16, MVT::v2i32, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "subreg_hireg", "subreg_loreg", "subreg_overflow", "" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x00000001, // subreg_hireg
  0x00000002, // subreg_loreg
  0x00000002, // subreg_overflow
 };



static const TargetRegisterClass *const NullRegClasses[] = { nullptr };

static const uint32_t IntRegsSubClassMask[] = {
  0x00000001, 
  0x00000020, // subreg_hireg
  0x00000020, // subreg_loreg
};

static const uint32_t CtrRegsSubClassMask[] = {
  0x0000001a, 
  0x000000c0, // subreg_hireg
  0x000000c0, // subreg_loreg
  0x00000090, // subreg_overflow
};

static const uint32_t PredRegsSubClassMask[] = {
  0x00000004, 
};

static const uint32_t ModRegsSubClassMask[] = {
  0x00000008, 
};

static const uint32_t CtrRegs_with_subreg_overflowSubClassMask[] = {
  0x00000010, 
  0x00000080, // subreg_loreg
};

static const uint32_t DoubleRegsSubClassMask[] = {
  0x00000020, 
};

static const uint32_t CtrRegs64SubClassMask[] = {
  0x000000c0, 
};

static const uint32_t CtrRegs64_with_subreg_overflowSubClassMask[] = {
  0x00000080, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 2, 0,
  /* 3 */ 1, 2, 3, 0,
};

static const TargetRegisterClass *const ModRegsSuperclasses[] = {
  &Hexagon::CtrRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const CtrRegs_with_subreg_overflowSuperclasses[] = {
  &Hexagon::CtrRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const CtrRegs64_with_subreg_overflowSuperclasses[] = {
  &Hexagon::CtrRegs64RegClass,
  nullptr
};


namespace Hexagon {   // Register class instances
  extern const TargetRegisterClass IntRegsRegClass = {
    &HexagonMCRegisterClasses[IntRegsRegClassID],
    VTLists + 10,
    IntRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    0x00000000,
    0,
    false, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass CtrRegsRegClass = {
    &HexagonMCRegisterClasses[CtrRegsRegClassID],
    VTLists + 6,
    CtrRegsSubClassMask,
    SuperRegIdxSeqs + 3,
    0x00000002,
    0,
    false, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass PredRegsRegClass = {
    &HexagonMCRegisterClasses[PredRegsRegClassID],
    VTLists + 0,
    PredRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    0x00000000,
    0,
    false, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass ModRegsRegClass = {
    &HexagonMCRegisterClasses[ModRegsRegClassID],
    VTLists + 6,
    ModRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    0x00000000,
    0,
    false, /* HasDisjunctSubRegs */
    ModRegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass CtrRegs_with_subreg_overflowRegClass = {
    &HexagonMCRegisterClasses[CtrRegs_with_subreg_overflowRegClassID],
    VTLists + 6,
    CtrRegs_with_subreg_overflowSubClassMask,
    SuperRegIdxSeqs + 1,
    0x00000002,
    0,
    false, /* HasDisjunctSubRegs */
    CtrRegs_with_subreg_overflowSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass DoubleRegsRegClass = {
    &HexagonMCRegisterClasses[DoubleRegsRegClassID],
    VTLists + 15,
    DoubleRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    0x00000003,
    0,
    true, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass CtrRegs64RegClass = {
    &HexagonMCRegisterClasses[CtrRegs64RegClassID],
    VTLists + 8,
    CtrRegs64SubClassMask,
    SuperRegIdxSeqs + 2,
    0x00000003,
    0,
    true, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass CtrRegs64_with_subreg_overflowRegClass = {
    &HexagonMCRegisterClasses[CtrRegs64_with_subreg_overflowRegClassID],
    VTLists + 8,
    CtrRegs64_with_subreg_overflowSubClassMask,
    SuperRegIdxSeqs + 2,
    0x00000003,
    0,
    true, /* HasDisjunctSubRegs */
    CtrRegs64_with_subreg_overflowSuperclasses,
    nullptr
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &Hexagon::IntRegsRegClass,
    &Hexagon::CtrRegsRegClass,
    &Hexagon::PredRegsRegClass,
    &Hexagon::ModRegsRegClass,
    &Hexagon::CtrRegs_with_subreg_overflowRegClass,
    &Hexagon::DoubleRegsRegClass,
    &Hexagon::CtrRegs64RegClass,
    &Hexagon::CtrRegs64_with_subreg_overflowRegClass,
  };
}

static const TargetRegisterInfoDesc HexagonRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
};
unsigned HexagonGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t Rows[1][3] = {
    { 0, 0, 3, },
  };

  --IdxA; assert(IdxA < 3);
  --IdxB; assert(IdxB < 3);
  return Rows[0][IdxB];
}

unsigned HexagonGenRegisterInfo::composeSubRegIndexLaneMaskImpl(unsigned IdxA, unsigned LaneMask) const {
  struct MaskRolOp {
    unsigned Mask;
    uint8_t  RotateLeft;
  };
  static const MaskRolOp Seqs[] = {
    { 0xFFFFFFFF,  0 }, { 0, 0 }  // Sequence 0
  };
  static const MaskRolOp *const CompositeSequences[] = {
    &Seqs[0], // to subreg_hireg
    &Seqs[0], // to subreg_loreg
    &Seqs[0] // to subreg_overflow
  };

  --IdxA; assert(IdxA < 3 && "Subregister index out of bounds");
  unsigned Result = 0;
  for (const MaskRolOp *Ops = CompositeSequences[IdxA]; Ops->Mask != 0; ++Ops) {
    unsigned Masked = LaneMask & Ops->Mask;
    Result |= (Masked << Ops->RotateLeft) & 0xFFFFFFFF;
    Result |= (Masked >> ((32 - Ops->RotateLeft) & 0x1F));
  }
  return Result;
}
const TargetRegisterClass *HexagonGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[8][3] = {
    {	// IntRegs
      0,	// subreg_hireg
      0,	// subreg_loreg
      0,	// subreg_overflow
    },
    {	// CtrRegs
      0,	// subreg_hireg
      0,	// subreg_loreg
      5,	// subreg_overflow -> CtrRegs_with_subreg_overflow
    },
    {	// PredRegs
      0,	// subreg_hireg
      0,	// subreg_loreg
      0,	// subreg_overflow
    },
    {	// ModRegs
      0,	// subreg_hireg
      0,	// subreg_loreg
      0,	// subreg_overflow
    },
    {	// CtrRegs_with_subreg_overflow
      0,	// subreg_hireg
      0,	// subreg_loreg
      5,	// subreg_overflow -> CtrRegs_with_subreg_overflow
    },
    {	// DoubleRegs
      6,	// subreg_hireg -> DoubleRegs
      6,	// subreg_loreg -> DoubleRegs
      0,	// subreg_overflow
    },
    {	// CtrRegs64
      7,	// subreg_hireg -> CtrRegs64
      7,	// subreg_loreg -> CtrRegs64
      8,	// subreg_overflow -> CtrRegs64_with_subreg_overflow
    },
    {	// CtrRegs64_with_subreg_overflow
      8,	// subreg_hireg -> CtrRegs64_with_subreg_overflow
      8,	// subreg_loreg -> CtrRegs64_with_subreg_overflow
      8,	// subreg_overflow -> CtrRegs64_with_subreg_overflow
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 3 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &HexagonGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 32},  	// IntRegs
    {0, 6},  	// CtrRegs
    {1, 4},  	// PredRegs
    {1, 2},  	// ModRegs
    {0, 0},  	// CtrRegs_with_subreg_overflow
    {2, 32},  	// DoubleRegs
    {0, 2},  	// CtrRegs64
    {0, 0},  	// CtrRegs64_with_subreg_overflow
  };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned HexagonGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 50 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned HexagonGenRegisterInfo::getNumRegPressureSets() const {
  return 3;
}

// Get the name of this register unit pressure set.
const char *HexagonGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *const PressureNameTable[] = {
    "ModRegs",
    "PredRegs",
    "IntRegs",
    nullptr };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned HexagonGenRegisterInfo::
getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const {
  static const uint8_t PressureLimitTable[] = {
    2,  	// 0: ModRegs
    4,  	// 1: PredRegs
    32,  	// 2: IntRegs
  };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
  /* 0 */ 0, -1,
  /* 2 */ 1, -1,
  /* 4 */ 2, -1,
};

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* HexagonGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const uint8_t RCSetStartTable[] = {
    4,1,2,0,1,4,1,1,};
  return &RCSetsTable[RCSetStartTable[RC->getID()]];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* HexagonGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 50 && "invalid register unit");
  static const uint8_t RUSetStartTable[] = {
    1,1,1,1,1,1,1,1,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,2,2,2,2,1,1,};
  return &RCSetsTable[RUSetStartTable[RegUnit]];
}

extern const MCRegisterDesc HexagonRegDesc[];
extern const MCPhysReg HexagonRegDiffLists[];
extern const unsigned HexagonLaneMaskLists[];
extern const char HexagonRegStrings[];
extern const char HexagonRegClassStrings[];
extern const MCPhysReg HexagonRegUnitRoots[][2];
extern const uint16_t HexagonSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits HexagonSubRegIdxRanges[];
extern const uint16_t HexagonRegEncodingTable[];
// Hexagon Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0Dwarf2L[];
extern const unsigned HexagonDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0Dwarf2L[];
extern const unsigned HexagonEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0L2Dwarf[];
extern const unsigned HexagonDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0L2Dwarf[];
extern const unsigned HexagonEHFlavour0L2DwarfSize;

HexagonGenRegisterInfo::
HexagonGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(HexagonRegInfoDesc, RegisterClasses, RegisterClasses+8,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, 0xfffffffd) {
  InitMCRegisterInfo(HexagonRegDesc, 78, RA, PC,
                     HexagonMCRegisterClasses, 8,
                     HexagonRegUnitRoots,
                     50,
                     HexagonRegDiffLists,
                     HexagonLaneMaskLists,
                     HexagonRegStrings,
                     HexagonRegClassStrings,
                     HexagonSubRegIdxLists,
                     4,
                     HexagonSubRegIdxRanges,
                     HexagonRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(HexagonDwarfFlavour0Dwarf2L, HexagonDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(HexagonEHFlavour0Dwarf2L, HexagonEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(HexagonDwarfFlavour0L2Dwarf, HexagonDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(HexagonEHFlavour0L2Dwarf, HexagonEHFlavour0L2DwarfSize, true);
    break;
  }
}



ArrayRef<const uint32_t *> HexagonGenRegisterInfo::getRegMasks() const {
  static const uint32_t *Masks[] = {
    nullptr
  };
  return ArrayRef<const uint32_t *>(Masks, (size_t)0);
}

ArrayRef<const char *> HexagonGenRegisterInfo::getRegMaskNames() const {
  static const char *Names[] = {
    nullptr
  };
  return ArrayRef<const char *>(Names, (size_t)0);
}

const HexagonFrameLowering *HexagonGenRegisterInfo::
    getFrameLowering(const MachineFunction &MF) {
  return static_cast<const HexagonFrameLowering *>(
      MF.getSubtarget().getFrameLowering());
}

} // End llvm namespace
#endif // GET_REGINFO_TARGET_DESC

