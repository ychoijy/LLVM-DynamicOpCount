/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SparcInstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2513U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2506U,	// BUNDLE
    2523U,	// LIFETIME_START
    2493U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    4723U,	// ADDCCri
    4723U,	// ADDCCrr
    5976U,	// ADDCri
    5976U,	// ADDCrr
    4807U,	// ADDEri
    4807U,	// ADDErr
    4821U,	// ADDXC
    4713U,	// ADDXCCC
    4843U,	// ADDXri
    4843U,	// ADDXrr
    4843U,	// ADDri
    4843U,	// ADDrr
    74188U,	// ADJCALLSTACKDOWN
    74207U,	// ADJCALLSTACKUP
    5543U,	// ALIGNADDR
    5173U,	// ALIGNADDRL
    4730U,	// ANDCCri
    4730U,	// ANDCCrr
    4753U,	// ANDNCCri
    4753U,	// ANDNCCrr
    5228U,	// ANDNri
    5228U,	// ANDNrr
    5228U,	// ANDXNrr
    4911U,	// ANDXri
    4911U,	// ANDXrr
    4911U,	// ANDri
    4911U,	// ANDrr
    4524U,	// ARRAY16
    4277U,	// ARRAY32
    4548U,	// ARRAY8
    0U,	// ATOMIC_LOAD_ADD_32
    0U,	// ATOMIC_LOAD_ADD_64
    0U,	// ATOMIC_LOAD_AND_32
    0U,	// ATOMIC_LOAD_AND_64
    0U,	// ATOMIC_LOAD_MAX_32
    0U,	// ATOMIC_LOAD_MAX_64
    0U,	// ATOMIC_LOAD_MIN_32
    0U,	// ATOMIC_LOAD_MIN_64
    0U,	// ATOMIC_LOAD_NAND_32
    0U,	// ATOMIC_LOAD_NAND_64
    0U,	// ATOMIC_LOAD_OR_32
    0U,	// ATOMIC_LOAD_OR_64
    0U,	// ATOMIC_LOAD_SUB_32
    0U,	// ATOMIC_LOAD_SUB_64
    0U,	// ATOMIC_LOAD_UMAX_32
    0U,	// ATOMIC_LOAD_UMAX_64
    0U,	// ATOMIC_LOAD_UMIN_32
    0U,	// ATOMIC_LOAD_UMIN_64
    0U,	// ATOMIC_LOAD_XOR_32
    0U,	// ATOMIC_LOAD_XOR_64
    0U,	// ATOMIC_SWAP_64
    74295U,	// BA
    2243175U,	// BCOND
    2308711U,	// BCONDA
    17705U,	// BINDri
    17705U,	// BINDrr
    5111U,	// BMASK
    146022U,	// BPFCC
    211558U,	// BPFCCA
    277094U,	// BPFCCANT
    342630U,	// BPFCCNT
    4203663U,	// BPGEZapn
    4203012U,	// BPGEZapt
    4203730U,	// BPGEZnapn
    4204491U,	// BPGEZnapt
    4203687U,	// BPGZapn
    4203030U,	// BPGZapt
    4203750U,	// BPGZnapn
    4204587U,	// BPGZnapt
    2505319U,	// BPICC
    473703U,	// BPICCA
    539239U,	// BPICCANT
    604775U,	// BPICCNT
    4203675U,	// BPLEZapn
    4203021U,	// BPLEZapt
    4203740U,	// BPLEZnapn
    4204540U,	// BPLEZnapt
    4203698U,	// BPLZapn
    4203038U,	// BPLZapt
    4203759U,	// BPLZnapn
    4204631U,	// BPLZnapt
    4203709U,	// BPNZapn
    4203046U,	// BPNZapt
    4203768U,	// BPNZnapn
    4204675U,	// BPNZnapt
    2767463U,	// BPXCC
    735847U,	// BPXCCA
    801383U,	// BPXCCANT
    866919U,	// BPXCCNT
    4203720U,	// BPZapn
    4203054U,	// BPZapt
    4203777U,	// BPZnapn
    4204708U,	// BPZnapt
    5022U,	// BSHUFFLE
    74788U,	// CALL
    17444U,	// CALLri
    17444U,	// CALLrr
    924255U,	// CASXrr
    924236U,	// CASrr
    74023U,	// CMASK16
    73855U,	// CMASK32
    74172U,	// CMASK8
    4203805U,	// CMPri
    4203805U,	// CMPrr
    4354U,	// EDGE16
    5127U,	// EDGE16L
    5244U,	// EDGE16LN
    5211U,	// EDGE16N
    4186U,	// EDGE32
    5118U,	// EDGE32L
    5234U,	// EDGE32LN
    5202U,	// EDGE32N
    4533U,	// EDGE8
    5136U,	// EDGE8L
    5254U,	// EDGE8LN
    5220U,	// EDGE8N
    2102131U,	// FABSD
    2102653U,	// FABSQ
    2102998U,	// FABSS
    4848U,	// FADDD
    5429U,	// FADDQ
    5691U,	// FADDS
    4678U,	// FALIGNADATA
    4910U,	// FAND
    4134U,	// FANDNOT1
    5590U,	// FANDNOT1S
    4293U,	// FANDNOT2
    5637U,	// FANDNOT2S
    5723U,	// FANDS
    2243174U,	// FBCOND
    2308710U,	// FBCONDA
    4416U,	// FCHKSM16
    4203360U,	// FCMPD
    4435U,	// FCMPEQ16
    4248U,	// FCMPEQ32
    4454U,	// FCMPGT16
    4267U,	// FCMPGT32
    4362U,	// FCMPLE16
    4194U,	// FCMPLE32
    4372U,	// FCMPNE16
    4204U,	// FCMPNE32
    4203894U,	// FCMPQ
    4204203U,	// FCMPS
    4999U,	// FDIVD
    5521U,	// FDIVQ
    5861U,	// FDIVS
    5451U,	// FDMULQ
    2102242U,	// FDTOI
    2102618U,	// FDTOQ
    2102927U,	// FDTOS
    2103163U,	// FDTOX
    2102075U,	// FEXPAND
    4855U,	// FHADDD
    5698U,	// FHADDS
    4835U,	// FHSUBD
    5683U,	// FHSUBS
    2102084U,	// FITOD
    2102625U,	// FITOQ
    2102934U,	// FITOS
    20980583U,	// FLCMPD
    20981426U,	// FLCMPS
    2473U,	// FLUSH
    2713U,	// FLUSHW
    17341U,	// FLUSHri
    17341U,	// FLUSHrr
    4426U,	// FMEAN16
    2102158U,	// FMOVD
    1006185U,	// FMOVD_FCC
    155605609U,	// FMOVD_ICC
    155867753U,	// FMOVD_XCC
    2102680U,	// FMOVQ
    1006209U,	// FMOVQ_FCC
    155605633U,	// FMOVQ_ICC
    155867777U,	// FMOVQ_XCC
    6069U,	// FMOVRGEZD
    6080U,	// FMOVRGEZQ
    6107U,	// FMOVRGEZS
    6167U,	// FMOVRGZD
    6177U,	// FMOVRGZQ
    6201U,	// FMOVRGZS
    6118U,	// FMOVRLEZD
    6129U,	// FMOVRLEZQ
    6156U,	// FMOVRLEZS
    6211U,	// FMOVRLZD
    6221U,	// FMOVRLZQ
    6245U,	// FMOVRLZS
    6255U,	// FMOVRNZD
    6265U,	// FMOVRNZQ
    6289U,	// FMOVRNZS
    6060U,	// FMOVRZD
    6299U,	// FMOVRZQ
    6320U,	// FMOVRZS
    2103020U,	// FMOVS
    1006221U,	// FMOVS_FCC
    155605645U,	// FMOVS_ICC
    155867789U,	// FMOVS_XCC
    4512U,	// FMUL8SUX16
    4487U,	// FMUL8ULX16
    4464U,	// FMUL8X16
    5144U,	// FMUL8X16AL
    5900U,	// FMUL8X16AU
    4895U,	// FMULD
    4499U,	// FMULD8SUX16
    4474U,	// FMULD8ULX16
    5459U,	// FMULQ
    5760U,	// FMULS
    4872U,	// FNADDD
    5715U,	// FNADDS
    4916U,	// FNAND
    5730U,	// FNANDS
    2102040U,	// FNEGD
    2102596U,	// FNEGQ
    2102905U,	// FNEGS
    4863U,	// FNHADDD
    5706U,	// FNHADDS
    4863U,	// FNMULD
    5706U,	// FNMULS
    5559U,	// FNOR
    5824U,	// FNORS
    2101296U,	// FNOT1
    2102753U,	// FNOT1S
    2101455U,	// FNOT2
    2102800U,	// FNOT2S
    5706U,	// FNSMULD
    74664U,	// FONE
    75370U,	// FONES
    5554U,	// FOR
    4151U,	// FORNOT1
    5609U,	// FORNOT1S
    4310U,	// FORNOT2
    5656U,	// FORNOT2S
    5818U,	// FORS
    2101534U,	// FPACK16
    4214U,	// FPACK32
    2103134U,	// FPACKFIX
    4345U,	// FPADD16
    5666U,	// FPADD16S
    4177U,	// FPADD32
    5619U,	// FPADD32S
    4319U,	// FPADD64
    5013U,	// FPMERGE
    4336U,	// FPSUB16
    4602U,	// FPSUB16S
    4168U,	// FPSUB32
    4592U,	// FPSUB32S
    2102091U,	// FQTOD
    2102249U,	// FQTOI
    2102941U,	// FQTOS
    2103179U,	// FQTOX
    4445U,	// FSLAS16
    4258U,	// FSLAS32
    4400U,	// FSLL16
    4232U,	// FSLL32
    4902U,	// FSMULD
    2102138U,	// FSQRTD
    2102660U,	// FSQRTQ
    2103005U,	// FSQRTS
    4328U,	// FSRA16
    4160U,	// FSRA32
    2101279U,	// FSRC1
    2102734U,	// FSRC1S
    2101438U,	// FSRC2
    2102781U,	// FSRC2S
    4408U,	// FSRL16
    4240U,	// FSRL32
    2102098U,	// FSTOD
    2102256U,	// FSTOI
    2102632U,	// FSTOQ
    2103186U,	// FSTOX
    4828U,	// FSUBD
    5422U,	// FSUBQ
    5676U,	// FSUBS
    5565U,	// FXNOR
    5831U,	// FXNORS
    5572U,	// FXOR
    5839U,	// FXORS
    2102105U,	// FXTOD
    2102639U,	// FXTOQ
    2102948U,	// FXTOS
    75030U,	// FZERO
    75399U,	// FZEROS
    24586U,	// GETPCX
    2126895U,	// JMPLri
    2126895U,	// JMPLrr
    7371258U,	// LDArr
    3045926U,	// LDDFri
    3045926U,	// LDDFrr
    3045932U,	// LDFri
    3045932U,	// LDFrr
    3045958U,	// LDQFri
    3045958U,	// LDQFrr
    7371242U,	// LDSBArr
    3045912U,	// LDSBri
    3045912U,	// LDSBrr
    7371264U,	// LDSHArr
    3045937U,	// LDSHri
    3045937U,	// LDSHrr
    3045970U,	// LDSWri
    3045970U,	// LDSWrr
    7371250U,	// LDUBArr
    3045919U,	// LDUBri
    3045919U,	// LDUBrr
    7371272U,	// LDUHArr
    3045944U,	// LDUHri
    3045944U,	// LDUHrr
    3045977U,	// LDXri
    3045977U,	// LDXrr
    3045932U,	// LDri
    3045932U,	// LDrr
    33515U,	// LEAX_ADDri
    33515U,	// LEA_ADDri
    2103032U,	// LZCNT
    75167U,	// MEMBARi
    2103170U,	// MOVDTOX
    1006229U,	// MOVFCCri
    1006229U,	// MOVFCCrr
    155605653U,	// MOVICCri
    155605653U,	// MOVICCrr
    6098U,	// MOVRGEZri
    6098U,	// MOVRGEZrr
    6193U,	// MOVRGZri
    6193U,	// MOVRGZrr
    6147U,	// MOVRLEZri
    6147U,	// MOVRLEZrr
    6237U,	// MOVRLZri
    6237U,	// MOVRLZrr
    6281U,	// MOVRNZri
    6281U,	// MOVRNZrr
    6313U,	// MOVRRZri
    6313U,	// MOVRRZrr
    2103096U,	// MOVSTOSW
    2103106U,	// MOVSTOUW
    2103170U,	// MOVWTOS
    155867797U,	// MOVXCCri
    155867797U,	// MOVXCCrr
    2103170U,	// MOVXTOD
    6005U,	// MULXri
    6005U,	// MULXrr
    2685U,	// NOP
    4770U,	// ORCCri
    4770U,	// ORCCrr
    4761U,	// ORNCCri
    4761U,	// ORNCCrr
    5385U,	// ORNri
    5385U,	// ORNrr
    5385U,	// ORXNrr
    5555U,	// ORXri
    5555U,	// ORXrr
    5555U,	// ORri
    5555U,	// ORrr
    5887U,	// PDIST
    5390U,	// PDISTN
    2101967U,	// POPCrr
    2102127U,	// RDASR
    73749U,	// RDPSR
    73739U,	// RDTBR
    73729U,	// RDWIM
    5038U,	// RESTOREri
    5038U,	// RESTORErr
    76183U,	// RET
    76192U,	// RETL
    18182U,	// RETTri
    18182U,	// RETTrr
    5047U,	// SAVEri
    5047U,	// SAVErr
    4783U,	// SDIVCCri
    4783U,	// SDIVCCrr
    6046U,	// SDIVXri
    6046U,	// SDIVXrr
    5912U,	// SDIVri
    5912U,	// SDIVrr
    2233U,	// SELECT_CC_DFP_FCC
    2344U,	// SELECT_CC_DFP_ICC
    2289U,	// SELECT_CC_FP_FCC
    2400U,	// SELECT_CC_FP_ICC
    2316U,	// SELECT_CC_Int_FCC
    2427U,	// SELECT_CC_Int_ICC
    2261U,	// SELECT_CC_QFP_FCC
    2372U,	// SELECT_CC_QFP_ICC
    2103027U,	// SET
    2102217U,	// SETHIXi
    2102217U,	// SETHIi
    2676U,	// SHUTDOWN
    2671U,	// SIAM
    5992U,	// SLLXri
    5992U,	// SLLXrr
    5162U,	// SLLri
    5162U,	// SLLrr
    4737U,	// SMULCCri
    4737U,	// SMULCCrr
    5190U,	// SMULri
    5190U,	// SMULrr
    5964U,	// SRAXri
    5964U,	// SRAXrr
    4673U,	// SRAri
    4673U,	// SRArr
    5998U,	// SRLXri
    5998U,	// SRLXrr
    5185U,	// SRLri
    5185U,	// SRLrr
    9474642U,	// STArr
    2695U,	// STBAR
    9474613U,	// STBArr
    1151575U,	// STBri
    1151575U,	// STBrr
    1151874U,	// STDFri
    1151874U,	// STDFrr
    1152770U,	// STFri
    1152770U,	// STFrr
    9474619U,	// STHArr
    1151940U,	// STHri
    1151940U,	// STHrr
    1152396U,	// STQFri
    1152396U,	// STQFrr
    1152921U,	// STXri
    1152921U,	// STXrr
    1152770U,	// STri
    1152770U,	// STrr
    4706U,	// SUBCCri
    4706U,	// SUBCCrr
    5970U,	// SUBCri
    5970U,	// SUBCrr
    4799U,	// SUBEri
    4799U,	// SUBErr
    4700U,	// SUBXri
    4700U,	// SUBXrr
    4700U,	// SUBri
    4700U,	// SUBrr
    7371280U,	// SWAPArr
    3045951U,	// SWAPri
    3045951U,	// SWAPrr
    2483U,	// TA3
    2488U,	// TA5
    5934U,	// TADDCCTVri
    5934U,	// TADDCCTVrr
    4722U,	// TADDCCri
    4722U,	// TADDCCrr
    36088467U,	// TICCri
    36088467U,	// TICCrr
    285217515U,	// TLS_ADDXrr
    285217515U,	// TLS_ADDrr
    4203556U,	// TLS_CALL
    288258649U,	// TLS_LDXrr
    288258604U,	// TLS_LDrr
    5924U,	// TSUBCCTVri
    5924U,	// TSUBCCTVrr
    4705U,	// TSUBCCri
    4705U,	// TSUBCCrr
    36350611U,	// TXCCri
    36350611U,	// TXCCrr
    4791U,	// UDIVCCri
    4791U,	// UDIVCCrr
    6053U,	// UDIVXri
    6053U,	// UDIVXrr
    5918U,	// UDIVri
    5918U,	// UDIVrr
    4745U,	// UMULCCri
    4745U,	// UMULCCrr
    5072U,	// UMULXHI
    5196U,	// UMULri
    5196U,	// UMULrr
    75042U,	// UNIMP
    20980576U,	// V9FCMPD
    20980496U,	// V9FCMPED
    20981052U,	// V9FCMPEQ
    20981361U,	// V9FCMPES
    20981110U,	// V9FCMPQ
    20981419U,	// V9FCMPS
    47721U,	// V9FMOVD_FCC
    47745U,	// V9FMOVQ_FCC
    47757U,	// V9FMOVS_FCC
    47765U,	// V9MOVFCCri
    47765U,	// V9MOVFCCrr
    5578U,	// WRASRri
    5578U,	// WRASRrr
    54535626U,	// WRPSRri
    54535626U,	// WRPSRrr
    71312842U,	// WRTBRri
    71312842U,	// WRTBRrr
    88090058U,	// WRWIMri
    88090058U,	// WRWIMrr
    6004U,	// XMULX
    5081U,	// XMULXHI
    4768U,	// XNORCCri
    4768U,	// XNORCCrr
    5566U,	// XNORXrr
    5566U,	// XNORri
    5566U,	// XNORrr
    4776U,	// XORCCri
    4776U,	// XORCCrr
    5573U,	// XORXri
    5573U,	// XORXrr
    5573U,	// XORri
    5573U,	// XORrr
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ 'r', 'd', 32, '%', 'w', 'i', 'm', ',', 32, 0,
  /* 10 */ 'r', 'd', 32, '%', 't', 'b', 'r', ',', 32, 0,
  /* 20 */ 'r', 'd', 32, '%', 'p', 's', 'r', ',', 32, 0,
  /* 30 */ 'f', 's', 'r', 'c', '1', 32, 0,
  /* 37 */ 'f', 'a', 'n', 'd', 'n', 'o', 't', '1', 32, 0,
  /* 47 */ 'f', 'n', 'o', 't', '1', 32, 0,
  /* 54 */ 'f', 'o', 'r', 'n', 'o', 't', '1', 32, 0,
  /* 63 */ 'f', 's', 'r', 'a', '3', '2', 32, 0,
  /* 71 */ 'f', 'p', 's', 'u', 'b', '3', '2', 32, 0,
  /* 80 */ 'f', 'p', 'a', 'd', 'd', '3', '2', 32, 0,
  /* 89 */ 'e', 'd', 'g', 'e', '3', '2', 32, 0,
  /* 97 */ 'f', 'c', 'm', 'p', 'l', 'e', '3', '2', 32, 0,
  /* 107 */ 'f', 'c', 'm', 'p', 'n', 'e', '3', '2', 32, 0,
  /* 117 */ 'f', 'p', 'a', 'c', 'k', '3', '2', 32, 0,
  /* 126 */ 'c', 'm', 'a', 's', 'k', '3', '2', 32, 0,
  /* 135 */ 'f', 's', 'l', 'l', '3', '2', 32, 0,
  /* 143 */ 'f', 's', 'r', 'l', '3', '2', 32, 0,
  /* 151 */ 'f', 'c', 'm', 'p', 'e', 'q', '3', '2', 32, 0,
  /* 161 */ 'f', 's', 'l', 'a', 's', '3', '2', 32, 0,
  /* 170 */ 'f', 'c', 'm', 'p', 'g', 't', '3', '2', 32, 0,
  /* 180 */ 'a', 'r', 'r', 'a', 'y', '3', '2', 32, 0,
  /* 189 */ 'f', 's', 'r', 'c', '2', 32, 0,
  /* 196 */ 'f', 'a', 'n', 'd', 'n', 'o', 't', '2', 32, 0,
  /* 206 */ 'f', 'n', 'o', 't', '2', 32, 0,
  /* 213 */ 'f', 'o', 'r', 'n', 'o', 't', '2', 32, 0,
  /* 222 */ 'f', 'p', 'a', 'd', 'd', '6', '4', 32, 0,
  /* 231 */ 'f', 's', 'r', 'a', '1', '6', 32, 0,
  /* 239 */ 'f', 'p', 's', 'u', 'b', '1', '6', 32, 0,
  /* 248 */ 'f', 'p', 'a', 'd', 'd', '1', '6', 32, 0,
  /* 257 */ 'e', 'd', 'g', 'e', '1', '6', 32, 0,
  /* 265 */ 'f', 'c', 'm', 'p', 'l', 'e', '1', '6', 32, 0,
  /* 275 */ 'f', 'c', 'm', 'p', 'n', 'e', '1', '6', 32, 0,
  /* 285 */ 'f', 'p', 'a', 'c', 'k', '1', '6', 32, 0,
  /* 294 */ 'c', 'm', 'a', 's', 'k', '1', '6', 32, 0,
  /* 303 */ 'f', 's', 'l', 'l', '1', '6', 32, 0,
  /* 311 */ 'f', 's', 'r', 'l', '1', '6', 32, 0,
  /* 319 */ 'f', 'c', 'h', 'k', 's', 'm', '1', '6', 32, 0,
  /* 329 */ 'f', 'm', 'e', 'a', 'n', '1', '6', 32, 0,
  /* 338 */ 'f', 'c', 'm', 'p', 'e', 'q', '1', '6', 32, 0,
  /* 348 */ 'f', 's', 'l', 'a', 's', '1', '6', 32, 0,
  /* 357 */ 'f', 'c', 'm', 'p', 'g', 't', '1', '6', 32, 0,
  /* 367 */ 'f', 'm', 'u', 'l', '8', 'x', '1', '6', 32, 0,
  /* 377 */ 'f', 'm', 'u', 'l', 'd', '8', 'u', 'l', 'x', '1', '6', 32, 0,
  /* 390 */ 'f', 'm', 'u', 'l', '8', 'u', 'l', 'x', '1', '6', 32, 0,
  /* 402 */ 'f', 'm', 'u', 'l', 'd', '8', 's', 'u', 'x', '1', '6', 32, 0,
  /* 415 */ 'f', 'm', 'u', 'l', '8', 's', 'u', 'x', '1', '6', 32, 0,
  /* 427 */ 'a', 'r', 'r', 'a', 'y', '1', '6', 32, 0,
  /* 436 */ 'e', 'd', 'g', 'e', '8', 32, 0,
  /* 443 */ 'c', 'm', 'a', 's', 'k', '8', 32, 0,
  /* 451 */ 'a', 'r', 'r', 'a', 'y', '8', 32, 0,
  /* 459 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 478 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 495 */ 'f', 'p', 's', 'u', 'b', '3', '2', 'S', 32, 0,
  /* 505 */ 'f', 'p', 's', 'u', 'b', '1', '6', 'S', 32, 0,
  /* 515 */ 'b', 'r', 'g', 'e', 'z', ',', 'a', 32, 0,
  /* 524 */ 'b', 'r', 'l', 'e', 'z', ',', 'a', 32, 0,
  /* 533 */ 'b', 'r', 'g', 'z', ',', 'a', 32, 0,
  /* 541 */ 'b', 'r', 'l', 'z', ',', 'a', 32, 0,
  /* 549 */ 'b', 'r', 'n', 'z', ',', 'a', 32, 0,
  /* 557 */ 'b', 'r', 'z', ',', 'a', 32, 0,
  /* 564 */ 's', 't', 'b', 'a', 32, 0,
  /* 570 */ 's', 't', 'h', 'a', 32, 0,
  /* 576 */ 's', 'r', 'a', 32, 0,
  /* 581 */ 'f', 'a', 'l', 'i', 'g', 'n', 'd', 'a', 't', 'a', 32, 0,
  /* 593 */ 's', 't', 'a', 32, 0,
  /* 598 */ 's', 't', 'b', 32, 0,
  /* 603 */ 's', 'u', 'b', 32, 0,
  /* 608 */ 't', 's', 'u', 'b', 'c', 'c', 32, 0,
  /* 616 */ 'a', 'd', 'd', 'x', 'c', 'c', 'c', 32, 0,
  /* 625 */ 't', 'a', 'd', 'd', 'c', 'c', 32, 0,
  /* 633 */ 'a', 'n', 'd', 'c', 'c', 32, 0,
  /* 640 */ 's', 'm', 'u', 'l', 'c', 'c', 32, 0,
  /* 648 */ 'u', 'm', 'u', 'l', 'c', 'c', 32, 0,
  /* 656 */ 'a', 'n', 'd', 'n', 'c', 'c', 32, 0,
  /* 664 */ 'o', 'r', 'n', 'c', 'c', 32, 0,
  /* 671 */ 'x', 'n', 'o', 'r', 'c', 'c', 32, 0,
  /* 679 */ 'x', 'o', 'r', 'c', 'c', 32, 0,
  /* 686 */ 's', 'd', 'i', 'v', 'c', 'c', 32, 0,
  /* 694 */ 'u', 'd', 'i', 'v', 'c', 'c', 32, 0,
  /* 702 */ 's', 'u', 'b', 'x', 'c', 'c', 32, 0,
  /* 710 */ 'a', 'd', 'd', 'x', 'c', 'c', 32, 0,
  /* 718 */ 'p', 'o', 'p', 'c', 32, 0,
  /* 724 */ 'a', 'd', 'd', 'x', 'c', 32, 0,
  /* 731 */ 'f', 's', 'u', 'b', 'd', 32, 0,
  /* 738 */ 'f', 'h', 's', 'u', 'b', 'd', 32, 0,
  /* 746 */ 'a', 'd', 'd', 32, 0,
  /* 751 */ 'f', 'a', 'd', 'd', 'd', 32, 0,
  /* 758 */ 'f', 'h', 'a', 'd', 'd', 'd', 32, 0,
  /* 766 */ 'f', 'n', 'h', 'a', 'd', 'd', 'd', 32, 0,
  /* 775 */ 'f', 'n', 'a', 'd', 'd', 'd', 32, 0,
  /* 783 */ 'f', 'c', 'm', 'p', 'e', 'd', 32, 0,
  /* 791 */ 'f', 'n', 'e', 'g', 'd', 32, 0,
  /* 798 */ 'f', 'm', 'u', 'l', 'd', 32, 0,
  /* 805 */ 'f', 's', 'm', 'u', 'l', 'd', 32, 0,
  /* 813 */ 'f', 'a', 'n', 'd', 32, 0,
  /* 819 */ 'f', 'n', 'a', 'n', 'd', 32, 0,
  /* 826 */ 'f', 'e', 'x', 'p', 'a', 'n', 'd', 32, 0,
  /* 835 */ 'f', 'i', 't', 'o', 'd', 32, 0,
  /* 842 */ 'f', 'q', 't', 'o', 'd', 32, 0,
  /* 849 */ 'f', 's', 't', 'o', 'd', 32, 0,
  /* 856 */ 'f', 'x', 't', 'o', 'd', 32, 0,
  /* 863 */ 'f', 'c', 'm', 'p', 'd', 32, 0,
  /* 870 */ 'f', 'l', 'c', 'm', 'p', 'd', 32, 0,
  /* 878 */ 'r', 'd', 32, 0,
  /* 882 */ 'f', 'a', 'b', 's', 'd', 32, 0,
  /* 889 */ 'f', 's', 'q', 'r', 't', 'd', 32, 0,
  /* 897 */ 's', 't', 'd', 32, 0,
  /* 902 */ 'f', 'd', 'i', 'v', 'd', 32, 0,
  /* 909 */ 'f', 'm', 'o', 'v', 'd', 32, 0,
  /* 916 */ 'f', 'p', 'm', 'e', 'r', 'g', 'e', 32, 0,
  /* 925 */ 'b', 's', 'h', 'u', 'f', 'f', 'l', 'e', 32, 0,
  /* 935 */ 'f', 'o', 'n', 'e', 32, 0,
  /* 941 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 32, 0,
  /* 950 */ 's', 'a', 'v', 'e', 32, 0,
  /* 956 */ 'f', 'l', 'u', 's', 'h', 32, 0,
  /* 963 */ 's', 't', 'h', 32, 0,
  /* 968 */ 's', 'e', 't', 'h', 'i', 32, 0,
  /* 975 */ 'u', 'm', 'u', 'l', 'x', 'h', 'i', 32, 0,
  /* 984 */ 'x', 'm', 'u', 'l', 'x', 'h', 'i', 32, 0,
  /* 993 */ 'f', 'd', 't', 'o', 'i', 32, 0,
  /* 1000 */ 'f', 'q', 't', 'o', 'i', 32, 0,
  /* 1007 */ 'f', 's', 't', 'o', 'i', 32, 0,
  /* 1014 */ 'b', 'm', 'a', 's', 'k', 32, 0,
  /* 1021 */ 'e', 'd', 'g', 'e', '3', '2', 'l', 32, 0,
  /* 1030 */ 'e', 'd', 'g', 'e', '1', '6', 'l', 32, 0,
  /* 1039 */ 'e', 'd', 'g', 'e', '8', 'l', 32, 0,
  /* 1047 */ 'f', 'm', 'u', 'l', '8', 'x', '1', '6', 'a', 'l', 32, 0,
  /* 1059 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 1065 */ 's', 'l', 'l', 32, 0,
  /* 1070 */ 'j', 'm', 'p', 'l', 32, 0,
  /* 1076 */ 'a', 'l', 'i', 'g', 'n', 'a', 'd', 'd', 'r', 'l', 32, 0,
  /* 1088 */ 's', 'r', 'l', 32, 0,
  /* 1093 */ 's', 'm', 'u', 'l', 32, 0,
  /* 1099 */ 'u', 'm', 'u', 'l', 32, 0,
  /* 1105 */ 'e', 'd', 'g', 'e', '3', '2', 'n', 32, 0,
  /* 1114 */ 'e', 'd', 'g', 'e', '1', '6', 'n', 32, 0,
  /* 1123 */ 'e', 'd', 'g', 'e', '8', 'n', 32, 0,
  /* 1131 */ 'a', 'n', 'd', 'n', 32, 0,
  /* 1137 */ 'e', 'd', 'g', 'e', '3', '2', 'l', 'n', 32, 0,
  /* 1147 */ 'e', 'd', 'g', 'e', '1', '6', 'l', 'n', 32, 0,
  /* 1157 */ 'e', 'd', 'g', 'e', '8', 'l', 'n', 32, 0,
  /* 1166 */ 'b', 'r', 'g', 'e', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1178 */ 'b', 'r', 'l', 'e', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1190 */ 'b', 'r', 'g', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1201 */ 'b', 'r', 'l', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1212 */ 'b', 'r', 'n', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1223 */ 'b', 'r', 'z', ',', 'a', ',', 'p', 'n', 32, 0,
  /* 1233 */ 'b', 'r', 'g', 'e', 'z', ',', 'p', 'n', 32, 0,
  /* 1243 */ 'b', 'r', 'l', 'e', 'z', ',', 'p', 'n', 32, 0,
  /* 1253 */ 'b', 'r', 'g', 'z', ',', 'p', 'n', 32, 0,
  /* 1262 */ 'b', 'r', 'l', 'z', ',', 'p', 'n', 32, 0,
  /* 1271 */ 'b', 'r', 'n', 'z', ',', 'p', 'n', 32, 0,
  /* 1280 */ 'b', 'r', 'z', ',', 'p', 'n', 32, 0,
  /* 1288 */ 'o', 'r', 'n', 32, 0,
  /* 1293 */ 'p', 'd', 'i', 's', 't', 'n', 32, 0,
  /* 1301 */ 'f', 'z', 'e', 'r', 'o', 32, 0,
  /* 1308 */ 'c', 'm', 'p', 32, 0,
  /* 1313 */ 'u', 'n', 'i', 'm', 'p', 32, 0,
  /* 1320 */ 'j', 'm', 'p', 32, 0,
  /* 1325 */ 'f', 's', 'u', 'b', 'q', 32, 0,
  /* 1332 */ 'f', 'a', 'd', 'd', 'q', 32, 0,
  /* 1339 */ 'f', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 1347 */ 'f', 'n', 'e', 'g', 'q', 32, 0,
  /* 1354 */ 'f', 'd', 'm', 'u', 'l', 'q', 32, 0,
  /* 1362 */ 'f', 'm', 'u', 'l', 'q', 32, 0,
  /* 1369 */ 'f', 'd', 't', 'o', 'q', 32, 0,
  /* 1376 */ 'f', 'i', 't', 'o', 'q', 32, 0,
  /* 1383 */ 'f', 's', 't', 'o', 'q', 32, 0,
  /* 1390 */ 'f', 'x', 't', 'o', 'q', 32, 0,
  /* 1397 */ 'f', 'c', 'm', 'p', 'q', 32, 0,
  /* 1404 */ 'f', 'a', 'b', 's', 'q', 32, 0,
  /* 1411 */ 'f', 's', 'q', 'r', 't', 'q', 32, 0,
  /* 1419 */ 's', 't', 'q', 32, 0,
  /* 1424 */ 'f', 'd', 'i', 'v', 'q', 32, 0,
  /* 1431 */ 'f', 'm', 'o', 'v', 'q', 32, 0,
  /* 1438 */ 'm', 'e', 'm', 'b', 'a', 'r', 32, 0,
  /* 1446 */ 'a', 'l', 'i', 'g', 'n', 'a', 'd', 'd', 'r', 32, 0,
  /* 1457 */ 'f', 'o', 'r', 32, 0,
  /* 1462 */ 'f', 'n', 'o', 'r', 32, 0,
  /* 1468 */ 'f', 'x', 'n', 'o', 'r', 32, 0,
  /* 1475 */ 'f', 'x', 'o', 'r', 32, 0,
  /* 1481 */ 'w', 'r', 32, 0,
  /* 1485 */ 'f', 's', 'r', 'c', '1', 's', 32, 0,
  /* 1493 */ 'f', 'a', 'n', 'd', 'n', 'o', 't', '1', 's', 32, 0,
  /* 1504 */ 'f', 'n', 'o', 't', '1', 's', 32, 0,
  /* 1512 */ 'f', 'o', 'r', 'n', 'o', 't', '1', 's', 32, 0,
  /* 1522 */ 'f', 'p', 'a', 'd', 'd', '3', '2', 's', 32, 0,
  /* 1532 */ 'f', 's', 'r', 'c', '2', 's', 32, 0,
  /* 1540 */ 'f', 'a', 'n', 'd', 'n', 'o', 't', '2', 's', 32, 0,
  /* 1551 */ 'f', 'n', 'o', 't', '2', 's', 32, 0,
  /* 1559 */ 'f', 'o', 'r', 'n', 'o', 't', '2', 's', 32, 0,
  /* 1569 */ 'f', 'p', 'a', 'd', 'd', '1', '6', 's', 32, 0,
  /* 1579 */ 'f', 's', 'u', 'b', 's', 32, 0,
  /* 1586 */ 'f', 'h', 's', 'u', 'b', 's', 32, 0,
  /* 1594 */ 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 1601 */ 'f', 'h', 'a', 'd', 'd', 's', 32, 0,
  /* 1609 */ 'f', 'n', 'h', 'a', 'd', 'd', 's', 32, 0,
  /* 1618 */ 'f', 'n', 'a', 'd', 'd', 's', 32, 0,
  /* 1626 */ 'f', 'a', 'n', 'd', 's', 32, 0,
  /* 1633 */ 'f', 'n', 'a', 'n', 'd', 's', 32, 0,
  /* 1641 */ 'f', 'o', 'n', 'e', 's', 32, 0,
  /* 1648 */ 'f', 'c', 'm', 'p', 'e', 's', 32, 0,
  /* 1656 */ 'f', 'n', 'e', 'g', 's', 32, 0,
  /* 1663 */ 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 1670 */ 'f', 'z', 'e', 'r', 'o', 's', 32, 0,
  /* 1678 */ 'f', 'd', 't', 'o', 's', 32, 0,
  /* 1685 */ 'f', 'i', 't', 'o', 's', 32, 0,
  /* 1692 */ 'f', 'q', 't', 'o', 's', 32, 0,
  /* 1699 */ 'f', 'x', 't', 'o', 's', 32, 0,
  /* 1706 */ 'f', 'c', 'm', 'p', 's', 32, 0,
  /* 1713 */ 'f', 'l', 'c', 'm', 'p', 's', 32, 0,
  /* 1721 */ 'f', 'o', 'r', 's', 32, 0,
  /* 1727 */ 'f', 'n', 'o', 'r', 's', 32, 0,
  /* 1734 */ 'f', 'x', 'n', 'o', 'r', 's', 32, 0,
  /* 1742 */ 'f', 'x', 'o', 'r', 's', 32, 0,
  /* 1749 */ 'f', 'a', 'b', 's', 's', 32, 0,
  /* 1756 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 1764 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 1771 */ 'f', 'm', 'o', 'v', 's', 32, 0,
  /* 1778 */ 's', 'e', 't', 32, 0,
  /* 1783 */ 'l', 'z', 'c', 'n', 't', 32, 0,
  /* 1790 */ 'p', 'd', 'i', 's', 't', 32, 0,
  /* 1797 */ 'r', 'e', 't', 't', 32, 0,
  /* 1803 */ 'f', 'm', 'u', 'l', '8', 'x', '1', '6', 'a', 'u', 32, 0,
  /* 1815 */ 's', 'd', 'i', 'v', 32, 0,
  /* 1821 */ 'u', 'd', 'i', 'v', 32, 0,
  /* 1827 */ 't', 's', 'u', 'b', 'c', 'c', 't', 'v', 32, 0,
  /* 1837 */ 't', 'a', 'd', 'd', 'c', 'c', 't', 'v', 32, 0,
  /* 1847 */ 'm', 'o', 'v', 's', 't', 'o', 's', 'w', 32, 0,
  /* 1857 */ 'm', 'o', 'v', 's', 't', 'o', 'u', 'w', 32, 0,
  /* 1867 */ 's', 'r', 'a', 'x', 32, 0,
  /* 1873 */ 's', 'u', 'b', 'x', 32, 0,
  /* 1879 */ 'a', 'd', 'd', 'x', 32, 0,
  /* 1885 */ 'f', 'p', 'a', 'c', 'k', 'f', 'i', 'x', 32, 0,
  /* 1895 */ 's', 'l', 'l', 'x', 32, 0,
  /* 1901 */ 's', 'r', 'l', 'x', 32, 0,
  /* 1907 */ 'x', 'm', 'u', 'l', 'x', 32, 0,
  /* 1914 */ 'f', 'd', 't', 'o', 'x', 32, 0,
  /* 1921 */ 'm', 'o', 'v', 'd', 't', 'o', 'x', 32, 0,
  /* 1930 */ 'f', 'q', 't', 'o', 'x', 32, 0,
  /* 1937 */ 'f', 's', 't', 'o', 'x', 32, 0,
  /* 1944 */ 's', 't', 'x', 32, 0,
  /* 1949 */ 's', 'd', 'i', 'v', 'x', 32, 0,
  /* 1956 */ 'u', 'd', 'i', 'v', 'x', 32, 0,
  /* 1963 */ 'f', 'm', 'o', 'v', 'r', 'd', 'z', 32, 0,
  /* 1972 */ 'f', 'm', 'o', 'v', 'r', 'd', 'g', 'e', 'z', 32, 0,
  /* 1983 */ 'f', 'm', 'o', 'v', 'r', 'q', 'g', 'e', 'z', 32, 0,
  /* 1994 */ 'b', 'r', 'g', 'e', 'z', 32, 0,
  /* 2001 */ 'm', 'o', 'v', 'r', 'g', 'e', 'z', 32, 0,
  /* 2010 */ 'f', 'm', 'o', 'v', 'r', 's', 'g', 'e', 'z', 32, 0,
  /* 2021 */ 'f', 'm', 'o', 'v', 'r', 'd', 'l', 'e', 'z', 32, 0,
  /* 2032 */ 'f', 'm', 'o', 'v', 'r', 'q', 'l', 'e', 'z', 32, 0,
  /* 2043 */ 'b', 'r', 'l', 'e', 'z', 32, 0,
  /* 2050 */ 'm', 'o', 'v', 'r', 'l', 'e', 'z', 32, 0,
  /* 2059 */ 'f', 'm', 'o', 'v', 'r', 's', 'l', 'e', 'z', 32, 0,
  /* 2070 */ 'f', 'm', 'o', 'v', 'r', 'd', 'g', 'z', 32, 0,
  /* 2080 */ 'f', 'm', 'o', 'v', 'r', 'q', 'g', 'z', 32, 0,
  /* 2090 */ 'b', 'r', 'g', 'z', 32, 0,
  /* 2096 */ 'm', 'o', 'v', 'r', 'g', 'z', 32, 0,
  /* 2104 */ 'f', 'm', 'o', 'v', 'r', 's', 'g', 'z', 32, 0,
  /* 2114 */ 'f', 'm', 'o', 'v', 'r', 'd', 'l', 'z', 32, 0,
  /* 2124 */ 'f', 'm', 'o', 'v', 'r', 'q', 'l', 'z', 32, 0,
  /* 2134 */ 'b', 'r', 'l', 'z', 32, 0,
  /* 2140 */ 'm', 'o', 'v', 'r', 'l', 'z', 32, 0,
  /* 2148 */ 'f', 'm', 'o', 'v', 'r', 's', 'l', 'z', 32, 0,
  /* 2158 */ 'f', 'm', 'o', 'v', 'r', 'd', 'n', 'z', 32, 0,
  /* 2168 */ 'f', 'm', 'o', 'v', 'r', 'q', 'n', 'z', 32, 0,
  /* 2178 */ 'b', 'r', 'n', 'z', 32, 0,
  /* 2184 */ 'm', 'o', 'v', 'r', 'n', 'z', 32, 0,
  /* 2192 */ 'f', 'm', 'o', 'v', 'r', 's', 'n', 'z', 32, 0,
  /* 2202 */ 'f', 'm', 'o', 'v', 'r', 'q', 'z', 32, 0,
  /* 2211 */ 'b', 'r', 'z', 32, 0,
  /* 2216 */ 'm', 'o', 'v', 'r', 'z', 32, 0,
  /* 2223 */ 'f', 'm', 'o', 'v', 'r', 's', 'z', 32, 0,
  /* 2232 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2260 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2288 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2315 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2343 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2371 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2399 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2426 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2454 */ 'j', 'm', 'p', 32, '%', 'i', '7', '+', 0,
  /* 2463 */ 'j', 'm', 'p', 32, '%', 'o', '7', '+', 0,
  /* 2472 */ 'f', 'l', 'u', 's', 'h', 32, '%', 'g', '0', 0,
  /* 2482 */ 't', 'a', 32, '3', 0,
  /* 2487 */ 't', 'a', 32, '5', 0,
  /* 2492 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2505 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2512 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2522 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 2537 */ 'l', 'd', 's', 'b', 'a', 32, '[', 0,
  /* 2545 */ 'l', 'd', 'u', 'b', 'a', 32, '[', 0,
  /* 2553 */ 'l', 'd', 'a', 32, '[', 0,
  /* 2559 */ 'l', 'd', 's', 'h', 'a', 32, '[', 0,
  /* 2567 */ 'l', 'd', 'u', 'h', 'a', 32, '[', 0,
  /* 2575 */ 's', 'w', 'a', 'p', 'a', 32, '[', 0,
  /* 2583 */ 'l', 'd', 's', 'b', 32, '[', 0,
  /* 2590 */ 'l', 'd', 'u', 'b', 32, '[', 0,
  /* 2597 */ 'l', 'd', 'd', 32, '[', 0,
  /* 2603 */ 'l', 'd', 32, '[', 0,
  /* 2608 */ 'l', 'd', 's', 'h', 32, '[', 0,
  /* 2615 */ 'l', 'd', 'u', 'h', 32, '[', 0,
  /* 2622 */ 's', 'w', 'a', 'p', 32, '[', 0,
  /* 2629 */ 'l', 'd', 'q', 32, '[', 0,
  /* 2635 */ 'c', 'a', 's', 32, '[', 0,
  /* 2641 */ 'l', 'd', 's', 'w', 32, '[', 0,
  /* 2648 */ 'l', 'd', 'x', 32, '[', 0,
  /* 2654 */ 'c', 'a', 's', 'x', 32, '[', 0,
  /* 2661 */ 'f', 'b', 0,
  /* 2664 */ 'f', 'm', 'o', 'v', 'd', 0,
  /* 2670 */ 's', 'i', 'a', 'm', 0,
  /* 2675 */ 's', 'h', 'u', 't', 'd', 'o', 'w', 'n', 0,
  /* 2684 */ 'n', 'o', 'p', 0,
  /* 2688 */ 'f', 'm', 'o', 'v', 'q', 0,
  /* 2694 */ 's', 't', 'b', 'a', 'r', 0,
  /* 2700 */ 'f', 'm', 'o', 'v', 's', 0,
  /* 2706 */ 't', 0,
  /* 2708 */ 'm', 'o', 'v', 0,
  /* 2712 */ 'f', 'l', 'u', 's', 'h', 'w', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 12) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FLUSH, FLUSHW, NOP, S...
    return;
    break;
  case 1:
    // ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC, ADDX...
    printOperand(MI, 1, STI, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BA, BPGEZapn, BPGEZapt, BPGEZnapn, B...
    printOperand(MI, 0, STI, O); 
    break;
  case 3:
    // BCOND, BCONDA, BPFCC, BPFCCA, BPFCCANT, BPFCCNT, BPICC, BPICCA, BPICCA...
    printCCOperand(MI, 1, STI, O); 
    break;
  case 4:
    // BINDri, BINDrr, CALLri, CALLrr, FLUSHri, FLUSHrr, RETTri, RETTrr
    printMemOperand(MI, 0, STI, O); 
    return;
    break;
  case 5:
    // FMOVD_FCC, FMOVD_ICC, FMOVD_XCC, FMOVQ_FCC, FMOVQ_ICC, FMOVQ_XCC, FMOV...
    printCCOperand(MI, 3, STI, O); 
    break;
  case 6:
    // GETPCX
    printGetPCX(MI, 0, STI, O); 
    return;
    break;
  case 7:
    // JMPLri, JMPLrr, LDArr, LDDFri, LDDFrr, LDFri, LDFrr, LDQFri, LDQFrr, L...
    printMemOperand(MI, 1, STI, O); 
    break;
  case 8:
    // LEAX_ADDri, LEA_ADDri
    printMemOperand(MI, 1, STI, O, "arith"); 
    O << ", "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 9:
    // STArr, STBArr, STBri, STBrr, STDFri, STDFrr, STFri, STFrr, STHArr, STH...
    printOperand(MI, 2, STI, O); 
    O << ", ["; 
    printMemOperand(MI, 0, STI, O); 
    break;
  case 10:
    // TICCri, TICCrr, TXCCri, TXCCrr
    printCCOperand(MI, 2, STI, O); 
    break;
  case 11:
    // V9FMOVD_FCC, V9FMOVQ_FCC, V9FMOVS_FCC, V9MOVFCCri, V9MOVFCCrr
    printCCOperand(MI, 4, STI, O); 
    O << ' '; 
    printOperand(MI, 1, STI, O); 
    O << ", "; 
    printOperand(MI, 2, STI, O); 
    O << ", "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 16) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC, ADDX...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BA, CALL, CMASK16, CMASK32, CMASK8, ...
    return;
    break;
  case 2:
    // BCOND, BPFCC, FBCOND
    O << ' '; 
    break;
  case 3:
    // BCONDA, BPFCCA, FBCONDA
    O << ",a "; 
    break;
  case 4:
    // BPFCCANT
    O << ",a,pn "; 
    printOperand(MI, 2, STI, O); 
    O << ", "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 5:
    // BPFCCNT
    O << ",pn "; 
    printOperand(MI, 2, STI, O); 
    O << ", "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 6:
    // BPICC, FMOVD_ICC, FMOVQ_ICC, FMOVS_ICC, MOVICCri, MOVICCrr, TICCri, TI...
    O << " %icc, "; 
    break;
  case 7:
    // BPICCA
    O << ",a %icc, "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 8:
    // BPICCANT
    O << ",a,pn %icc, "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 9:
    // BPICCNT
    O << ",pn %icc, "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 10:
    // BPXCC, FMOVD_XCC, FMOVQ_XCC, FMOVS_XCC, MOVXCCri, MOVXCCrr, TXCCri, TX...
    O << " %xcc, "; 
    break;
  case 11:
    // BPXCCA
    O << ",a %xcc, "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 12:
    // BPXCCANT
    O << ",a,pn %xcc, "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 13:
    // BPXCCNT
    O << ",pn %xcc, "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 14:
    // CASXrr, CASrr, LDDFri, LDDFrr, LDFri, LDFrr, LDQFri, LDQFrr, LDSBri, L...
    O << "], "; 
    break;
  case 15:
    // FMOVD_FCC, FMOVQ_FCC, FMOVS_FCC, MOVFCCri, MOVFCCrr
    O << " %fcc0, "; 
    printOperand(MI, 1, STI, O); 
    O << ", "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 16:
    // LDArr, LDSBArr, LDSHArr, LDUBArr, LDUHArr, STArr, STBArr, STHArr, SWAP...
    O << "] "; 
    printOperand(MI, 3, STI, O); 
    break;
  case 17:
    // STBri, STBrr, STDFri, STDFrr, STFri, STFrr, STHri, STHrr, STQFri, STQF...
    O << ']'; 
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 21) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC, ADDX...
    printOperand(MI, 2, STI, O); 
    O << ", "; 
    printOperand(MI, 0, STI, O); 
    break;
  case 1:
    // BCOND, BCONDA, BPICC, BPXCC, FABSD, FABSQ, FABSS, FBCOND, FBCONDA, FDT...
    printOperand(MI, 0, STI, O); 
    break;
  case 2:
    // BPGEZapn, BPGEZapt, BPGEZnapn, BPGEZnapt, BPGZapn, BPGZapt, BPGZnapn, ...
    printOperand(MI, 1, STI, O); 
    break;
  case 3:
    // LDArr, LDSBArr, LDSHArr, LDUBArr, LDUHArr, SWAPArr
    O << ", "; 
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 4:
    // STArr, STBArr, STHArr
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 24) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC, ADDX...
    return;
    break;
  case 1:
    // FLCMPD, FLCMPS, FMOVD_ICC, FMOVD_XCC, FMOVQ_ICC, FMOVQ_XCC, FMOVS_ICC,...
    O << ", "; 
    break;
  case 2:
    // TICCri, TICCrr, TXCCri, TXCCrr
    O << " + "; 
    printOperand(MI, 1, STI, O); 
    return;
    break;
  case 3:
    // WRPSRri, WRPSRrr
    O << ", %psr"; 
    return;
    break;
  case 4:
    // WRTBRri, WRTBRrr
    O << ", %tbr"; 
    return;
    break;
  case 5:
    // WRWIMri, WRWIMrr
    O << ", %wim"; 
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 27) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // FLCMPD, FLCMPS, V9FCMPD, V9FCMPED, V9FCMPEQ, V9FCMPES, V9FCMPQ, V9FCMP...
    printOperand(MI, 2, STI, O); 
    return;
    break;
  case 1:
    // FMOVD_ICC, FMOVD_XCC, FMOVQ_ICC, FMOVQ_XCC, FMOVS_ICC, FMOVS_XCC, MOVI...
    printOperand(MI, 0, STI, O); 
    return;
    break;
  case 2:
    // TLS_ADDXrr, TLS_ADDrr, TLS_LDXrr, TLS_LDrr
    printOperand(MI, 3, STI, O); 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SparcInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 153 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'F', '1', '0', 0,
  /* 4 */ 'A', 'S', 'R', '1', '0', 0,
  /* 10 */ 'F', '2', '0', 0,
  /* 14 */ 'A', 'S', 'R', '2', '0', 0,
  /* 20 */ 'F', '3', '0', 0,
  /* 24 */ 'A', 'S', 'R', '3', '0', 0,
  /* 30 */ 'F', '4', '0', 0,
  /* 34 */ 'F', '5', '0', 0,
  /* 38 */ 'F', '6', '0', 0,
  /* 42 */ 'F', 'C', 'C', '0', 0,
  /* 47 */ 'F', '0', 0,
  /* 50 */ 'G', '0', 0,
  /* 53 */ 'I', '0', 0,
  /* 56 */ 'L', '0', 0,
  /* 59 */ 'O', '0', 0,
  /* 62 */ 'F', '1', '1', 0,
  /* 66 */ 'A', 'S', 'R', '1', '1', 0,
  /* 72 */ 'F', '2', '1', 0,
  /* 76 */ 'A', 'S', 'R', '2', '1', 0,
  /* 82 */ 'F', '3', '1', 0,
  /* 86 */ 'A', 'S', 'R', '3', '1', 0,
  /* 92 */ 'F', 'C', 'C', '1', 0,
  /* 97 */ 'F', '1', 0,
  /* 100 */ 'G', '1', 0,
  /* 103 */ 'I', '1', 0,
  /* 106 */ 'L', '1', 0,
  /* 109 */ 'O', '1', 0,
  /* 112 */ 'A', 'S', 'R', '1', 0,
  /* 117 */ 'F', '1', '2', 0,
  /* 121 */ 'A', 'S', 'R', '1', '2', 0,
  /* 127 */ 'F', '2', '2', 0,
  /* 131 */ 'A', 'S', 'R', '2', '2', 0,
  /* 137 */ 'F', '3', '2', 0,
  /* 141 */ 'F', '4', '2', 0,
  /* 145 */ 'F', '5', '2', 0,
  /* 149 */ 'F', '6', '2', 0,
  /* 153 */ 'F', 'C', 'C', '2', 0,
  /* 158 */ 'F', '2', 0,
  /* 161 */ 'G', '2', 0,
  /* 164 */ 'I', '2', 0,
  /* 167 */ 'L', '2', 0,
  /* 170 */ 'O', '2', 0,
  /* 173 */ 'A', 'S', 'R', '2', 0,
  /* 178 */ 'F', '1', '3', 0,
  /* 182 */ 'A', 'S', 'R', '1', '3', 0,
  /* 188 */ 'F', '2', '3', 0,
  /* 192 */ 'A', 'S', 'R', '2', '3', 0,
  /* 198 */ 'F', 'C', 'C', '3', 0,
  /* 203 */ 'F', '3', 0,
  /* 206 */ 'G', '3', 0,
  /* 209 */ 'I', '3', 0,
  /* 212 */ 'L', '3', 0,
  /* 215 */ 'O', '3', 0,
  /* 218 */ 'A', 'S', 'R', '3', 0,
  /* 223 */ 'F', '1', '4', 0,
  /* 227 */ 'A', 'S', 'R', '1', '4', 0,
  /* 233 */ 'F', '2', '4', 0,
  /* 237 */ 'A', 'S', 'R', '2', '4', 0,
  /* 243 */ 'F', '3', '4', 0,
  /* 247 */ 'F', '4', '4', 0,
  /* 251 */ 'F', '5', '4', 0,
  /* 255 */ 'F', '4', 0,
  /* 258 */ 'G', '4', 0,
  /* 261 */ 'I', '4', 0,
  /* 264 */ 'L', '4', 0,
  /* 267 */ 'O', '4', 0,
  /* 270 */ 'A', 'S', 'R', '4', 0,
  /* 275 */ 'F', '1', '5', 0,
  /* 279 */ 'A', 'S', 'R', '1', '5', 0,
  /* 285 */ 'F', '2', '5', 0,
  /* 289 */ 'A', 'S', 'R', '2', '5', 0,
  /* 295 */ 'F', '5', 0,
  /* 298 */ 'G', '5', 0,
  /* 301 */ 'I', '5', 0,
  /* 304 */ 'L', '5', 0,
  /* 307 */ 'O', '5', 0,
  /* 310 */ 'A', 'S', 'R', '5', 0,
  /* 315 */ 'F', '1', '6', 0,
  /* 319 */ 'A', 'S', 'R', '1', '6', 0,
  /* 325 */ 'F', '2', '6', 0,
  /* 329 */ 'A', 'S', 'R', '2', '6', 0,
  /* 335 */ 'F', '3', '6', 0,
  /* 339 */ 'F', '4', '6', 0,
  /* 343 */ 'F', '5', '6', 0,
  /* 347 */ 'F', '6', 0,
  /* 350 */ 'G', '6', 0,
  /* 353 */ 'L', '6', 0,
  /* 356 */ 'A', 'S', 'R', '6', 0,
  /* 361 */ 'F', '1', '7', 0,
  /* 365 */ 'A', 'S', 'R', '1', '7', 0,
  /* 371 */ 'F', '2', '7', 0,
  /* 375 */ 'A', 'S', 'R', '2', '7', 0,
  /* 381 */ 'F', '7', 0,
  /* 384 */ 'G', '7', 0,
  /* 387 */ 'I', '7', 0,
  /* 390 */ 'L', '7', 0,
  /* 393 */ 'O', '7', 0,
  /* 396 */ 'A', 'S', 'R', '7', 0,
  /* 401 */ 'F', '1', '8', 0,
  /* 405 */ 'A', 'S', 'R', '1', '8', 0,
  /* 411 */ 'F', '2', '8', 0,
  /* 415 */ 'A', 'S', 'R', '2', '8', 0,
  /* 421 */ 'F', '3', '8', 0,
  /* 425 */ 'F', '4', '8', 0,
  /* 429 */ 'F', '5', '8', 0,
  /* 433 */ 'F', '8', 0,
  /* 436 */ 'A', 'S', 'R', '8', 0,
  /* 441 */ 'F', '1', '9', 0,
  /* 445 */ 'A', 'S', 'R', '1', '9', 0,
  /* 451 */ 'F', '2', '9', 0,
  /* 455 */ 'A', 'S', 'R', '2', '9', 0,
  /* 461 */ 'F', '9', 0,
  /* 464 */ 'A', 'S', 'R', '9', 0,
  /* 469 */ 'I', 'C', 'C', 0,
  /* 473 */ 'W', 'I', 'M', 0,
  /* 477 */ 'F', 'P', 0,
  /* 480 */ 'S', 'P', 0,
  /* 483 */ 'T', 'B', 'R', 0,
  /* 487 */ 'P', 'S', 'R', 0,
  /* 491 */ 'Y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    469, 487, 483, 473, 491, 112, 173, 218, 270, 310, 356, 396, 436, 464, 
    4, 66, 121, 182, 227, 279, 319, 365, 405, 445, 14, 76, 131, 192, 
    237, 289, 329, 375, 415, 455, 24, 86, 47, 158, 255, 347, 433, 0, 
    117, 223, 315, 401, 10, 127, 233, 325, 411, 20, 137, 243, 335, 421, 
    30, 141, 247, 339, 425, 34, 145, 251, 343, 429, 38, 149, 47, 97, 
    158, 203, 255, 295, 347, 381, 433, 461, 0, 62, 117, 178, 223, 275, 
    315, 361, 401, 441, 10, 72, 127, 188, 233, 285, 325, 371, 411, 451, 
    20, 82, 42, 92, 153, 198, 50, 100, 161, 206, 258, 298, 350, 384, 
    53, 103, 164, 209, 261, 301, 477, 387, 56, 106, 167, 212, 264, 304, 
    353, 390, 59, 109, 170, 215, 267, 307, 480, 393, 47, 255, 433, 117, 
    315, 10, 233, 411, 137, 335, 30, 247, 425, 145, 343, 38, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool SparcInstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case SP::BCOND:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BCOND brtarget:$imm, 0)
      AsmString = "bn $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 10) {
      // (BCOND brtarget:$imm, 10)
      AsmString = "bg $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2) {
      // (BCOND brtarget:$imm, 2)
      AsmString = "ble $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 11) {
      // (BCOND brtarget:$imm, 11)
      AsmString = "bge $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3) {
      // (BCOND brtarget:$imm, 3)
      AsmString = "bl $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 12) {
      // (BCOND brtarget:$imm, 12)
      AsmString = "bgu $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (BCOND brtarget:$imm, 4)
      AsmString = "bleu $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 14) {
      // (BCOND brtarget:$imm, 14)
      AsmString = "bpos $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 6) {
      // (BCOND brtarget:$imm, 6)
      AsmString = "bneg $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 15) {
      // (BCOND brtarget:$imm, 15)
      AsmString = "bvc $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 7) {
      // (BCOND brtarget:$imm, 7)
      AsmString = "bvs $\x01";
      break;
    }
    return false;
  case SP::BCONDA:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BCONDA brtarget:$imm, 0)
      AsmString = "bn,a $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 10) {
      // (BCONDA brtarget:$imm, 10)
      AsmString = "bg,a $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2) {
      // (BCONDA brtarget:$imm, 2)
      AsmString = "ble,a $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 11) {
      // (BCONDA brtarget:$imm, 11)
      AsmString = "bge,a $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3) {
      // (BCONDA brtarget:$imm, 3)
      AsmString = "bl,a $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 12) {
      // (BCONDA brtarget:$imm, 12)
      AsmString = "bgu,a $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (BCONDA brtarget:$imm, 4)
      AsmString = "bleu,a $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 14) {
      // (BCONDA brtarget:$imm, 14)
      AsmString = "bpos,a $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 6) {
      // (BCONDA brtarget:$imm, 6)
      AsmString = "bneg,a $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 15) {
      // (BCONDA brtarget:$imm, 15)
      AsmString = "bvc,a $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 7) {
      // (BCONDA brtarget:$imm, 7)
      AsmString = "bvs,a $\x01";
      break;
    }
    return false;
  case SP::BPFCCANT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 8 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 8, FCCRegs:$cc)
      AsmString = "fbn,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 7 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 7, FCCRegs:$cc)
      AsmString = "fbu,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 6 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 6, FCCRegs:$cc)
      AsmString = "fbg,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 5 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 5, FCCRegs:$cc)
      AsmString = "fbug,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 4, FCCRegs:$cc)
      AsmString = "fbl,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 3, FCCRegs:$cc)
      AsmString = "fbul,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 2, FCCRegs:$cc)
      AsmString = "fblg,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 10 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 10, FCCRegs:$cc)
      AsmString = "fbue,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 11 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 11, FCCRegs:$cc)
      AsmString = "fbge,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 12 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 12, FCCRegs:$cc)
      AsmString = "fbuge,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 13 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 13, FCCRegs:$cc)
      AsmString = "fble,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 14 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 14, FCCRegs:$cc)
      AsmString = "fbule,a,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 15 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCANT brtarget:$imm, 15, FCCRegs:$cc)
      AsmString = "fbo,a,pn $\x03, $\x01";
      break;
    }
    return false;
  case SP::BPFCCNT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 8 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 8, FCCRegs:$cc)
      AsmString = "fbn,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 7 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 7, FCCRegs:$cc)
      AsmString = "fbu,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 6 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 6, FCCRegs:$cc)
      AsmString = "fbg,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 5 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 5, FCCRegs:$cc)
      AsmString = "fbug,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 4, FCCRegs:$cc)
      AsmString = "fbl,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 3, FCCRegs:$cc)
      AsmString = "fbul,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 2, FCCRegs:$cc)
      AsmString = "fblg,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 10 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 10, FCCRegs:$cc)
      AsmString = "fbue,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 11 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 11, FCCRegs:$cc)
      AsmString = "fbge,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 12 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 12, FCCRegs:$cc)
      AsmString = "fbuge,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 13 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 13, FCCRegs:$cc)
      AsmString = "fble,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 14 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 14, FCCRegs:$cc)
      AsmString = "fbule,pn $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 15 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (BPFCCNT brtarget:$imm, 15, FCCRegs:$cc)
      AsmString = "fbo,pn $\x03, $\x01";
      break;
    }
    return false;
  case SP::BPICCANT:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BPICCANT brtarget:$imm, 0)
      AsmString = "bn,a,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 10) {
      // (BPICCANT brtarget:$imm, 10)
      AsmString = "bg,a,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2) {
      // (BPICCANT brtarget:$imm, 2)
      AsmString = "ble,a,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 11) {
      // (BPICCANT brtarget:$imm, 11)
      AsmString = "bge,a,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3) {
      // (BPICCANT brtarget:$imm, 3)
      AsmString = "bl,a,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 12) {
      // (BPICCANT brtarget:$imm, 12)
      AsmString = "bgu,a,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (BPICCANT brtarget:$imm, 4)
      AsmString = "bleu,a,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 14) {
      // (BPICCANT brtarget:$imm, 14)
      AsmString = "bpos,a,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 6) {
      // (BPICCANT brtarget:$imm, 6)
      AsmString = "bneg,a,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 15) {
      // (BPICCANT brtarget:$imm, 15)
      AsmString = "bvc,a,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 7) {
      // (BPICCANT brtarget:$imm, 7)
      AsmString = "bvs,a,pn %icc, $\x01";
      break;
    }
    return false;
  case SP::BPICCNT:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BPICCNT brtarget:$imm, 0)
      AsmString = "bn,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 10) {
      // (BPICCNT brtarget:$imm, 10)
      AsmString = "bg,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2) {
      // (BPICCNT brtarget:$imm, 2)
      AsmString = "ble,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 11) {
      // (BPICCNT brtarget:$imm, 11)
      AsmString = "bge,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3) {
      // (BPICCNT brtarget:$imm, 3)
      AsmString = "bl,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 12) {
      // (BPICCNT brtarget:$imm, 12)
      AsmString = "bgu,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (BPICCNT brtarget:$imm, 4)
      AsmString = "bleu,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 14) {
      // (BPICCNT brtarget:$imm, 14)
      AsmString = "bpos,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 6) {
      // (BPICCNT brtarget:$imm, 6)
      AsmString = "bneg,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 15) {
      // (BPICCNT brtarget:$imm, 15)
      AsmString = "bvc,pn %icc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 7) {
      // (BPICCNT brtarget:$imm, 7)
      AsmString = "bvs,pn %icc, $\x01";
      break;
    }
    return false;
  case SP::BPXCCANT:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BPXCCANT brtarget:$imm, 0)
      AsmString = "bn,a,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 10) {
      // (BPXCCANT brtarget:$imm, 10)
      AsmString = "bg,a,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2) {
      // (BPXCCANT brtarget:$imm, 2)
      AsmString = "ble,a,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 11) {
      // (BPXCCANT brtarget:$imm, 11)
      AsmString = "bge,a,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3) {
      // (BPXCCANT brtarget:$imm, 3)
      AsmString = "bl,a,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 12) {
      // (BPXCCANT brtarget:$imm, 12)
      AsmString = "bgu,a,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (BPXCCANT brtarget:$imm, 4)
      AsmString = "bleu,a,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 14) {
      // (BPXCCANT brtarget:$imm, 14)
      AsmString = "bpos,a,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 6) {
      // (BPXCCANT brtarget:$imm, 6)
      AsmString = "bneg,a,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 15) {
      // (BPXCCANT brtarget:$imm, 15)
      AsmString = "bvc,a,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 7) {
      // (BPXCCANT brtarget:$imm, 7)
      AsmString = "bvs,a,pn %xcc, $\x01";
      break;
    }
    return false;
  case SP::BPXCCNT:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BPXCCNT brtarget:$imm, 0)
      AsmString = "bn,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 10) {
      // (BPXCCNT brtarget:$imm, 10)
      AsmString = "bg,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2) {
      // (BPXCCNT brtarget:$imm, 2)
      AsmString = "ble,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 11) {
      // (BPXCCNT brtarget:$imm, 11)
      AsmString = "bge,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3) {
      // (BPXCCNT brtarget:$imm, 3)
      AsmString = "bl,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 12) {
      // (BPXCCNT brtarget:$imm, 12)
      AsmString = "bgu,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (BPXCCNT brtarget:$imm, 4)
      AsmString = "bleu,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 14) {
      // (BPXCCNT brtarget:$imm, 14)
      AsmString = "bpos,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 6) {
      // (BPXCCNT brtarget:$imm, 6)
      AsmString = "bneg,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 15) {
      // (BPXCCNT brtarget:$imm, 15)
      AsmString = "bvc,pn %xcc, $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 7) {
      // (BPXCCNT brtarget:$imm, 7)
      AsmString = "bvs,pn %xcc, $\x01";
      break;
    }
    return false;
  case SP::FMOVD_ICC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 0)
      AsmString = "fmovdn %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 10)
      AsmString = "fmovdg %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 2)
      AsmString = "fmovdle %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 11)
      AsmString = "fmovdge %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 3)
      AsmString = "fmovdl %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 12)
      AsmString = "fmovdgu %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 4)
      AsmString = "fmovdleu %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 14)
      AsmString = "fmovdpos %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 6)
      AsmString = "fmovdneg %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 15)
      AsmString = "fmovdvc %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 7)
      AsmString = "fmovdvs %icc, $\x02, $\x01";
      break;
    }
    return false;
  case SP::FMOVD_XCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 0)
      AsmString = "fmovdn %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 10)
      AsmString = "fmovdg %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 2)
      AsmString = "fmovdle %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 11)
      AsmString = "fmovdge %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 3)
      AsmString = "fmovdl %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 12)
      AsmString = "fmovdgu %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 4)
      AsmString = "fmovdleu %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 14)
      AsmString = "fmovdpos %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 6)
      AsmString = "fmovdneg %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 15)
      AsmString = "fmovdvc %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 7)
      AsmString = "fmovdvs %xcc, $\x02, $\x01";
      break;
    }
    return false;
  case SP::FMOVQ_ICC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 0)
      AsmString = "fmovqn %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 10)
      AsmString = "fmovqg %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 2)
      AsmString = "fmovqle %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 11)
      AsmString = "fmovqge %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 3)
      AsmString = "fmovql %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 12)
      AsmString = "fmovqgu %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 4)
      AsmString = "fmovqleu %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 14)
      AsmString = "fmovqpos %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 6)
      AsmString = "fmovqneg %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 15)
      AsmString = "fmovqvc %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 7)
      AsmString = "fmovqvs %icc, $\x02, $\x01";
      break;
    }
    return false;
  case SP::FMOVQ_XCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 0)
      AsmString = "fmovqn %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 10)
      AsmString = "fmovqg %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 2)
      AsmString = "fmovqle %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 11)
      AsmString = "fmovqge %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 3)
      AsmString = "fmovql %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 12)
      AsmString = "fmovqgu %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 4)
      AsmString = "fmovqleu %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 14)
      AsmString = "fmovqpos %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 6)
      AsmString = "fmovqneg %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 15)
      AsmString = "fmovqvc %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 7)
      AsmString = "fmovqvs %xcc, $\x02, $\x01";
      break;
    }
    return false;
  case SP::FMOVS_ICC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 0)
      AsmString = "fmovsn %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 10)
      AsmString = "fmovsg %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 2)
      AsmString = "fmovsle %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 11)
      AsmString = "fmovsge %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 3)
      AsmString = "fmovsl %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 12)
      AsmString = "fmovsgu %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 4)
      AsmString = "fmovsleu %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 14)
      AsmString = "fmovspos %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 6)
      AsmString = "fmovsneg %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 15)
      AsmString = "fmovsvc %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 7)
      AsmString = "fmovsvs %icc, $\x02, $\x01";
      break;
    }
    return false;
  case SP::FMOVS_XCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 0)
      AsmString = "fmovsn %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 10)
      AsmString = "fmovsg %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 2)
      AsmString = "fmovsle %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 11)
      AsmString = "fmovsge %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 3)
      AsmString = "fmovsl %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 12)
      AsmString = "fmovsgu %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 4)
      AsmString = "fmovsleu %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 14)
      AsmString = "fmovspos %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 6)
      AsmString = "fmovsneg %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 15)
      AsmString = "fmovsvc %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 7)
      AsmString = "fmovsvs %xcc, $\x02, $\x01";
      break;
    }
    return false;
  case SP::MOVICCri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 0)
      AsmString = "movn %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 10)
      AsmString = "movg %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 2)
      AsmString = "movle %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 11)
      AsmString = "movge %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 3)
      AsmString = "movl %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 12)
      AsmString = "movgu %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 4)
      AsmString = "movleu %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 14)
      AsmString = "movpos %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 6)
      AsmString = "movneg %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 15)
      AsmString = "movvc %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (MOVICCri IntRegs:$rd, i32imm:$simm11, 7)
      AsmString = "movvs %icc, $\x02, $\x01";
      break;
    }
    return false;
  case SP::MOVICCrr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 0)
      AsmString = "movn %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 10)
      AsmString = "movg %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 2)
      AsmString = "movle %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 11)
      AsmString = "movge %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 3)
      AsmString = "movl %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 12)
      AsmString = "movgu %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 4)
      AsmString = "movleu %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 14)
      AsmString = "movpos %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 6)
      AsmString = "movneg %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 15)
      AsmString = "movvc %icc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 7)
      AsmString = "movvs %icc, $\x02, $\x01";
      break;
    }
    return false;
  case SP::MOVXCCri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 0)
      AsmString = "movn %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 10)
      AsmString = "movg %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 2)
      AsmString = "movle %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 11)
      AsmString = "movge %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 3)
      AsmString = "movl %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 12)
      AsmString = "movgu %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 4)
      AsmString = "movleu %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 14)
      AsmString = "movpos %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 6)
      AsmString = "movneg %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 15)
      AsmString = "movvc %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 7)
      AsmString = "movvs %xcc, $\x02, $\x01";
      break;
    }
    return false;
  case SP::MOVXCCrr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 0)
      AsmString = "movn %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 10)
      AsmString = "movg %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 2)
      AsmString = "movle %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 11)
      AsmString = "movge %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 3)
      AsmString = "movl %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 12)
      AsmString = "movgu %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 4)
      AsmString = "movleu %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 14)
      AsmString = "movpos %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 6)
      AsmString = "movneg %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 15)
      AsmString = "movvc %xcc, $\x02, $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 7)
      AsmString = "movvs %xcc, $\x02, $\x01";
      break;
    }
    return false;
  case SP::ORCCrr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Sparc::G0) {
      // (ORCCrr G0, IntRegs:$rs2, G0)
      AsmString = "tst $\x02";
      break;
    }
    return false;
  case SP::ORri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Sparc::G0) {
      // (ORri IntRegs:$rd, G0, i32imm:$simm13)
      AsmString = "mov $\x03, $\x01";
      break;
    }
    return false;
  case SP::ORrr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Sparc::G0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORrr IntRegs:$rd, G0, IntRegs:$rs2)
      AsmString = "mov $\x03, $\x01";
      break;
    }
    return false;
  case SP::RESTORErr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).getReg() == Sparc::G0 &&
        MI->getOperand(2).getReg() == Sparc::G0) {
      // (RESTORErr G0, G0, G0)
      AsmString = "restore";
      break;
    }
    return false;
  case SP::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8) {
      // (RET 8)
      AsmString = "ret";
      break;
    }
    return false;
  case SP::RETL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8) {
      // (RETL 8)
      AsmString = "retl";
      break;
    }
    return false;
  case SP::SAVErr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).getReg() == Sparc::G0 &&
        MI->getOperand(2).getReg() == Sparc::G0) {
      // (SAVErr G0, G0, G0)
      AsmString = "save";
      break;
    }
    return false;
  case SP::TXCCri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 0)
      AsmString = "tn %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TXCCri G0, i32imm:$imm, 0)
      AsmString = "tn %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 10)
      AsmString = "tg %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (TXCCri G0, i32imm:$imm, 10)
      AsmString = "tg %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 2)
      AsmString = "tle %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (TXCCri G0, i32imm:$imm, 2)
      AsmString = "tle %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 11)
      AsmString = "tge %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (TXCCri G0, i32imm:$imm, 11)
      AsmString = "tge %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 3)
      AsmString = "tl %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (TXCCri G0, i32imm:$imm, 3)
      AsmString = "tl %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 12)
      AsmString = "tgu %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (TXCCri G0, i32imm:$imm, 12)
      AsmString = "tgu %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 4)
      AsmString = "tleu %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (TXCCri G0, i32imm:$imm, 4)
      AsmString = "tleu %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 14)
      AsmString = "tpos %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (TXCCri G0, i32imm:$imm, 14)
      AsmString = "tpos %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 6)
      AsmString = "tneg %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (TXCCri G0, i32imm:$imm, 6)
      AsmString = "tneg %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 15)
      AsmString = "tvc %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (TXCCri G0, i32imm:$imm, 15)
      AsmString = "tvc %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (TXCCri IntRegs:$rs1, i32imm:$imm, 7)
      AsmString = "tvs %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (TXCCri G0, i32imm:$imm, 7)
      AsmString = "tvs %xcc, $\x02";
      break;
    }
    return false;
  case SP::TXCCrr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 0)
      AsmString = "tn %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TXCCrr G0, IntRegs:$rs2, 0)
      AsmString = "tn %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 10)
      AsmString = "tg %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 10) {
      // (TXCCrr G0, IntRegs:$rs2, 10)
      AsmString = "tg %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 2)
      AsmString = "tle %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (TXCCrr G0, IntRegs:$rs2, 2)
      AsmString = "tle %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 11)
      AsmString = "tge %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 11) {
      // (TXCCrr G0, IntRegs:$rs2, 11)
      AsmString = "tge %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 3)
      AsmString = "tl %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (TXCCrr G0, IntRegs:$rs2, 3)
      AsmString = "tl %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 12)
      AsmString = "tgu %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 12) {
      // (TXCCrr G0, IntRegs:$rs2, 12)
      AsmString = "tgu %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 4)
      AsmString = "tleu %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 4) {
      // (TXCCrr G0, IntRegs:$rs2, 4)
      AsmString = "tleu %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 14)
      AsmString = "tpos %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 14) {
      // (TXCCrr G0, IntRegs:$rs2, 14)
      AsmString = "tpos %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 6)
      AsmString = "tneg %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 6) {
      // (TXCCrr G0, IntRegs:$rs2, 6)
      AsmString = "tneg %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 15)
      AsmString = "tvc %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 15) {
      // (TXCCrr G0, IntRegs:$rs2, 15)
      AsmString = "tvc %xcc, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 7)
      AsmString = "tvs %xcc, $\x01 + $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::G0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7) {
      // (TXCCrr G0, IntRegs:$rs2, 7)
      AsmString = "tvs %xcc, $\x02";
      break;
    }
    return false;
  case SP::V9FCMPD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V9FCMPD FCC0, DFPRegs:$rs1, DFPRegs:$rs2)
      AsmString = "fcmpd $\x02, $\x03";
      break;
    }
    return false;
  case SP::V9FCMPED:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V9FCMPED FCC0, DFPRegs:$rs1, DFPRegs:$rs2)
      AsmString = "fcmped $\x02, $\x03";
      break;
    }
    return false;
  case SP::V9FCMPEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V9FCMPEQ FCC0, QFPRegs:$rs1, QFPRegs:$rs2)
      AsmString = "fcmpeq $\x02, $\x03";
      break;
    }
    return false;
  case SP::V9FCMPES:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V9FCMPES FCC0, FPRegs:$rs1, FPRegs:$rs2)
      AsmString = "fcmpes $\x02, $\x03";
      break;
    }
    return false;
  case SP::V9FCMPQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V9FCMPQ FCC0, QFPRegs:$rs1, QFPRegs:$rs2)
      AsmString = "fcmpq $\x02, $\x03";
      break;
    }
    return false;
  case SP::V9FCMPS:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Sparc::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V9FCMPS FCC0, FPRegs:$rs1, FPRegs:$rs2)
      AsmString = "fcmps $\x02, $\x03";
      break;
    }
    return false;
  case SP::V9FMOVD_FCC:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 8)
      AsmString = "fmovdn $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 7)
      AsmString = "fmovdu $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 6)
      AsmString = "fmovdg $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 5)
      AsmString = "fmovdug $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 4)
      AsmString = "fmovdl $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 3)
      AsmString = "fmovdul $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 2)
      AsmString = "fmovdlg $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 10)
      AsmString = "fmovdue $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 11) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 11)
      AsmString = "fmovdge $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 12) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 12)
      AsmString = "fmovduge $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 13)
      AsmString = "fmovdle $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 14)
      AsmString = "fmovdule $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::DFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 15)
      AsmString = "fmovdo $\x02, $\x03, $\x01";
      break;
    }
    return false;
  case SP::V9FMOVQ_FCC:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 8)
      AsmString = "fmovqn $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 7)
      AsmString = "fmovqu $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 6)
      AsmString = "fmovqg $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 5)
      AsmString = "fmovqug $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 4)
      AsmString = "fmovql $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 3)
      AsmString = "fmovqul $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 2)
      AsmString = "fmovqlg $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 10)
      AsmString = "fmovque $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 11) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 11)
      AsmString = "fmovqge $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 12) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 12)
      AsmString = "fmovquge $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 13)
      AsmString = "fmovqle $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 14)
      AsmString = "fmovqule $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::QFPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 15)
      AsmString = "fmovqo $\x02, $\x03, $\x01";
      break;
    }
    return false;
  case SP::V9FMOVS_FCC:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 8)
      AsmString = "fmovsn $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 7)
      AsmString = "fmovsu $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 6)
      AsmString = "fmovsg $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 5)
      AsmString = "fmovsug $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 4)
      AsmString = "fmovsl $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 3)
      AsmString = "fmovsul $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 2)
      AsmString = "fmovslg $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 10)
      AsmString = "fmovsue $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 11) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 11)
      AsmString = "fmovsge $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 12) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 12)
      AsmString = "fmovsuge $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 13)
      AsmString = "fmovsle $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 14)
      AsmString = "fmovsule $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::FPRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 15)
      AsmString = "fmovso $\x02, $\x03, $\x01";
      break;
    }
    return false;
  case SP::V9MOVFCCri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 8)
      AsmString = "movn $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 7)
      AsmString = "movu $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 6)
      AsmString = "movg $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 5)
      AsmString = "movug $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 4)
      AsmString = "movl $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 3)
      AsmString = "movul $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 2)
      AsmString = "movlg $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 10)
      AsmString = "movue $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 11) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 11)
      AsmString = "movge $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 12) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 12)
      AsmString = "movuge $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 13)
      AsmString = "movle $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 14)
      AsmString = "movule $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 15)
      AsmString = "movo $\x02, $\x03, $\x01";
      break;
    }
    return false;
  case SP::V9MOVFCCrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 8)
      AsmString = "movn $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 7)
      AsmString = "movu $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 6)
      AsmString = "movg $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 5)
      AsmString = "movug $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 4)
      AsmString = "movl $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 3)
      AsmString = "movul $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 2)
      AsmString = "movlg $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 10)
      AsmString = "movue $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 11) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 11)
      AsmString = "movge $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 12) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 12)
      AsmString = "movuge $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 13)
      AsmString = "movle $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 14)
      AsmString = "movule $\x02, $\x03, $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Sparc::FCCRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Sparc::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 15)
      AsmString = "movo $\x02, $\x03, $\x01";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void SparcInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  llvm_unreachable("Unknown PrintMethod kind");
}

#endif // PRINT_ALIAS_INSTR
