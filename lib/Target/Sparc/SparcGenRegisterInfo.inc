/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register Enum Values                                                *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass SPMCRegisterClasses[];

namespace SP {
enum {
  NoRegister,
  ICC = 1,
  PSR = 2,
  TBR = 3,
  WIM = 4,
  Y = 5,
  ASR1 = 6,
  ASR2 = 7,
  ASR3 = 8,
  ASR4 = 9,
  ASR5 = 10,
  ASR6 = 11,
  ASR7 = 12,
  ASR8 = 13,
  ASR9 = 14,
  ASR10 = 15,
  ASR11 = 16,
  ASR12 = 17,
  ASR13 = 18,
  ASR14 = 19,
  ASR15 = 20,
  ASR16 = 21,
  ASR17 = 22,
  ASR18 = 23,
  ASR19 = 24,
  ASR20 = 25,
  ASR21 = 26,
  ASR22 = 27,
  ASR23 = 28,
  ASR24 = 29,
  ASR25 = 30,
  ASR26 = 31,
  ASR27 = 32,
  ASR28 = 33,
  ASR29 = 34,
  ASR30 = 35,
  ASR31 = 36,
  D0 = 37,
  D1 = 38,
  D2 = 39,
  D3 = 40,
  D4 = 41,
  D5 = 42,
  D6 = 43,
  D7 = 44,
  D8 = 45,
  D9 = 46,
  D10 = 47,
  D11 = 48,
  D12 = 49,
  D13 = 50,
  D14 = 51,
  D15 = 52,
  D16 = 53,
  D17 = 54,
  D18 = 55,
  D19 = 56,
  D20 = 57,
  D21 = 58,
  D22 = 59,
  D23 = 60,
  D24 = 61,
  D25 = 62,
  D26 = 63,
  D27 = 64,
  D28 = 65,
  D29 = 66,
  D30 = 67,
  D31 = 68,
  F0 = 69,
  F1 = 70,
  F2 = 71,
  F3 = 72,
  F4 = 73,
  F5 = 74,
  F6 = 75,
  F7 = 76,
  F8 = 77,
  F9 = 78,
  F10 = 79,
  F11 = 80,
  F12 = 81,
  F13 = 82,
  F14 = 83,
  F15 = 84,
  F16 = 85,
  F17 = 86,
  F18 = 87,
  F19 = 88,
  F20 = 89,
  F21 = 90,
  F22 = 91,
  F23 = 92,
  F24 = 93,
  F25 = 94,
  F26 = 95,
  F27 = 96,
  F28 = 97,
  F29 = 98,
  F30 = 99,
  F31 = 100,
  FCC0 = 101,
  FCC1 = 102,
  FCC2 = 103,
  FCC3 = 104,
  G0 = 105,
  G1 = 106,
  G2 = 107,
  G3 = 108,
  G4 = 109,
  G5 = 110,
  G6 = 111,
  G7 = 112,
  I0 = 113,
  I1 = 114,
  I2 = 115,
  I3 = 116,
  I4 = 117,
  I5 = 118,
  I6 = 119,
  I7 = 120,
  L0 = 121,
  L1 = 122,
  L2 = 123,
  L3 = 124,
  L4 = 125,
  L5 = 126,
  L6 = 127,
  L7 = 128,
  O0 = 129,
  O1 = 130,
  O2 = 131,
  O3 = 132,
  O4 = 133,
  O5 = 134,
  O6 = 135,
  O7 = 136,
  Q0 = 137,
  Q1 = 138,
  Q2 = 139,
  Q3 = 140,
  Q4 = 141,
  Q5 = 142,
  Q6 = 143,
  Q7 = 144,
  Q8 = 145,
  Q9 = 146,
  Q10 = 147,
  Q11 = 148,
  Q12 = 149,
  Q13 = 150,
  Q14 = 151,
  Q15 = 152,
  NUM_TARGET_REGS 	// 153
};
}

// Register classes
namespace SP {
enum {
  FCCRegsRegClassID = 0,
  ASRRegsRegClassID = 1,
  FPRegsRegClassID = 2,
  IntRegsRegClassID = 3,
  DFPRegsRegClassID = 4,
  I64RegsRegClassID = 5,
  DFPRegs_with_sub_evenRegClassID = 6,
  QFPRegsRegClassID = 7,
  QFPRegs_with_sub_evenRegClassID = 8,

  };
}

// Subregister indices
namespace SP {
enum {
  NoSubRegister,
  sub_even,	// 1
  sub_even64,	// 2
  sub_odd,	// 3
  sub_odd64,	// 4
  sub_odd64_then_sub_even,	// 5
  sub_odd64_then_sub_odd,	// 6
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* MC Register Information                                                    *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg SparcRegDiffLists[] = {
  /* 0 */ 65024, 1, 1, 1, 0,
  /* 5 */ 32, 1, 0,
  /* 8 */ 65436, 32, 1, 65504, 33, 1, 0,
  /* 15 */ 34, 1, 0,
  /* 18 */ 65437, 34, 1, 65502, 35, 1, 0,
  /* 25 */ 36, 1, 0,
  /* 28 */ 65438, 36, 1, 65500, 37, 1, 0,
  /* 35 */ 38, 1, 0,
  /* 38 */ 65439, 38, 1, 65498, 39, 1, 0,
  /* 45 */ 40, 1, 0,
  /* 48 */ 65440, 40, 1, 65496, 41, 1, 0,
  /* 55 */ 42, 1, 0,
  /* 58 */ 65441, 42, 1, 65494, 43, 1, 0,
  /* 65 */ 44, 1, 0,
  /* 68 */ 65442, 44, 1, 65492, 45, 1, 0,
  /* 75 */ 46, 1, 0,
  /* 78 */ 65443, 46, 1, 65490, 47, 1, 0,
  /* 85 */ 65314, 1, 0,
  /* 88 */ 65444, 1, 0,
  /* 91 */ 65445, 1, 0,
  /* 94 */ 65446, 1, 0,
  /* 97 */ 65447, 1, 0,
  /* 100 */ 65448, 1, 0,
  /* 103 */ 65449, 1, 0,
  /* 106 */ 65450, 1, 0,
  /* 109 */ 65451, 1, 0,
  /* 112 */ 65498, 1, 0,
  /* 115 */ 15, 0,
  /* 117 */ 84, 0,
  /* 119 */ 85, 0,
  /* 121 */ 86, 0,
  /* 123 */ 87, 0,
  /* 125 */ 88, 0,
  /* 127 */ 89, 0,
  /* 129 */ 90, 0,
  /* 131 */ 91, 0,
  /* 133 */ 65488, 92, 0,
  /* 136 */ 65489, 92, 0,
  /* 139 */ 65489, 93, 0,
  /* 142 */ 65490, 93, 0,
  /* 145 */ 65491, 93, 0,
  /* 148 */ 65491, 94, 0,
  /* 151 */ 65492, 94, 0,
  /* 154 */ 65493, 94, 0,
  /* 157 */ 65493, 95, 0,
  /* 160 */ 65494, 95, 0,
  /* 163 */ 65495, 95, 0,
  /* 166 */ 65495, 96, 0,
  /* 169 */ 65496, 96, 0,
  /* 172 */ 65497, 96, 0,
  /* 175 */ 65497, 97, 0,
  /* 178 */ 65498, 97, 0,
  /* 181 */ 65499, 97, 0,
  /* 184 */ 65499, 98, 0,
  /* 187 */ 65500, 98, 0,
  /* 190 */ 65501, 98, 0,
  /* 193 */ 65501, 99, 0,
  /* 196 */ 65502, 99, 0,
  /* 199 */ 65503, 99, 0,
  /* 202 */ 65503, 100, 0,
  /* 205 */ 65504, 100, 0,
  /* 208 */ 65503, 0,
  /* 210 */ 65519, 0,
  /* 212 */ 65535, 0,
};

extern const unsigned SparcLaneMaskLists[] = {
  /* 0 */ 0x00000000, ~0u,
  /* 2 */ 0x00000001, 0x00000002, ~0u,
  /* 5 */ 0x00000001, 0x00000002, 0x00000004, 0x00000008, ~0u,
  /* 10 */ 0x00000003, 0x0000000C, ~0u,
};

extern const uint16_t SparcSubRegIdxLists[] = {
  /* 0 */ 1, 3, 0,
  /* 3 */ 2, 4, 0,
  /* 6 */ 2, 1, 3, 4, 5, 6, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits SparcSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 32 },	// sub_even
  { 0, 64 },	// sub_even64
  { 32, 32 },	// sub_odd
  { 64, 64 },	// sub_odd64
  { 64, 32 },	// sub_odd64_then_sub_even
  { 96, 32 },	// sub_odd64_then_sub_odd
};

extern const char SparcRegStrings[] = {
  /* 0 */ 'D', '1', '0', 0,
  /* 4 */ 'F', '1', '0', 0,
  /* 8 */ 'Q', '1', '0', 0,
  /* 12 */ 'A', 'S', 'R', '1', '0', 0,
  /* 18 */ 'D', '2', '0', 0,
  /* 22 */ 'F', '2', '0', 0,
  /* 26 */ 'A', 'S', 'R', '2', '0', 0,
  /* 32 */ 'D', '3', '0', 0,
  /* 36 */ 'F', '3', '0', 0,
  /* 40 */ 'A', 'S', 'R', '3', '0', 0,
  /* 46 */ 'F', 'C', 'C', '0', 0,
  /* 51 */ 'D', '0', 0,
  /* 54 */ 'F', '0', 0,
  /* 57 */ 'G', '0', 0,
  /* 60 */ 'I', '0', 0,
  /* 63 */ 'L', '0', 0,
  /* 66 */ 'O', '0', 0,
  /* 69 */ 'Q', '0', 0,
  /* 72 */ 'D', '1', '1', 0,
  /* 76 */ 'F', '1', '1', 0,
  /* 80 */ 'Q', '1', '1', 0,
  /* 84 */ 'A', 'S', 'R', '1', '1', 0,
  /* 90 */ 'D', '2', '1', 0,
  /* 94 */ 'F', '2', '1', 0,
  /* 98 */ 'A', 'S', 'R', '2', '1', 0,
  /* 104 */ 'D', '3', '1', 0,
  /* 108 */ 'F', '3', '1', 0,
  /* 112 */ 'A', 'S', 'R', '3', '1', 0,
  /* 118 */ 'F', 'C', 'C', '1', 0,
  /* 123 */ 'D', '1', 0,
  /* 126 */ 'F', '1', 0,
  /* 129 */ 'G', '1', 0,
  /* 132 */ 'I', '1', 0,
  /* 135 */ 'L', '1', 0,
  /* 138 */ 'O', '1', 0,
  /* 141 */ 'Q', '1', 0,
  /* 144 */ 'A', 'S', 'R', '1', 0,
  /* 149 */ 'D', '1', '2', 0,
  /* 153 */ 'F', '1', '2', 0,
  /* 157 */ 'Q', '1', '2', 0,
  /* 161 */ 'A', 'S', 'R', '1', '2', 0,
  /* 167 */ 'D', '2', '2', 0,
  /* 171 */ 'F', '2', '2', 0,
  /* 175 */ 'A', 'S', 'R', '2', '2', 0,
  /* 181 */ 'F', 'C', 'C', '2', 0,
  /* 186 */ 'D', '2', 0,
  /* 189 */ 'F', '2', 0,
  /* 192 */ 'G', '2', 0,
  /* 195 */ 'I', '2', 0,
  /* 198 */ 'L', '2', 0,
  /* 201 */ 'O', '2', 0,
  /* 204 */ 'Q', '2', 0,
  /* 207 */ 'A', 'S', 'R', '2', 0,
  /* 212 */ 'D', '1', '3', 0,
  /* 216 */ 'F', '1', '3', 0,
  /* 220 */ 'Q', '1', '3', 0,
  /* 224 */ 'A', 'S', 'R', '1', '3', 0,
  /* 230 */ 'D', '2', '3', 0,
  /* 234 */ 'F', '2', '3', 0,
  /* 238 */ 'A', 'S', 'R', '2', '3', 0,
  /* 244 */ 'F', 'C', 'C', '3', 0,
  /* 249 */ 'D', '3', 0,
  /* 252 */ 'F', '3', 0,
  /* 255 */ 'G', '3', 0,
  /* 258 */ 'I', '3', 0,
  /* 261 */ 'L', '3', 0,
  /* 264 */ 'O', '3', 0,
  /* 267 */ 'Q', '3', 0,
  /* 270 */ 'A', 'S', 'R', '3', 0,
  /* 275 */ 'D', '1', '4', 0,
  /* 279 */ 'F', '1', '4', 0,
  /* 283 */ 'Q', '1', '4', 0,
  /* 287 */ 'A', 'S', 'R', '1', '4', 0,
  /* 293 */ 'D', '2', '4', 0,
  /* 297 */ 'F', '2', '4', 0,
  /* 301 */ 'A', 'S', 'R', '2', '4', 0,
  /* 307 */ 'D', '4', 0,
  /* 310 */ 'F', '4', 0,
  /* 313 */ 'G', '4', 0,
  /* 316 */ 'I', '4', 0,
  /* 319 */ 'L', '4', 0,
  /* 322 */ 'O', '4', 0,
  /* 325 */ 'Q', '4', 0,
  /* 328 */ 'A', 'S', 'R', '4', 0,
  /* 333 */ 'D', '1', '5', 0,
  /* 337 */ 'F', '1', '5', 0,
  /* 341 */ 'Q', '1', '5', 0,
  /* 345 */ 'A', 'S', 'R', '1', '5', 0,
  /* 351 */ 'D', '2', '5', 0,
  /* 355 */ 'F', '2', '5', 0,
  /* 359 */ 'A', 'S', 'R', '2', '5', 0,
  /* 365 */ 'D', '5', 0,
  /* 368 */ 'F', '5', 0,
  /* 371 */ 'G', '5', 0,
  /* 374 */ 'I', '5', 0,
  /* 377 */ 'L', '5', 0,
  /* 380 */ 'O', '5', 0,
  /* 383 */ 'Q', '5', 0,
  /* 386 */ 'A', 'S', 'R', '5', 0,
  /* 391 */ 'D', '1', '6', 0,
  /* 395 */ 'F', '1', '6', 0,
  /* 399 */ 'A', 'S', 'R', '1', '6', 0,
  /* 405 */ 'D', '2', '6', 0,
  /* 409 */ 'F', '2', '6', 0,
  /* 413 */ 'A', 'S', 'R', '2', '6', 0,
  /* 419 */ 'D', '6', 0,
  /* 422 */ 'F', '6', 0,
  /* 425 */ 'G', '6', 0,
  /* 428 */ 'I', '6', 0,
  /* 431 */ 'L', '6', 0,
  /* 434 */ 'O', '6', 0,
  /* 437 */ 'Q', '6', 0,
  /* 440 */ 'A', 'S', 'R', '6', 0,
  /* 445 */ 'D', '1', '7', 0,
  /* 449 */ 'F', '1', '7', 0,
  /* 453 */ 'A', 'S', 'R', '1', '7', 0,
  /* 459 */ 'D', '2', '7', 0,
  /* 463 */ 'F', '2', '7', 0,
  /* 467 */ 'A', 'S', 'R', '2', '7', 0,
  /* 473 */ 'D', '7', 0,
  /* 476 */ 'F', '7', 0,
  /* 479 */ 'G', '7', 0,
  /* 482 */ 'I', '7', 0,
  /* 485 */ 'L', '7', 0,
  /* 488 */ 'O', '7', 0,
  /* 491 */ 'Q', '7', 0,
  /* 494 */ 'A', 'S', 'R', '7', 0,
  /* 499 */ 'D', '1', '8', 0,
  /* 503 */ 'F', '1', '8', 0,
  /* 507 */ 'A', 'S', 'R', '1', '8', 0,
  /* 513 */ 'D', '2', '8', 0,
  /* 517 */ 'F', '2', '8', 0,
  /* 521 */ 'A', 'S', 'R', '2', '8', 0,
  /* 527 */ 'D', '8', 0,
  /* 530 */ 'F', '8', 0,
  /* 533 */ 'Q', '8', 0,
  /* 536 */ 'A', 'S', 'R', '8', 0,
  /* 541 */ 'D', '1', '9', 0,
  /* 545 */ 'F', '1', '9', 0,
  /* 549 */ 'A', 'S', 'R', '1', '9', 0,
  /* 555 */ 'D', '2', '9', 0,
  /* 559 */ 'F', '2', '9', 0,
  /* 563 */ 'A', 'S', 'R', '2', '9', 0,
  /* 569 */ 'D', '9', 0,
  /* 572 */ 'F', '9', 0,
  /* 575 */ 'Q', '9', 0,
  /* 578 */ 'A', 'S', 'R', '9', 0,
  /* 583 */ 'I', 'C', 'C', 0,
  /* 587 */ 'W', 'I', 'M', 0,
  /* 591 */ 'T', 'B', 'R', 0,
  /* 595 */ 'P', 'S', 'R', 0,
  /* 599 */ 'Y', 0,
};

extern const MCRegisterDesc SparcRegDesc[] = { // Descriptors
  { 3, 0, 0, 0, 0, 0 },
  { 583, 4, 4, 2, 3393, 0 },
  { 595, 4, 4, 2, 3393, 0 },
  { 591, 4, 4, 2, 3393, 0 },
  { 587, 4, 4, 2, 3393, 0 },
  { 599, 4, 4, 2, 3393, 0 },
  { 144, 4, 4, 2, 3393, 0 },
  { 207, 4, 4, 2, 3393, 0 },
  { 270, 4, 4, 2, 3393, 0 },
  { 328, 4, 4, 2, 3393, 0 },
  { 386, 4, 4, 2, 3393, 0 },
  { 440, 4, 4, 2, 3393, 0 },
  { 494, 4, 4, 2, 3393, 0 },
  { 536, 4, 4, 2, 3393, 0 },
  { 578, 4, 4, 2, 3393, 0 },
  { 12, 4, 4, 2, 3393, 0 },
  { 84, 4, 4, 2, 3393, 0 },
  { 161, 4, 4, 2, 3393, 0 },
  { 224, 4, 4, 2, 3393, 0 },
  { 287, 4, 4, 2, 3393, 0 },
  { 345, 4, 4, 2, 3393, 0 },
  { 399, 4, 4, 2, 3393, 0 },
  { 453, 4, 4, 2, 3393, 0 },
  { 507, 4, 4, 2, 3393, 0 },
  { 549, 4, 4, 2, 3393, 0 },
  { 26, 4, 4, 2, 3393, 0 },
  { 98, 4, 4, 2, 3393, 0 },
  { 175, 4, 4, 2, 3393, 0 },
  { 238, 4, 4, 2, 3393, 0 },
  { 301, 4, 4, 2, 3393, 0 },
  { 359, 4, 4, 2, 3393, 0 },
  { 413, 4, 4, 2, 3393, 0 },
  { 467, 4, 4, 2, 3393, 0 },
  { 521, 4, 4, 2, 3393, 0 },
  { 563, 4, 4, 2, 3393, 0 },
  { 40, 4, 4, 2, 3393, 0 },
  { 112, 4, 4, 2, 3393, 0 },
  { 51, 5, 203, 0, 1794, 2 },
  { 123, 12, 194, 0, 1794, 2 },
  { 186, 15, 194, 0, 1794, 2 },
  { 249, 22, 185, 0, 1794, 2 },
  { 307, 25, 185, 0, 1794, 2 },
  { 365, 32, 176, 0, 1794, 2 },
  { 419, 35, 176, 0, 1794, 2 },
  { 473, 42, 167, 0, 1794, 2 },
  { 527, 45, 167, 0, 1794, 2 },
  { 569, 52, 158, 0, 1794, 2 },
  { 0, 55, 158, 0, 1794, 2 },
  { 72, 62, 149, 0, 1794, 2 },
  { 149, 65, 149, 0, 1794, 2 },
  { 212, 72, 140, 0, 1794, 2 },
  { 275, 75, 140, 0, 1794, 2 },
  { 333, 82, 134, 0, 1794, 2 },
  { 391, 4, 134, 2, 1841, 0 },
  { 445, 4, 131, 2, 1841, 0 },
  { 499, 4, 131, 2, 1841, 0 },
  { 541, 4, 129, 2, 1841, 0 },
  { 18, 4, 129, 2, 1841, 0 },
  { 90, 4, 127, 2, 1841, 0 },
  { 167, 4, 127, 2, 1841, 0 },
  { 230, 4, 125, 2, 1841, 0 },
  { 293, 4, 125, 2, 1841, 0 },
  { 351, 4, 123, 2, 1841, 0 },
  { 405, 4, 123, 2, 1841, 0 },
  { 459, 4, 121, 2, 1841, 0 },
  { 513, 4, 121, 2, 1841, 0 },
  { 555, 4, 119, 2, 1841, 0 },
  { 32, 4, 119, 2, 1841, 0 },
  { 104, 4, 117, 2, 1841, 0 },
  { 54, 4, 205, 2, 3329, 0 },
  { 126, 4, 202, 2, 3329, 0 },
  { 189, 4, 199, 2, 3329, 0 },
  { 252, 4, 196, 2, 3329, 0 },
  { 310, 4, 196, 2, 3329, 0 },
  { 368, 4, 193, 2, 3329, 0 },
  { 422, 4, 190, 2, 3329, 0 },
  { 476, 4, 187, 2, 3329, 0 },
  { 530, 4, 187, 2, 3329, 0 },
  { 572, 4, 184, 2, 3329, 0 },
  { 4, 4, 181, 2, 3329, 0 },
  { 76, 4, 178, 2, 3329, 0 },
  { 153, 4, 178, 2, 3329, 0 },
  { 216, 4, 175, 2, 3329, 0 },
  { 279, 4, 172, 2, 3329, 0 },
  { 337, 4, 169, 2, 3329, 0 },
  { 395, 4, 169, 2, 3329, 0 },
  { 449, 4, 166, 2, 3329, 0 },
  { 503, 4, 163, 2, 3329, 0 },
  { 545, 4, 160, 2, 3329, 0 },
  { 22, 4, 160, 2, 3329, 0 },
  { 94, 4, 157, 2, 3329, 0 },
  { 171, 4, 154, 2, 3329, 0 },
  { 234, 4, 151, 2, 3329, 0 },
  { 297, 4, 151, 2, 3329, 0 },
  { 355, 4, 148, 2, 3329, 0 },
  { 409, 4, 145, 2, 3329, 0 },
  { 463, 4, 142, 2, 3329, 0 },
  { 517, 4, 142, 2, 3329, 0 },
  { 559, 4, 139, 2, 3329, 0 },
  { 36, 4, 136, 2, 3329, 0 },
  { 108, 4, 133, 2, 3329, 0 },
  { 46, 4, 4, 2, 3361, 0 },
  { 118, 4, 4, 2, 3361, 0 },
  { 181, 4, 4, 2, 3361, 0 },
  { 244, 4, 4, 2, 3361, 0 },
  { 57, 4, 4, 2, 3361, 0 },
  { 129, 4, 4, 2, 3361, 0 },
  { 192, 4, 4, 2, 3361, 0 },
  { 255, 4, 4, 2, 3361, 0 },
  { 313, 4, 4, 2, 3361, 0 },
  { 371, 4, 4, 2, 3361, 0 },
  { 425, 4, 4, 2, 3361, 0 },
  { 479, 4, 4, 2, 3361, 0 },
  { 60, 4, 4, 2, 3361, 0 },
  { 132, 4, 4, 2, 3361, 0 },
  { 195, 4, 4, 2, 3361, 0 },
  { 258, 4, 4, 2, 3361, 0 },
  { 316, 4, 4, 2, 3361, 0 },
  { 374, 4, 4, 2, 3361, 0 },
  { 428, 4, 4, 2, 3361, 0 },
  { 482, 4, 4, 2, 3361, 0 },
  { 63, 4, 4, 2, 3361, 0 },
  { 135, 4, 4, 2, 3361, 0 },
  { 198, 4, 4, 2, 3361, 0 },
  { 261, 4, 4, 2, 3361, 0 },
  { 319, 4, 4, 2, 3361, 0 },
  { 377, 4, 4, 2, 3361, 0 },
  { 431, 4, 4, 2, 3361, 0 },
  { 485, 4, 4, 2, 3361, 0 },
  { 66, 4, 4, 2, 3361, 0 },
  { 138, 4, 4, 2, 3361, 0 },
  { 201, 4, 4, 2, 3361, 0 },
  { 264, 4, 4, 2, 3361, 0 },
  { 322, 4, 4, 2, 3361, 0 },
  { 380, 4, 4, 2, 3361, 0 },
  { 434, 4, 4, 2, 3361, 0 },
  { 488, 4, 4, 2, 3361, 0 },
  { 69, 8, 4, 6, 4, 5 },
  { 141, 18, 4, 6, 4, 5 },
  { 204, 28, 4, 6, 4, 5 },
  { 267, 38, 4, 6, 4, 5 },
  { 325, 48, 4, 6, 4, 5 },
  { 383, 58, 4, 6, 4, 5 },
  { 437, 68, 4, 6, 4, 5 },
  { 491, 78, 4, 6, 4, 5 },
  { 533, 88, 4, 3, 1362, 10 },
  { 575, 91, 4, 3, 1362, 10 },
  { 8, 94, 4, 3, 1362, 10 },
  { 80, 97, 4, 3, 1362, 10 },
  { 157, 100, 4, 3, 1362, 10 },
  { 220, 103, 4, 3, 1362, 10 },
  { 283, 106, 4, 3, 1362, 10 },
  { 341, 109, 4, 3, 1362, 10 },
};

extern const MCPhysReg SparcRegUnitRoots[][2] = {
  { SP::ICC },
  { SP::PSR },
  { SP::TBR },
  { SP::WIM },
  { SP::Y },
  { SP::ASR1 },
  { SP::ASR2 },
  { SP::ASR3 },
  { SP::ASR4 },
  { SP::ASR5 },
  { SP::ASR6 },
  { SP::ASR7 },
  { SP::ASR8 },
  { SP::ASR9 },
  { SP::ASR10 },
  { SP::ASR11 },
  { SP::ASR12 },
  { SP::ASR13 },
  { SP::ASR14 },
  { SP::ASR15 },
  { SP::ASR16 },
  { SP::ASR17 },
  { SP::ASR18 },
  { SP::ASR19 },
  { SP::ASR20 },
  { SP::ASR21 },
  { SP::ASR22 },
  { SP::ASR23 },
  { SP::ASR24 },
  { SP::ASR25 },
  { SP::ASR26 },
  { SP::ASR27 },
  { SP::ASR28 },
  { SP::ASR29 },
  { SP::ASR30 },
  { SP::ASR31 },
  { SP::F0 },
  { SP::F1 },
  { SP::F2 },
  { SP::F3 },
  { SP::F4 },
  { SP::F5 },
  { SP::F6 },
  { SP::F7 },
  { SP::F8 },
  { SP::F9 },
  { SP::F10 },
  { SP::F11 },
  { SP::F12 },
  { SP::F13 },
  { SP::F14 },
  { SP::F15 },
  { SP::F16 },
  { SP::F17 },
  { SP::F18 },
  { SP::F19 },
  { SP::F20 },
  { SP::F21 },
  { SP::F22 },
  { SP::F23 },
  { SP::F24 },
  { SP::F25 },
  { SP::F26 },
  { SP::F27 },
  { SP::F28 },
  { SP::F29 },
  { SP::F30 },
  { SP::F31 },
  { SP::D16 },
  { SP::D17 },
  { SP::D18 },
  { SP::D19 },
  { SP::D20 },
  { SP::D21 },
  { SP::D22 },
  { SP::D23 },
  { SP::D24 },
  { SP::D25 },
  { SP::D26 },
  { SP::D27 },
  { SP::D28 },
  { SP::D29 },
  { SP::D30 },
  { SP::D31 },
  { SP::FCC0 },
  { SP::FCC1 },
  { SP::FCC2 },
  { SP::FCC3 },
  { SP::G0 },
  { SP::G1 },
  { SP::G2 },
  { SP::G3 },
  { SP::G4 },
  { SP::G5 },
  { SP::G6 },
  { SP::G7 },
  { SP::I0 },
  { SP::I1 },
  { SP::I2 },
  { SP::I3 },
  { SP::I4 },
  { SP::I5 },
  { SP::I6 },
  { SP::I7 },
  { SP::L0 },
  { SP::L1 },
  { SP::L2 },
  { SP::L3 },
  { SP::L4 },
  { SP::L5 },
  { SP::L6 },
  { SP::L7 },
  { SP::O0 },
  { SP::O1 },
  { SP::O2 },
  { SP::O3 },
  { SP::O4 },
  { SP::O5 },
  { SP::O6 },
  { SP::O7 },
};

namespace {     // Register classes...
  // FCCRegs Register Class...
  const MCPhysReg FCCRegs[] = {
    SP::FCC0, SP::FCC1, SP::FCC2, SP::FCC3, 
  };

  // FCCRegs Bit set.
  const uint8_t FCCRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 
  };

  // ASRRegs Register Class...
  const MCPhysReg ASRRegs[] = {
    SP::Y, SP::ASR1, SP::ASR2, SP::ASR3, SP::ASR4, SP::ASR5, SP::ASR6, SP::ASR7, SP::ASR8, SP::ASR9, SP::ASR10, SP::ASR11, SP::ASR12, SP::ASR13, SP::ASR14, SP::ASR15, SP::ASR16, SP::ASR17, SP::ASR18, SP::ASR19, SP::ASR20, SP::ASR21, SP::ASR22, SP::ASR23, SP::ASR24, SP::ASR25, SP::ASR26, SP::ASR27, SP::ASR28, SP::ASR29, SP::ASR30, SP::ASR31, 
  };

  // ASRRegs Bit set.
  const uint8_t ASRRegsBits[] = {
    0xe0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // FPRegs Register Class...
  const MCPhysReg FPRegs[] = {
    SP::F0, SP::F1, SP::F2, SP::F3, SP::F4, SP::F5, SP::F6, SP::F7, SP::F8, SP::F9, SP::F10, SP::F11, SP::F12, SP::F13, SP::F14, SP::F15, SP::F16, SP::F17, SP::F18, SP::F19, SP::F20, SP::F21, SP::F22, SP::F23, SP::F24, SP::F25, SP::F26, SP::F27, SP::F28, SP::F29, SP::F30, SP::F31, 
  };

  // FPRegs Bit set.
  const uint8_t FPRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // IntRegs Register Class...
  const MCPhysReg IntRegs[] = {
    SP::I0, SP::I1, SP::I2, SP::I3, SP::I4, SP::I5, SP::I6, SP::I7, SP::G0, SP::G1, SP::G2, SP::G3, SP::G4, SP::G5, SP::G6, SP::G7, SP::L0, SP::L1, SP::L2, SP::L3, SP::L4, SP::L5, SP::L6, SP::L7, SP::O0, SP::O1, SP::O2, SP::O3, SP::O4, SP::O5, SP::O6, SP::O7, 
  };

  // IntRegs Bit set.
  const uint8_t IntRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 
  };

  // DFPRegs Register Class...
  const MCPhysReg DFPRegs[] = {
    SP::D0, SP::D1, SP::D2, SP::D3, SP::D4, SP::D5, SP::D6, SP::D7, SP::D8, SP::D9, SP::D10, SP::D11, SP::D12, SP::D13, SP::D14, SP::D15, SP::D16, SP::D17, SP::D18, SP::D19, SP::D20, SP::D21, SP::D22, SP::D23, SP::D24, SP::D25, SP::D26, SP::D27, SP::D28, SP::D29, SP::D30, SP::D31, 
  };

  // DFPRegs Bit set.
  const uint8_t DFPRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // I64Regs Register Class...
  const MCPhysReg I64Regs[] = {
    SP::I0, SP::I1, SP::I2, SP::I3, SP::I4, SP::I5, SP::I6, SP::I7, SP::G0, SP::G1, SP::G2, SP::G3, SP::G4, SP::G5, SP::G6, SP::G7, SP::L0, SP::L1, SP::L2, SP::L3, SP::L4, SP::L5, SP::L6, SP::L7, SP::O0, SP::O1, SP::O2, SP::O3, SP::O4, SP::O5, SP::O6, SP::O7, 
  };

  // I64Regs Bit set.
  const uint8_t I64RegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 
  };

  // DFPRegs_with_sub_even Register Class...
  const MCPhysReg DFPRegs_with_sub_even[] = {
    SP::D0, SP::D1, SP::D2, SP::D3, SP::D4, SP::D5, SP::D6, SP::D7, SP::D8, SP::D9, SP::D10, SP::D11, SP::D12, SP::D13, SP::D14, SP::D15, 
  };

  // DFPRegs_with_sub_even Bit set.
  const uint8_t DFPRegs_with_sub_evenBits[] = {
    0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x1f, 
  };

  // QFPRegs Register Class...
  const MCPhysReg QFPRegs[] = {
    SP::Q0, SP::Q1, SP::Q2, SP::Q3, SP::Q4, SP::Q5, SP::Q6, SP::Q7, SP::Q8, SP::Q9, SP::Q10, SP::Q11, SP::Q12, SP::Q13, SP::Q14, SP::Q15, 
  };

  // QFPRegs Bit set.
  const uint8_t QFPRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x01, 
  };

  // QFPRegs_with_sub_even Register Class...
  const MCPhysReg QFPRegs_with_sub_even[] = {
    SP::Q0, SP::Q1, SP::Q2, SP::Q3, SP::Q4, SP::Q5, SP::Q6, SP::Q7, 
  };

  // QFPRegs_with_sub_even Bit set.
  const uint8_t QFPRegs_with_sub_evenBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 
  };

}

extern const char SparcRegClassStrings[] = {
  /* 0 */ 'D', 'F', 'P', 'R', 'e', 'g', 's', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', 'e', 'v', 'e', 'n', 0,
  /* 22 */ 'Q', 'F', 'P', 'R', 'e', 'g', 's', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', 'e', 'v', 'e', 'n', 0,
  /* 44 */ 'I', '6', '4', 'R', 'e', 'g', 's', 0,
  /* 52 */ 'F', 'C', 'C', 'R', 'e', 'g', 's', 0,
  /* 60 */ 'D', 'F', 'P', 'R', 'e', 'g', 's', 0,
  /* 68 */ 'Q', 'F', 'P', 'R', 'e', 'g', 's', 0,
  /* 76 */ 'A', 'S', 'R', 'R', 'e', 'g', 's', 0,
  /* 84 */ 'I', 'n', 't', 'R', 'e', 'g', 's', 0,
};

extern const MCRegisterClass SparcMCRegisterClasses[] = {
  { FCCRegs, FCCRegsBits, 52, 4, sizeof(FCCRegsBits), SP::FCCRegsRegClassID, 0, 0, 1, 1 },
  { ASRRegs, ASRRegsBits, 76, 32, sizeof(ASRRegsBits), SP::ASRRegsRegClassID, 4, 4, 1, 0 },
  { FPRegs, FPRegsBits, 61, 32, sizeof(FPRegsBits), SP::FPRegsRegClassID, 4, 4, 1, 1 },
  { IntRegs, IntRegsBits, 84, 32, sizeof(IntRegsBits), SP::IntRegsRegClassID, 4, 4, 1, 1 },
  { DFPRegs, DFPRegsBits, 60, 32, sizeof(DFPRegsBits), SP::DFPRegsRegClassID, 8, 8, 1, 1 },
  { I64Regs, I64RegsBits, 44, 32, sizeof(I64RegsBits), SP::I64RegsRegClassID, 8, 8, 1, 1 },
  { DFPRegs_with_sub_even, DFPRegs_with_sub_evenBits, 0, 16, sizeof(DFPRegs_with_sub_evenBits), SP::DFPRegs_with_sub_evenRegClassID, 8, 8, 1, 1 },
  { QFPRegs, QFPRegsBits, 68, 16, sizeof(QFPRegsBits), SP::QFPRegsRegClassID, 16, 16, 1, 1 },
  { QFPRegs_with_sub_even, QFPRegs_with_sub_evenBits, 22, 8, sizeof(QFPRegs_with_sub_evenBits), SP::QFPRegs_with_sub_evenRegClassID, 16, 16, 1, 1 },
};

// SP Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0Dwarf2L[] = {
  { 0U, SP::G0 },
  { 1U, SP::G1 },
  { 2U, SP::G2 },
  { 3U, SP::G3 },
  { 4U, SP::G4 },
  { 5U, SP::G5 },
  { 6U, SP::G6 },
  { 7U, SP::G7 },
  { 8U, SP::O0 },
  { 9U, SP::O1 },
  { 10U, SP::O2 },
  { 11U, SP::O3 },
  { 12U, SP::O4 },
  { 13U, SP::O5 },
  { 14U, SP::O6 },
  { 15U, SP::O7 },
  { 16U, SP::L0 },
  { 17U, SP::L1 },
  { 18U, SP::L2 },
  { 19U, SP::L3 },
  { 20U, SP::L4 },
  { 21U, SP::L5 },
  { 22U, SP::L6 },
  { 23U, SP::L7 },
  { 24U, SP::I0 },
  { 25U, SP::I1 },
  { 26U, SP::I2 },
  { 27U, SP::I3 },
  { 28U, SP::I4 },
  { 29U, SP::I5 },
  { 30U, SP::I6 },
  { 31U, SP::I7 },
  { 32U, SP::F0 },
  { 33U, SP::F1 },
  { 34U, SP::F2 },
  { 35U, SP::F3 },
  { 36U, SP::F4 },
  { 37U, SP::F5 },
  { 38U, SP::F6 },
  { 39U, SP::F7 },
  { 40U, SP::F8 },
  { 41U, SP::F9 },
  { 42U, SP::F10 },
  { 43U, SP::F11 },
  { 44U, SP::F12 },
  { 45U, SP::F13 },
  { 46U, SP::F14 },
  { 47U, SP::F15 },
  { 48U, SP::F16 },
  { 49U, SP::F17 },
  { 50U, SP::F18 },
  { 51U, SP::F19 },
  { 52U, SP::F20 },
  { 53U, SP::F21 },
  { 54U, SP::F22 },
  { 55U, SP::F23 },
  { 56U, SP::F24 },
  { 57U, SP::F25 },
  { 58U, SP::F26 },
  { 59U, SP::F27 },
  { 60U, SP::F28 },
  { 61U, SP::F29 },
  { 62U, SP::F30 },
  { 63U, SP::F31 },
  { 64U, SP::Y },
  { 72U, SP::D0 },
  { 73U, SP::D1 },
  { 74U, SP::D2 },
  { 75U, SP::D3 },
  { 76U, SP::D4 },
  { 77U, SP::D5 },
  { 78U, SP::D6 },
  { 79U, SP::D7 },
  { 80U, SP::D8 },
  { 81U, SP::D9 },
  { 82U, SP::D10 },
  { 83U, SP::D11 },
  { 84U, SP::D12 },
  { 85U, SP::D13 },
  { 86U, SP::D14 },
  { 87U, SP::D15 },
};
extern const unsigned SPDwarfFlavour0Dwarf2LSize = array_lengthof(SPDwarfFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0Dwarf2L[] = {
  { 0U, SP::G0 },
  { 1U, SP::G1 },
  { 2U, SP::G2 },
  { 3U, SP::G3 },
  { 4U, SP::G4 },
  { 5U, SP::G5 },
  { 6U, SP::G6 },
  { 7U, SP::G7 },
  { 8U, SP::O0 },
  { 9U, SP::O1 },
  { 10U, SP::O2 },
  { 11U, SP::O3 },
  { 12U, SP::O4 },
  { 13U, SP::O5 },
  { 14U, SP::O6 },
  { 15U, SP::O7 },
  { 16U, SP::L0 },
  { 17U, SP::L1 },
  { 18U, SP::L2 },
  { 19U, SP::L3 },
  { 20U, SP::L4 },
  { 21U, SP::L5 },
  { 22U, SP::L6 },
  { 23U, SP::L7 },
  { 24U, SP::I0 },
  { 25U, SP::I1 },
  { 26U, SP::I2 },
  { 27U, SP::I3 },
  { 28U, SP::I4 },
  { 29U, SP::I5 },
  { 30U, SP::I6 },
  { 31U, SP::I7 },
  { 32U, SP::F0 },
  { 33U, SP::F1 },
  { 34U, SP::F2 },
  { 35U, SP::F3 },
  { 36U, SP::F4 },
  { 37U, SP::F5 },
  { 38U, SP::F6 },
  { 39U, SP::F7 },
  { 40U, SP::F8 },
  { 41U, SP::F9 },
  { 42U, SP::F10 },
  { 43U, SP::F11 },
  { 44U, SP::F12 },
  { 45U, SP::F13 },
  { 46U, SP::F14 },
  { 47U, SP::F15 },
  { 48U, SP::F16 },
  { 49U, SP::F17 },
  { 50U, SP::F18 },
  { 51U, SP::F19 },
  { 52U, SP::F20 },
  { 53U, SP::F21 },
  { 54U, SP::F22 },
  { 55U, SP::F23 },
  { 56U, SP::F24 },
  { 57U, SP::F25 },
  { 58U, SP::F26 },
  { 59U, SP::F27 },
  { 60U, SP::F28 },
  { 61U, SP::F29 },
  { 62U, SP::F30 },
  { 63U, SP::F31 },
  { 64U, SP::Y },
  { 72U, SP::D0 },
  { 73U, SP::D1 },
  { 74U, SP::D2 },
  { 75U, SP::D3 },
  { 76U, SP::D4 },
  { 77U, SP::D5 },
  { 78U, SP::D6 },
  { 79U, SP::D7 },
  { 80U, SP::D8 },
  { 81U, SP::D9 },
  { 82U, SP::D10 },
  { 83U, SP::D11 },
  { 84U, SP::D12 },
  { 85U, SP::D13 },
  { 86U, SP::D14 },
  { 87U, SP::D15 },
};
extern const unsigned SPEHFlavour0Dwarf2LSize = array_lengthof(SPEHFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0L2Dwarf[] = {
  { SP::Y, 64U },
  { SP::D0, 72U },
  { SP::D1, 73U },
  { SP::D2, 74U },
  { SP::D3, 75U },
  { SP::D4, 76U },
  { SP::D5, 77U },
  { SP::D6, 78U },
  { SP::D7, 79U },
  { SP::D8, 80U },
  { SP::D9, 81U },
  { SP::D10, 82U },
  { SP::D11, 83U },
  { SP::D12, 84U },
  { SP::D13, 85U },
  { SP::D14, 86U },
  { SP::D15, 87U },
  { SP::F0, 32U },
  { SP::F1, 33U },
  { SP::F2, 34U },
  { SP::F3, 35U },
  { SP::F4, 36U },
  { SP::F5, 37U },
  { SP::F6, 38U },
  { SP::F7, 39U },
  { SP::F8, 40U },
  { SP::F9, 41U },
  { SP::F10, 42U },
  { SP::F11, 43U },
  { SP::F12, 44U },
  { SP::F13, 45U },
  { SP::F14, 46U },
  { SP::F15, 47U },
  { SP::F16, 48U },
  { SP::F17, 49U },
  { SP::F18, 50U },
  { SP::F19, 51U },
  { SP::F20, 52U },
  { SP::F21, 53U },
  { SP::F22, 54U },
  { SP::F23, 55U },
  { SP::F24, 56U },
  { SP::F25, 57U },
  { SP::F26, 58U },
  { SP::F27, 59U },
  { SP::F28, 60U },
  { SP::F29, 61U },
  { SP::F30, 62U },
  { SP::F31, 63U },
  { SP::G0, 0U },
  { SP::G1, 1U },
  { SP::G2, 2U },
  { SP::G3, 3U },
  { SP::G4, 4U },
  { SP::G5, 5U },
  { SP::G6, 6U },
  { SP::G7, 7U },
  { SP::I0, 24U },
  { SP::I1, 25U },
  { SP::I2, 26U },
  { SP::I3, 27U },
  { SP::I4, 28U },
  { SP::I5, 29U },
  { SP::I6, 30U },
  { SP::I7, 31U },
  { SP::L0, 16U },
  { SP::L1, 17U },
  { SP::L2, 18U },
  { SP::L3, 19U },
  { SP::L4, 20U },
  { SP::L5, 21U },
  { SP::L6, 22U },
  { SP::L7, 23U },
  { SP::O0, 8U },
  { SP::O1, 9U },
  { SP::O2, 10U },
  { SP::O3, 11U },
  { SP::O4, 12U },
  { SP::O5, 13U },
  { SP::O6, 14U },
  { SP::O7, 15U },
};
extern const unsigned SPDwarfFlavour0L2DwarfSize = array_lengthof(SPDwarfFlavour0L2Dwarf);

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0L2Dwarf[] = {
  { SP::Y, 64U },
  { SP::D0, 72U },
  { SP::D1, 73U },
  { SP::D2, 74U },
  { SP::D3, 75U },
  { SP::D4, 76U },
  { SP::D5, 77U },
  { SP::D6, 78U },
  { SP::D7, 79U },
  { SP::D8, 80U },
  { SP::D9, 81U },
  { SP::D10, 82U },
  { SP::D11, 83U },
  { SP::D12, 84U },
  { SP::D13, 85U },
  { SP::D14, 86U },
  { SP::D15, 87U },
  { SP::F0, 32U },
  { SP::F1, 33U },
  { SP::F2, 34U },
  { SP::F3, 35U },
  { SP::F4, 36U },
  { SP::F5, 37U },
  { SP::F6, 38U },
  { SP::F7, 39U },
  { SP::F8, 40U },
  { SP::F9, 41U },
  { SP::F10, 42U },
  { SP::F11, 43U },
  { SP::F12, 44U },
  { SP::F13, 45U },
  { SP::F14, 46U },
  { SP::F15, 47U },
  { SP::F16, 48U },
  { SP::F17, 49U },
  { SP::F18, 50U },
  { SP::F19, 51U },
  { SP::F20, 52U },
  { SP::F21, 53U },
  { SP::F22, 54U },
  { SP::F23, 55U },
  { SP::F24, 56U },
  { SP::F25, 57U },
  { SP::F26, 58U },
  { SP::F27, 59U },
  { SP::F28, 60U },
  { SP::F29, 61U },
  { SP::F30, 62U },
  { SP::F31, 63U },
  { SP::G0, 0U },
  { SP::G1, 1U },
  { SP::G2, 2U },
  { SP::G3, 3U },
  { SP::G4, 4U },
  { SP::G5, 5U },
  { SP::G6, 6U },
  { SP::G7, 7U },
  { SP::I0, 24U },
  { SP::I1, 25U },
  { SP::I2, 26U },
  { SP::I3, 27U },
  { SP::I4, 28U },
  { SP::I5, 29U },
  { SP::I6, 30U },
  { SP::I7, 31U },
  { SP::L0, 16U },
  { SP::L1, 17U },
  { SP::L2, 18U },
  { SP::L3, 19U },
  { SP::L4, 20U },
  { SP::L5, 21U },
  { SP::L6, 22U },
  { SP::L7, 23U },
  { SP::O0, 8U },
  { SP::O1, 9U },
  { SP::O2, 10U },
  { SP::O3, 11U },
  { SP::O4, 12U },
  { SP::O5, 13U },
  { SP::O6, 14U },
  { SP::O7, 15U },
};
extern const unsigned SPEHFlavour0L2DwarfSize = array_lengthof(SPEHFlavour0L2Dwarf);

extern const uint16_t SparcRegEncodingTable[] = {
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  1,
  3,
  5,
  7,
  9,
  11,
  13,
  15,
  17,
  19,
  21,
  23,
  25,
  27,
  29,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  4,
  8,
  12,
  16,
  20,
  24,
  28,
  1,
  5,
  9,
  13,
  17,
  21,
  25,
  29,
};
static inline void InitSparcMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(SparcRegDesc, 153, RA, PC, SparcMCRegisterClasses, 9, SparcRegUnitRoots, 120, SparcRegDiffLists, SparcLaneMaskLists, SparcRegStrings, SparcRegClassStrings, SparcSubRegIdxLists, 7,
SparcSubRegIdxRanges, SparcRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(SPDwarfFlavour0Dwarf2L, SPDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(SPEHFlavour0Dwarf2L, SPEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(SPDwarfFlavour0L2Dwarf, SPDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(SPEHFlavour0L2Dwarf, SPEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Register Information Header Fragment                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

class SparcFrameLowering;

struct SparcGenRegisterInfo : public TargetRegisterInfo {
  explicit SparcGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  bool needsStackRealignment(const MachineFunction &) const override
     { return false; }
  unsigned composeSubRegIndicesImpl(unsigned, unsigned) const override;
  unsigned composeSubRegIndexLaneMaskImpl(unsigned, unsigned) const override;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const override;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const override;
  unsigned getRegUnitWeight(unsigned RegUnit) const override;
  unsigned getNumRegPressureSets() const override;
  const char *getRegPressureSetName(unsigned Idx) const override;
  unsigned getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const override;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const override;
  const int *getRegUnitPressureSets(unsigned RegUnit) const override;
  ArrayRef<const char *> getRegMaskNames() const override;
  ArrayRef<const uint32_t *> getRegMasks() const override;
  /// Devirtualized TargetFrameLowering.
  static const SparcFrameLowering *getFrameLowering(
      const MachineFunction &MF);
};

namespace SP { // Register classes
  extern const TargetRegisterClass FCCRegsRegClass;
  extern const TargetRegisterClass ASRRegsRegClass;
  extern const TargetRegisterClass FPRegsRegClass;
  extern const TargetRegisterClass IntRegsRegClass;
  extern const TargetRegisterClass DFPRegsRegClass;
  extern const TargetRegisterClass I64RegsRegClass;
  extern const TargetRegisterClass DFPRegs_with_sub_evenRegClass;
  extern const TargetRegisterClass QFPRegsRegClass;
  extern const TargetRegisterClass QFPRegs_with_sub_evenRegClass;
} // end of namespace Sparc

} // End llvm namespace
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register and Register Classes Information                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass SparcMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i1, MVT::Other,
  /* 2 */ MVT::i32, MVT::Other,
  /* 4 */ MVT::i32, MVT::i64, MVT::Other,
  /* 7 */ MVT::f32, MVT::Other,
  /* 9 */ MVT::f64, MVT::Other,
  /* 11 */ MVT::f128, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "sub_even", "sub_even64", "sub_odd", "sub_odd64", "sub_odd64_then_sub_even", "sub_odd64_then_sub_odd", "" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x00000001, // sub_even
  0x00000003, // sub_even64
  0x00000002, // sub_odd
  0x0000000c, // sub_odd64
  0x00000004, // sub_odd64_then_sub_even
  0x00000008, // sub_odd64_then_sub_odd
 };



static const TargetRegisterClass *const NullRegClasses[] = { nullptr };

static const uint32_t FCCRegsSubClassMask[] = {
  0x00000001, 
};

static const uint32_t ASRRegsSubClassMask[] = {
  0x00000002, 
};

static const uint32_t FPRegsSubClassMask[] = {
  0x00000004, 
  0x00000140, // sub_even
  0x00000140, // sub_odd
  0x00000100, // sub_odd64_then_sub_even
  0x00000100, // sub_odd64_then_sub_odd
};

static const uint32_t IntRegsSubClassMask[] = {
  0x00000028, 
};

static const uint32_t DFPRegsSubClassMask[] = {
  0x00000050, 
  0x00000180, // sub_even64
  0x00000180, // sub_odd64
};

static const uint32_t I64RegsSubClassMask[] = {
  0x00000020, 
};

static const uint32_t DFPRegs_with_sub_evenSubClassMask[] = {
  0x00000040, 
  0x00000100, // sub_even64
  0x00000100, // sub_odd64
};

static const uint32_t QFPRegsSubClassMask[] = {
  0x00000180, 
};

static const uint32_t QFPRegs_with_sub_evenSubClassMask[] = {
  0x00000100, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 2, 4, 0,
  /* 3 */ 1, 3, 5, 6, 0,
};

static const TargetRegisterClass *const I64RegsSuperclasses[] = {
  &SP::IntRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const DFPRegs_with_sub_evenSuperclasses[] = {
  &SP::DFPRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const QFPRegs_with_sub_evenSuperclasses[] = {
  &SP::QFPRegsRegClass,
  nullptr
};


namespace SP {   // Register class instances
  extern const TargetRegisterClass FCCRegsRegClass = {
    &SparcMCRegisterClasses[FCCRegsRegClassID],
    VTLists + 0,
    FCCRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    0x00000000,
    0,
    false, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass ASRRegsRegClass = {
    &SparcMCRegisterClasses[ASRRegsRegClassID],
    VTLists + 2,
    ASRRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    0x00000000,
    0,
    false, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass FPRegsRegClass = {
    &SparcMCRegisterClasses[FPRegsRegClassID],
    VTLists + 7,
    FPRegsSubClassMask,
    SuperRegIdxSeqs + 3,
    0x00000000,
    0,
    false, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass IntRegsRegClass = {
    &SparcMCRegisterClasses[IntRegsRegClassID],
    VTLists + 4,
    IntRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    0x00000000,
    0,
    false, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass DFPRegsRegClass = {
    &SparcMCRegisterClasses[DFPRegsRegClassID],
    VTLists + 9,
    DFPRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    0x00000003,
    0,
    true, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass I64RegsRegClass = {
    &SparcMCRegisterClasses[I64RegsRegClassID],
    VTLists + 5,
    I64RegsSubClassMask,
    SuperRegIdxSeqs + 2,
    0x00000000,
    0,
    false, /* HasDisjunctSubRegs */
    I64RegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass DFPRegs_with_sub_evenRegClass = {
    &SparcMCRegisterClasses[DFPRegs_with_sub_evenRegClassID],
    VTLists + 9,
    DFPRegs_with_sub_evenSubClassMask,
    SuperRegIdxSeqs + 0,
    0x00000003,
    0,
    true, /* HasDisjunctSubRegs */
    DFPRegs_with_sub_evenSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass QFPRegsRegClass = {
    &SparcMCRegisterClasses[QFPRegsRegClassID],
    VTLists + 11,
    QFPRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    0x0000000f,
    0,
    true, /* HasDisjunctSubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass QFPRegs_with_sub_evenRegClass = {
    &SparcMCRegisterClasses[QFPRegs_with_sub_evenRegClassID],
    VTLists + 11,
    QFPRegs_with_sub_evenSubClassMask,
    SuperRegIdxSeqs + 2,
    0x0000000f,
    0,
    true, /* HasDisjunctSubRegs */
    QFPRegs_with_sub_evenSuperclasses,
    nullptr
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &SP::FCCRegsRegClass,
    &SP::ASRRegsRegClass,
    &SP::FPRegsRegClass,
    &SP::IntRegsRegClass,
    &SP::DFPRegsRegClass,
    &SP::I64RegsRegClass,
    &SP::DFPRegs_with_sub_evenRegClass,
    &SP::QFPRegsRegClass,
    &SP::QFPRegs_with_sub_evenRegClass,
  };
}

static const TargetRegisterInfoDesc SparcRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
unsigned SparcGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[6] = {
    0, 0, 0, 1, 0, 0, 
  };
  static const uint8_t Rows[2][6] = {
    { 1, 0, 3, 0, 0, 0, },
    { 5, 0, 6, 0, 0, 0, },
  };

  --IdxA; assert(IdxA < 6);
  --IdxB; assert(IdxB < 6);
  return Rows[RowMap[IdxA]][IdxB];
}

unsigned SparcGenRegisterInfo::composeSubRegIndexLaneMaskImpl(unsigned IdxA, unsigned LaneMask) const {
  struct MaskRolOp {
    unsigned Mask;
    uint8_t  RotateLeft;
  };
  static const MaskRolOp Seqs[] = {
    { 0xFFFFFFFF,  0 }, { 0, 0 },   // Sequence 0
    { 0xFFFFFFFF,  2 }, { 0, 0 }  // Sequence 2
  };
  static const MaskRolOp *const CompositeSequences[] = {
    &Seqs[0], // to sub_even
    &Seqs[0], // to sub_even64
    &Seqs[0], // to sub_odd
    &Seqs[2], // to sub_odd64
    &Seqs[0], // to sub_odd64_then_sub_even
    &Seqs[0] // to sub_odd64_then_sub_odd
  };

  --IdxA; assert(IdxA < 6 && "Subregister index out of bounds");
  unsigned Result = 0;
  for (const MaskRolOp *Ops = CompositeSequences[IdxA]; Ops->Mask != 0; ++Ops) {
    unsigned Masked = LaneMask & Ops->Mask;
    Result |= (Masked << Ops->RotateLeft) & 0xFFFFFFFF;
    Result |= (Masked >> ((32 - Ops->RotateLeft) & 0x1F));
  }
  return Result;
}
const TargetRegisterClass *SparcGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[9][6] = {
    {	// FCCRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// ASRRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// FPRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// IntRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// DFPRegs
      7,	// sub_even -> DFPRegs_with_sub_even
      0,	// sub_even64
      7,	// sub_odd -> DFPRegs_with_sub_even
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// I64Regs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// DFPRegs_with_sub_even
      7,	// sub_even -> DFPRegs_with_sub_even
      0,	// sub_even64
      7,	// sub_odd -> DFPRegs_with_sub_even
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// QFPRegs
      9,	// sub_even -> QFPRegs_with_sub_even
      8,	// sub_even64 -> QFPRegs
      9,	// sub_odd -> QFPRegs_with_sub_even
      8,	// sub_odd64 -> QFPRegs
      9,	// sub_odd64_then_sub_even -> QFPRegs_with_sub_even
      9,	// sub_odd64_then_sub_odd -> QFPRegs_with_sub_even
    },
    {	// QFPRegs_with_sub_even
      9,	// sub_even -> QFPRegs_with_sub_even
      9,	// sub_even64 -> QFPRegs_with_sub_even
      9,	// sub_odd -> QFPRegs_with_sub_even
      9,	// sub_odd64 -> QFPRegs_with_sub_even
      9,	// sub_odd64_then_sub_even -> QFPRegs_with_sub_even
      9,	// sub_odd64_then_sub_odd -> QFPRegs_with_sub_even
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 6 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &SparcGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 4},  	// FCCRegs
    {0, 0},  	// ASRRegs
    {1, 32},  	// FPRegs
    {1, 32},  	// IntRegs
    {2, 64},  	// DFPRegs
    {1, 32},  	// I64Regs
    {2, 32},  	// DFPRegs_with_sub_even
    {4, 64},  	// QFPRegs
    {4, 32},  	// QFPRegs_with_sub_even
  };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned SparcGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 120 && "invalid register unit");
  static const uint8_t RUWeightTable[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, };
  return RUWeightTable[RegUnit];
}


// Get the number of dimensions of register pressure.
unsigned SparcGenRegisterInfo::getNumRegPressureSets() const {
  return 4;
}

// Get the name of this register unit pressure set.
const char *SparcGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *const PressureNameTable[] = {
    "FCCRegs",
    "FPRegs",
    "IntRegs",
    "DFPRegs",
    nullptr };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned SparcGenRegisterInfo::
getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const {
  static const uint8_t PressureLimitTable[] = {
    4,  	// 0: FCCRegs
    32,  	// 1: FPRegs
    32,  	// 2: IntRegs
    64,  	// 3: DFPRegs
  };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
  /* 0 */ 0, -1,
  /* 2 */ 2, -1,
  /* 4 */ 1, 3, -1,
};

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* SparcGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const uint8_t RCSetStartTable[] = {
    0,1,4,2,5,2,4,5,4,};
  return &RCSetsTable[RCSetStartTable[RC->getID()]];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* SparcGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 120 && "invalid register unit");
  static const uint8_t RUSetStartTable[] = {
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,};
  return &RCSetsTable[RUSetStartTable[RegUnit]];
}

extern const MCRegisterDesc SparcRegDesc[];
extern const MCPhysReg SparcRegDiffLists[];
extern const unsigned SparcLaneMaskLists[];
extern const char SparcRegStrings[];
extern const char SparcRegClassStrings[];
extern const MCPhysReg SparcRegUnitRoots[][2];
extern const uint16_t SparcSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits SparcSubRegIdxRanges[];
extern const uint16_t SparcRegEncodingTable[];
// SP Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0Dwarf2L[];
extern const unsigned SPDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0Dwarf2L[];
extern const unsigned SPEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0L2Dwarf[];
extern const unsigned SPDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0L2Dwarf[];
extern const unsigned SPEHFlavour0L2DwarfSize;

SparcGenRegisterInfo::
SparcGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(SparcRegInfoDesc, RegisterClasses, RegisterClasses+9,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, 0xffffffff) {
  InitMCRegisterInfo(SparcRegDesc, 153, RA, PC,
                     SparcMCRegisterClasses, 9,
                     SparcRegUnitRoots,
                     120,
                     SparcRegDiffLists,
                     SparcLaneMaskLists,
                     SparcRegStrings,
                     SparcRegClassStrings,
                     SparcSubRegIdxLists,
                     7,
                     SparcSubRegIdxRanges,
                     SparcRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(SPDwarfFlavour0Dwarf2L, SPDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(SPEHFlavour0Dwarf2L, SPEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(SPDwarfFlavour0L2Dwarf, SPDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(SPEHFlavour0L2Dwarf, SPEHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_SaveList[] = { 0 };
static const uint32_t CSR_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0xfffe0000, 0x00000001, };
static const MCPhysReg RTCSR_SaveList[] = { 0 };
static const uint32_t RTCSR_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0x01800000, 0x00000000, };


ArrayRef<const uint32_t *> SparcGenRegisterInfo::getRegMasks() const {
  static const uint32_t *Masks[] = {
    CSR_RegMask, 
    RTCSR_RegMask, 
    nullptr
  };
  return ArrayRef<const uint32_t *>(Masks, (size_t)2);
}

ArrayRef<const char *> SparcGenRegisterInfo::getRegMaskNames() const {
  static const char *Names[] = {
    "CSR",
    "RTCSR",
    nullptr
  };
  return ArrayRef<const char *>(Names, (size_t)2);
}

const SparcFrameLowering *SparcGenRegisterInfo::
    getFrameLowering(const MachineFunction &MF) {
  return static_cast<const SparcFrameLowering *>(
      MF.getSubtarget().getFrameLowering());
}

} // End llvm namespace
#endif // GET_REGINFO_TARGET_DESC

